
LB2_Tr103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d004  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800d118  0800d118  0001d118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d508  0800d508  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800d508  0800d508  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d508  0800d508  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d508  0800d508  0001d508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d50c  0800d50c  0001d50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012cc  200001ec  0800d6fc  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014b8  0800d6fc  000214b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a1f  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003355  00000000  00000000  00032c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00035f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00037060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b736  00000000  00000000  00037f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b3c  00000000  00000000  000536be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eeaa  00000000  00000000  000681fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f70a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057c0  00000000  00000000  000f70f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d0fc 	.word	0x0800d0fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800d0fc 	.word	0x0800d0fc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_GPIO_Init+0x7c>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a18      	ldr	r2, [pc, #96]	; (800117c <MX_GPIO_Init+0x7c>)
 800111a:	f043 0320 	orr.w	r3, r3, #32
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_GPIO_Init+0x7c>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0320 	and.w	r3, r3, #32
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_GPIO_Init+0x7c>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_GPIO_Init+0x7c>)
 8001132:	f043 0308 	orr.w	r3, r3, #8
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_GPIO_Init+0x7c>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <MX_GPIO_Init+0x7c>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a0c      	ldr	r2, [pc, #48]	; (800117c <MX_GPIO_Init+0x7c>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_GPIO_Init+0x7c>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800115c:	2301      	movs	r3, #1
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	4619      	mov	r1, r3
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_GPIO_Init+0x80>)
 8001170:	f001 f886 	bl	8002280 <HAL_GPIO_Init>

}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	40010c00 	.word	0x40010c00
 8001184:	00000000 	.word	0x00000000

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118e:	f000 fee3 	bl	8001f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001192:	f000 fbc1 	bl	8001918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001196:	f7ff ffb3 	bl	8001100 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800119a:	f008 f80f 	bl	80091bc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800119e:	f000 fdc9 	bl	8001d34 <MX_TIM2_Init>
  MX_TIM4_Init();
 80011a2:	f000 fe1d 	bl	8001de0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011a6:	4894      	ldr	r0, [pc, #592]	; (80013f8 <main+0x270>)
 80011a8:	f003 fc08 	bl	80049bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80011ac:	4893      	ldr	r0, [pc, #588]	; (80013fc <main+0x274>)
 80011ae:	f003 fc05 	bl	80049bc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80011b2:	2101      	movs	r1, #1
 80011b4:	4892      	ldr	r0, [pc, #584]	; (8001400 <main+0x278>)
 80011b6:	f001 f9e7 	bl	8002588 <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b25a      	sxtb	r2, r3
 80011be:	4b91      	ldr	r3, [pc, #580]	; (8001404 <main+0x27c>)
 80011c0:	701a      	strb	r2, [r3, #0]
	  if (status == 1 && poz != 1) {
 80011c2:	4b90      	ldr	r3, [pc, #576]	; (8001404 <main+0x27c>)
 80011c4:	f993 3000 	ldrsb.w	r3, [r3]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d119      	bne.n	8001200 <main+0x78>
 80011cc:	4b8e      	ldr	r3, [pc, #568]	; (8001408 <main+0x280>)
 80011ce:	f993 3000 	ldrsb.w	r3, [r3]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d014      	beq.n	8001200 <main+0x78>
		  r = rand() % 4;
 80011d6:	f008 fcbf 	bl	8009b58 <rand>
 80011da:	4603      	mov	r3, r0
 80011dc:	425a      	negs	r2, r3
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	bf58      	it	pl
 80011e8:	4253      	negpl	r3, r2
 80011ea:	b25a      	sxtb	r2, r3
 80011ec:	4b87      	ldr	r3, [pc, #540]	; (800140c <main+0x284>)
 80011ee:	701a      	strb	r2, [r3, #0]
		  tp = 0;
 80011f0:	4b87      	ldr	r3, [pc, #540]	; (8001410 <main+0x288>)
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
		  poz = 1;
 80011f8:	4b83      	ldr	r3, [pc, #524]	; (8001408 <main+0x280>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e00c      	b.n	800121a <main+0x92>
	  }
	  else if (status == 0 && poz == 1) {
 8001200:	4b80      	ldr	r3, [pc, #512]	; (8001404 <main+0x27c>)
 8001202:	f993 3000 	ldrsb.w	r3, [r3]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d107      	bne.n	800121a <main+0x92>
 800120a:	4b7f      	ldr	r3, [pc, #508]	; (8001408 <main+0x280>)
 800120c:	f993 3000 	ldrsb.w	r3, [r3]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d102      	bne.n	800121a <main+0x92>
		  poz = 10;
 8001214:	4b7c      	ldr	r3, [pc, #496]	; (8001408 <main+0x280>)
 8001216:	220a      	movs	r2, #10
 8001218:	701a      	strb	r2, [r3, #0]
	  }

	  if (r == 0) {
 800121a:	4b7c      	ldr	r3, [pc, #496]	; (800140c <main+0x284>)
 800121c:	f993 3000 	ldrsb.w	r3, [r3]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d141      	bne.n	80012a8 <main+0x120>
	  	Fv = 0.1 * (1.0206 * exp(-0.2 * tp) * sin(0.9798 * tp));
 8001224:	4b7a      	ldr	r3, [pc, #488]	; (8001410 <main+0x288>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f8f5 	bl	8000418 <__aeabi_f2d>
 800122e:	a366      	add	r3, pc, #408	; (adr r3, 80013c8 <main+0x240>)
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f7ff f948 	bl	80004c8 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f009 ff7a 	bl	800b138 <exp>
 8001244:	a362      	add	r3, pc, #392	; (adr r3, 80013d0 <main+0x248>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f93d 	bl	80004c8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4614      	mov	r4, r2
 8001254:	461d      	mov	r5, r3
 8001256:	4b6e      	ldr	r3, [pc, #440]	; (8001410 <main+0x288>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f8dc 	bl	8000418 <__aeabi_f2d>
 8001260:	a35d      	add	r3, pc, #372	; (adr r3, 80013d8 <main+0x250>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f92f 	bl	80004c8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f009 ff19 	bl	800b0a8 <sin>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	f7ff f923 	bl	80004c8 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	a355      	add	r3, pc, #340	; (adr r3, 80013e0 <main+0x258>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff f91a 	bl	80004c8 <__aeabi_dmul>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f7ff fc0c 	bl	8000ab8 <__aeabi_d2f>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a5c      	ldr	r2, [pc, #368]	; (8001414 <main+0x28c>)
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e0fd      	b.n	80014a4 <main+0x31c>
	  }
	  else if (r == 1) {
 80012a8:	4b58      	ldr	r3, [pc, #352]	; (800140c <main+0x284>)
 80012aa:	f993 3000 	ldrsb.w	r3, [r3]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d141      	bne.n	8001336 <main+0x1ae>
	  	Fv = 0.3 * (1.0206 * exp(-0.2 * tp) * sin(0.9798 * tp));
 80012b2:	4b57      	ldr	r3, [pc, #348]	; (8001410 <main+0x288>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f8ae 	bl	8000418 <__aeabi_f2d>
 80012bc:	a342      	add	r3, pc, #264	; (adr r3, 80013c8 <main+0x240>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff f901 	bl	80004c8 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f009 ff33 	bl	800b138 <exp>
 80012d2:	a33f      	add	r3, pc, #252	; (adr r3, 80013d0 <main+0x248>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff f8f6 	bl	80004c8 <__aeabi_dmul>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4614      	mov	r4, r2
 80012e2:	461d      	mov	r5, r3
 80012e4:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <main+0x288>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f895 	bl	8000418 <__aeabi_f2d>
 80012ee:	a33a      	add	r3, pc, #232	; (adr r3, 80013d8 <main+0x250>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff f8e8 	bl	80004c8 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f009 fed2 	bl	800b0a8 <sin>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4620      	mov	r0, r4
 800130a:	4629      	mov	r1, r5
 800130c:	f7ff f8dc 	bl	80004c8 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	a333      	add	r3, pc, #204	; (adr r3, 80013e8 <main+0x260>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f8d3 	bl	80004c8 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fbc5 	bl	8000ab8 <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	4a38      	ldr	r2, [pc, #224]	; (8001414 <main+0x28c>)
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e0b6      	b.n	80014a4 <main+0x31c>
	  }
	  else if (r == 2) {
 8001336:	4b35      	ldr	r3, [pc, #212]	; (800140c <main+0x284>)
 8001338:	f993 3000 	ldrsb.w	r3, [r3]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d16b      	bne.n	8001418 <main+0x290>
	  	Fv = 0.55 * (1.0206 * exp(-0.2 * tp) * sin(0.9798 * tp));
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <main+0x288>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f867 	bl	8000418 <__aeabi_f2d>
 800134a:	a31f      	add	r3, pc, #124	; (adr r3, 80013c8 <main+0x240>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff f8ba 	bl	80004c8 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f009 feec 	bl	800b138 <exp>
 8001360:	a31b      	add	r3, pc, #108	; (adr r3, 80013d0 <main+0x248>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f7ff f8af 	bl	80004c8 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4614      	mov	r4, r2
 8001370:	461d      	mov	r5, r3
 8001372:	4b27      	ldr	r3, [pc, #156]	; (8001410 <main+0x288>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f84e 	bl	8000418 <__aeabi_f2d>
 800137c:	a316      	add	r3, pc, #88	; (adr r3, 80013d8 <main+0x250>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff f8a1 	bl	80004c8 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f009 fe8b 	bl	800b0a8 <sin>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4620      	mov	r0, r4
 8001398:	4629      	mov	r1, r5
 800139a:	f7ff f895 	bl	80004c8 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	a312      	add	r3, pc, #72	; (adr r3, 80013f0 <main+0x268>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff f88c 	bl	80004c8 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fb7e 	bl	8000ab8 <__aeabi_d2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a15      	ldr	r2, [pc, #84]	; (8001414 <main+0x28c>)
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e06f      	b.n	80014a4 <main+0x31c>
 80013c4:	f3af 8000 	nop.w
 80013c8:	9999999a 	.word	0x9999999a
 80013cc:	bfc99999 	.word	0xbfc99999
 80013d0:	aa64c2f8 	.word	0xaa64c2f8
 80013d4:	3ff05460 	.word	0x3ff05460
 80013d8:	8793dd98 	.word	0x8793dd98
 80013dc:	3fef5a85 	.word	0x3fef5a85
 80013e0:	9999999a 	.word	0x9999999a
 80013e4:	3fb99999 	.word	0x3fb99999
 80013e8:	33333333 	.word	0x33333333
 80013ec:	3fd33333 	.word	0x3fd33333
 80013f0:	9999999a 	.word	0x9999999a
 80013f4:	3fe19999 	.word	0x3fe19999
 80013f8:	2000023c 	.word	0x2000023c
 80013fc:	20000284 	.word	0x20000284
 8001400:	40010c00 	.word	0x40010c00
 8001404:	20000208 	.word	0x20000208
 8001408:	20000209 	.word	0x20000209
 800140c:	20000002 	.word	0x20000002
 8001410:	20000210 	.word	0x20000210
 8001414:	2000022c 	.word	0x2000022c
	  }
	  else if (r == 3) {
 8001418:	4bd1      	ldr	r3, [pc, #836]	; (8001760 <main+0x5d8>)
 800141a:	f993 3000 	ldrsb.w	r3, [r3]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d140      	bne.n	80014a4 <main+0x31c>
	  	Fv = 0.7 * (1.0206 * exp(-0.2 * tp) * sin(0.9798 * tp));
 8001422:	4bd0      	ldr	r3, [pc, #832]	; (8001764 <main+0x5dc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7fe fff6 	bl	8000418 <__aeabi_f2d>
 800142c:	a3c4      	add	r3, pc, #784	; (adr r3, 8001740 <main+0x5b8>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff f849 	bl	80004c8 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f009 fe7b 	bl	800b138 <exp>
 8001442:	a3c1      	add	r3, pc, #772	; (adr r3, 8001748 <main+0x5c0>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff f83e 	bl	80004c8 <__aeabi_dmul>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4614      	mov	r4, r2
 8001452:	461d      	mov	r5, r3
 8001454:	4bc3      	ldr	r3, [pc, #780]	; (8001764 <main+0x5dc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7fe ffdd 	bl	8000418 <__aeabi_f2d>
 800145e:	a3bc      	add	r3, pc, #752	; (adr r3, 8001750 <main+0x5c8>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7ff f830 	bl	80004c8 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f009 fe1a 	bl	800b0a8 <sin>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7ff f824 	bl	80004c8 <__aeabi_dmul>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	a3b3      	add	r3, pc, #716	; (adr r3, 8001758 <main+0x5d0>)
 800148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148e:	f7ff f81b 	bl	80004c8 <__aeabi_dmul>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f7ff fb0d 	bl	8000ab8 <__aeabi_d2f>
 800149e:	4603      	mov	r3, r0
 80014a0:	4ab1      	ldr	r2, [pc, #708]	; (8001768 <main+0x5e0>)
 80014a2:	6013      	str	r3, [r2, #0]
	  }

	  f1 = sqrt((4*pow(T2,2) - pow(T1,2))/(4*pow(T2,4)));
 80014a4:	4bb1      	ldr	r3, [pc, #708]	; (800176c <main+0x5e4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ffb5 	bl	8000418 <__aeabi_f2d>
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b6:	f009 fe79 	bl	800b1ac <pow>
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	4bac      	ldr	r3, [pc, #688]	; (8001770 <main+0x5e8>)
 80014c0:	f7ff f802 	bl	80004c8 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4614      	mov	r4, r2
 80014ca:	461d      	mov	r5, r3
 80014cc:	4ba9      	ldr	r3, [pc, #676]	; (8001774 <main+0x5ec>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe ffa1 	bl	8000418 <__aeabi_f2d>
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014de:	f009 fe65 	bl	800b1ac <pow>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4620      	mov	r0, r4
 80014e8:	4629      	mov	r1, r5
 80014ea:	f7fe fe35 	bl	8000158 <__aeabi_dsub>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4614      	mov	r4, r2
 80014f4:	461d      	mov	r5, r3
 80014f6:	4b9d      	ldr	r3, [pc, #628]	; (800176c <main+0x5e4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe ff8c 	bl	8000418 <__aeabi_f2d>
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	4b9a      	ldr	r3, [pc, #616]	; (8001770 <main+0x5e8>)
 8001506:	f009 fe51 	bl	800b1ac <pow>
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b98      	ldr	r3, [pc, #608]	; (8001770 <main+0x5e8>)
 8001510:	f7fe ffda 	bl	80004c8 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4620      	mov	r0, r4
 800151a:	4629      	mov	r1, r5
 800151c:	f7ff f8fe 	bl	800071c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f009 fea8 	bl	800b27c <sqrt>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff fac0 	bl	8000ab8 <__aeabi_d2f>
 8001538:	4603      	mov	r3, r0
 800153a:	4a8f      	ldr	r2, [pc, #572]	; (8001778 <main+0x5f0>)
 800153c:	6013      	str	r3, [r2, #0]
	  f2 = -T1 * k * exp(-T1*t/(2*pow(T2,2)))*sin(t * f1);
 800153e:	4b8d      	ldr	r3, [pc, #564]	; (8001774 <main+0x5ec>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001546:	4b8d      	ldr	r3, [pc, #564]	; (800177c <main+0x5f4>)
 8001548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fbbd 	bl	8000ccc <__aeabi_i2f>
 8001552:	4603      	mov	r3, r0
 8001554:	4619      	mov	r1, r3
 8001556:	4620      	mov	r0, r4
 8001558:	f7ff fc0c 	bl	8000d74 <__aeabi_fmul>
 800155c:	4603      	mov	r3, r0
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ff5a 	bl	8000418 <__aeabi_f2d>
 8001564:	4604      	mov	r4, r0
 8001566:	460d      	mov	r5, r1
 8001568:	4b82      	ldr	r3, [pc, #520]	; (8001774 <main+0x5ec>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001570:	4a83      	ldr	r2, [pc, #524]	; (8001780 <main+0x5f8>)
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fbfc 	bl	8000d74 <__aeabi_fmul>
 800157c:	4603      	mov	r3, r0
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ff4a 	bl	8000418 <__aeabi_f2d>
 8001584:	4680      	mov	r8, r0
 8001586:	4689      	mov	r9, r1
 8001588:	4b78      	ldr	r3, [pc, #480]	; (800176c <main+0x5e4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ff43 	bl	8000418 <__aeabi_f2d>
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800159a:	f009 fe07 	bl	800b1ac <pow>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	f7fe fddb 	bl	800015c <__adddf3>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4640      	mov	r0, r8
 80015ac:	4649      	mov	r1, r9
 80015ae:	f7ff f8b5 	bl	800071c <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f009 fdbd 	bl	800b138 <exp>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4620      	mov	r0, r4
 80015c4:	4629      	mov	r1, r5
 80015c6:	f7fe ff7f 	bl	80004c8 <__aeabi_dmul>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4614      	mov	r4, r2
 80015d0:	461d      	mov	r5, r3
 80015d2:	4b6b      	ldr	r3, [pc, #428]	; (8001780 <main+0x5f8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a68      	ldr	r2, [pc, #416]	; (8001778 <main+0x5f0>)
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fbc9 	bl	8000d74 <__aeabi_fmul>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff17 	bl	8000418 <__aeabi_f2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f009 fd59 	bl	800b0a8 <sin>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f7fe ff63 	bl	80004c8 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f7ff fa55 	bl	8000ab8 <__aeabi_d2f>
 800160e:	4603      	mov	r3, r0
 8001610:	4a5c      	ldr	r2, [pc, #368]	; (8001784 <main+0x5fc>)
 8001612:	6013      	str	r3, [r2, #0]
	  f3 = 2 * pow(T2,2) * k * f1;
 8001614:	4b55      	ldr	r3, [pc, #340]	; (800176c <main+0x5e4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe fefd 	bl	8000418 <__aeabi_f2d>
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001626:	f009 fdc1 	bl	800b1ac <pow>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	f7fe fd95 	bl	800015c <__adddf3>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4614      	mov	r4, r2
 8001638:	461d      	mov	r5, r3
 800163a:	4b50      	ldr	r3, [pc, #320]	; (800177c <main+0x5f4>)
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fed7 	bl	80003f4 <__aeabi_i2d>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4620      	mov	r0, r4
 800164c:	4629      	mov	r1, r5
 800164e:	f7fe ff3b 	bl	80004c8 <__aeabi_dmul>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4614      	mov	r4, r2
 8001658:	461d      	mov	r5, r3
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <main+0x5f0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe feda 	bl	8000418 <__aeabi_f2d>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4620      	mov	r0, r4
 800166a:	4629      	mov	r1, r5
 800166c:	f7fe ff2c 	bl	80004c8 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f7ff fa1e 	bl	8000ab8 <__aeabi_d2f>
 800167c:	4603      	mov	r3, r0
 800167e:	4a42      	ldr	r2, [pc, #264]	; (8001788 <main+0x600>)
 8001680:	6013      	str	r3, [r2, #0]
	  f4 = - 2 * pow(T2,2) * k * f1 * exp(-T1*t/(2*pow(T2,2))) * cos(t * f1);
 8001682:	4b3a      	ldr	r3, [pc, #232]	; (800176c <main+0x5e4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe fec6 	bl	8000418 <__aeabi_f2d>
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001694:	f009 fd8a 	bl	800b1ac <pow>
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80016a0:	f7fe ff12 	bl	80004c8 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4614      	mov	r4, r2
 80016aa:	461d      	mov	r5, r3
 80016ac:	4b33      	ldr	r3, [pc, #204]	; (800177c <main+0x5f4>)
 80016ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fe9e 	bl	80003f4 <__aeabi_i2d>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4620      	mov	r0, r4
 80016be:	4629      	mov	r1, r5
 80016c0:	f7fe ff02 	bl	80004c8 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4614      	mov	r4, r2
 80016ca:	461d      	mov	r5, r3
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <main+0x5f0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fea1 	bl	8000418 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4620      	mov	r0, r4
 80016dc:	4629      	mov	r1, r5
 80016de:	f7fe fef3 	bl	80004c8 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4690      	mov	r8, r2
 80016e8:	4699      	mov	r9, r3
 80016ea:	4b22      	ldr	r3, [pc, #136]	; (8001774 <main+0x5ec>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016f2:	4a23      	ldr	r2, [pc, #140]	; (8001780 <main+0x5f8>)
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fb3b 	bl	8000d74 <__aeabi_fmul>
 80016fe:	4603      	mov	r3, r0
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fe89 	bl	8000418 <__aeabi_f2d>
 8001706:	4604      	mov	r4, r0
 8001708:	460d      	mov	r5, r1
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <main+0x5e4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fe82 	bl	8000418 <__aeabi_f2d>
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800171c:	f009 fd46 	bl	800b1ac <pow>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	f7fe fd1a 	bl	800015c <__adddf3>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4620      	mov	r0, r4
 800172e:	4629      	mov	r1, r5
 8001730:	f7fe fff4 	bl	800071c <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	e027      	b.n	800178c <main+0x604>
 800173c:	f3af 8000 	nop.w
 8001740:	9999999a 	.word	0x9999999a
 8001744:	bfc99999 	.word	0xbfc99999
 8001748:	aa64c2f8 	.word	0xaa64c2f8
 800174c:	3ff05460 	.word	0x3ff05460
 8001750:	8793dd98 	.word	0x8793dd98
 8001754:	3fef5a85 	.word	0x3fef5a85
 8001758:	66666666 	.word	0x66666666
 800175c:	3fe66666 	.word	0x3fe66666
 8001760:	20000002 	.word	0x20000002
 8001764:	20000210 	.word	0x20000210
 8001768:	2000022c 	.word	0x2000022c
 800176c:	20000004 	.word	0x20000004
 8001770:	40100000 	.word	0x40100000
 8001774:	20000008 	.word	0x20000008
 8001778:	20000214 	.word	0x20000214
 800177c:	20000000 	.word	0x20000000
 8001780:	2000020c 	.word	0x2000020c
 8001784:	20000218 	.word	0x20000218
 8001788:	2000021c 	.word	0x2000021c
 800178c:	4619      	mov	r1, r3
 800178e:	f009 fcd3 	bl	800b138 <exp>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4640      	mov	r0, r8
 8001798:	4649      	mov	r1, r9
 800179a:	f7fe fe95 	bl	80004c8 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4614      	mov	r4, r2
 80017a4:	461d      	mov	r5, r3
 80017a6:	4b4e      	ldr	r3, [pc, #312]	; (80018e0 <main+0x758>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a4e      	ldr	r2, [pc, #312]	; (80018e4 <main+0x75c>)
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fadf 	bl	8000d74 <__aeabi_fmul>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fe2d 	bl	8000418 <__aeabi_f2d>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f009 fbe1 	bl	800af8c <cos>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4620      	mov	r0, r4
 80017d0:	4629      	mov	r1, r5
 80017d2:	f7fe fe79 	bl	80004c8 <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f96b 	bl	8000ab8 <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a40      	ldr	r2, [pc, #256]	; (80018e8 <main+0x760>)
 80017e6:	6013      	str	r3, [r2, #0]
	  f5 = 2 * pow(T2,2) * f1;
 80017e8:	4b40      	ldr	r3, [pc, #256]	; (80018ec <main+0x764>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe13 	bl	8000418 <__aeabi_f2d>
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017fa:	f009 fcd7 	bl	800b1ac <pow>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	f7fe fcab 	bl	800015c <__adddf3>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4614      	mov	r4, r2
 800180c:	461d      	mov	r5, r3
 800180e:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <main+0x75c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe00 	bl	8000418 <__aeabi_f2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe fe52 	bl	80004c8 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f944 	bl	8000ab8 <__aeabi_d2f>
 8001830:	4603      	mov	r3, r0
 8001832:	4a2f      	ldr	r2, [pc, #188]	; (80018f0 <main+0x768>)
 8001834:	6013      	str	r3, [r2, #0]
	  F = (f2 + f3 + f4) / f5 + Fv;
 8001836:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <main+0x76c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a2f      	ldr	r2, [pc, #188]	; (80018f8 <main+0x770>)
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff f98f 	bl	8000b64 <__addsf3>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <main+0x760>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4619      	mov	r1, r3
 8001850:	4610      	mov	r0, r2
 8001852:	f7ff f987 	bl	8000b64 <__addsf3>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <main+0x768>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	4610      	mov	r0, r2
 8001862:	f7ff fb3b 	bl	8000edc <__aeabi_fdiv>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <main+0x774>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4619      	mov	r1, r3
 8001870:	4610      	mov	r0, r2
 8001872:	f7ff f977 	bl	8000b64 <__addsf3>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <main+0x778>)
 800187c:	601a      	str	r2, [r3, #0]
	  Fit = (uint8_t) round(F * 10);
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <main+0x778>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4920      	ldr	r1, [pc, #128]	; (8001904 <main+0x77c>)
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fa75 	bl	8000d74 <__aeabi_fmul>
 800188a:	4603      	mov	r3, r0
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fdc3 	bl	8000418 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f009 fbbd 	bl	800b018 <round>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f8e7 	bl	8000a78 <__aeabi_d2uiz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <main+0x780>)
 80018b0:	701a      	strb	r2, [r3, #0]

	  sizeL = sprintf(str, "%u\n", Fit);
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <main+0x780>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4914      	ldr	r1, [pc, #80]	; (800190c <main+0x784>)
 80018ba:	4815      	ldr	r0, [pc, #84]	; (8001910 <main+0x788>)
 80018bc:	f008 f98a 	bl	8009bd4 <siprintf>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <main+0x78c>)
 80018c6:	701a      	strb	r2, [r3, #0]

	  CDC_Transmit_FS((uint8_t*) str, sizeL);
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <main+0x78c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4619      	mov	r1, r3
 80018d0:	480f      	ldr	r0, [pc, #60]	; (8001910 <main+0x788>)
 80018d2:	f007 fd31 	bl	8009338 <CDC_Transmit_FS>

	  HAL_Delay(10);
 80018d6:	200a      	movs	r0, #10
 80018d8:	f000 fba0 	bl	800201c <HAL_Delay>
	  status = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80018dc:	e469      	b.n	80011b2 <main+0x2a>
 80018de:	bf00      	nop
 80018e0:	2000020c 	.word	0x2000020c
 80018e4:	20000214 	.word	0x20000214
 80018e8:	20000220 	.word	0x20000220
 80018ec:	20000004 	.word	0x20000004
 80018f0:	20000224 	.word	0x20000224
 80018f4:	20000218 	.word	0x20000218
 80018f8:	2000021c 	.word	0x2000021c
 80018fc:	2000022c 	.word	0x2000022c
 8001900:	20000228 	.word	0x20000228
 8001904:	41200000 	.word	0x41200000
 8001908:	20000230 	.word	0x20000230
 800190c:	0800d118 	.word	0x0800d118
 8001910:	20000234 	.word	0x20000234
 8001914:	20000231 	.word	0x20000231

08001918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b094      	sub	sp, #80	; 0x50
 800191c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001922:	2228      	movs	r2, #40	; 0x28
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f008 f90e 	bl	8009b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001948:	2301      	movs	r3, #1
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800194c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001956:	2301      	movs	r3, #1
 8001958:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195a:	2302      	movs	r3, #2
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800195e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001964:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001968:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196e:	4618      	mov	r0, r3
 8001970:	f002 fb90 	bl	8004094 <HAL_RCC_OscConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800197a:	f000 f828 	bl	80019ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800197e:	230f      	movs	r3, #15
 8001980:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001982:	2302      	movs	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800198a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800198e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2101      	movs	r1, #1
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fdfc 	bl	8004598 <HAL_RCC_ClockConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019a6:	f000 f812 	bl	80019ce <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80019aa:	2310      	movs	r3, #16
 80019ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80019ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019b2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 ff4a 	bl	8004850 <HAL_RCCEx_PeriphCLKConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019c2:	f000 f804 	bl	80019ce <Error_Handler>
  }
}
 80019c6:	bf00      	nop
 80019c8:	3750      	adds	r7, #80	; 0x50
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d2:	b672      	cpsid	i
}
 80019d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <Error_Handler+0x8>

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_MspInit+0x5c>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <HAL_MspInit+0x5c>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_MspInit+0x5c>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_MspInit+0x5c>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_MspInit+0x5c>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_MspInit+0x5c>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_MspInit+0x60>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_MspInit+0x60>)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <NMI_Handler+0x4>

08001a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <HardFault_Handler+0x4>

08001a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <MemManage_Handler+0x4>

08001a4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <BusFault_Handler+0x4>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <UsageFault_Handler+0x4>

08001a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a82:	f000 faaf 	bl	8001fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001a92:	f000 feb5 	bl	8002800 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000f98 	.word	0x20000f98

08001aa0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//CDC_Transmit_FS((uint8_t*) *FTx, strlen(FTx));
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <TIM2_IRQHandler+0x10>)
 8001aa6:	f003 f82a 	bl	8004afe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000023c 	.word	0x2000023c
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (status == 1 && t == 0) {
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <TIM4_IRQHandler+0xe0>)
 8001abe:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d12f      	bne.n	8001b26 <TIM4_IRQHandler+0x6e>
 8001ac6:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <TIM4_IRQHandler+0xe4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f04f 0100 	mov.w	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fae4 	bl	800109c <__aeabi_fcmpeq>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d025      	beq.n	8001b26 <TIM4_IRQHandler+0x6e>
		t = t + 0.01;
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <TIM4_IRQHandler+0xe4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fc9a 	bl	8000418 <__aeabi_f2d>
 8001ae4:	a32a      	add	r3, pc, #168	; (adr r3, 8001b90 <TIM4_IRQHandler+0xd8>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fb37 	bl	800015c <__adddf3>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7fe ffdf 	bl	8000ab8 <__aeabi_d2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <TIM4_IRQHandler+0xe4>)
 8001afe:	6013      	str	r3, [r2, #0]
		tp = tp + 0.01;
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <TIM4_IRQHandler+0xe8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fc87 	bl	8000418 <__aeabi_f2d>
 8001b0a:	a321      	add	r3, pc, #132	; (adr r3, 8001b90 <TIM4_IRQHandler+0xd8>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	f7fe fb24 	bl	800015c <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7fe ffcc 	bl	8000ab8 <__aeabi_d2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <TIM4_IRQHandler+0xe8>)
 8001b24:	6013      	str	r3, [r2, #0]
	}
	if (t != 0) {
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <TIM4_IRQHandler+0xe4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fab4 	bl	800109c <__aeabi_fcmpeq>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d125      	bne.n	8001b86 <TIM4_IRQHandler+0xce>
		t = t + 0.01;
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <TIM4_IRQHandler+0xe4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fc6a 	bl	8000418 <__aeabi_f2d>
 8001b44:	a312      	add	r3, pc, #72	; (adr r3, 8001b90 <TIM4_IRQHandler+0xd8>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fb07 	bl	800015c <__adddf3>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	f7fe ffaf 	bl	8000ab8 <__aeabi_d2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <TIM4_IRQHandler+0xe4>)
 8001b5e:	6013      	str	r3, [r2, #0]
		tp = tp + 0.01;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <TIM4_IRQHandler+0xe8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fc57 	bl	8000418 <__aeabi_f2d>
 8001b6a:	a309      	add	r3, pc, #36	; (adr r3, 8001b90 <TIM4_IRQHandler+0xd8>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe faf4 	bl	800015c <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7fe ff9c 	bl	8000ab8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <TIM4_IRQHandler+0xe8>)
 8001b84:	6013      	str	r3, [r2, #0]
	}


  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b86:	4807      	ldr	r0, [pc, #28]	; (8001ba4 <TIM4_IRQHandler+0xec>)
 8001b88:	f002 ffb9 	bl	8004afe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	47ae147b 	.word	0x47ae147b
 8001b94:	3f847ae1 	.word	0x3f847ae1
 8001b98:	20000208 	.word	0x20000208
 8001b9c:	2000020c 	.word	0x2000020c
 8001ba0:	20000210 	.word	0x20000210
 8001ba4:	20000284 	.word	0x20000284

08001ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <_kill>:

int _kill(int pid, int sig)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc0:	f007 ff98 	bl	8009af4 <__errno>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2216      	movs	r2, #22
 8001bc8:	601a      	str	r2, [r3, #0]
  return -1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_exit>:

void _exit (int status)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bde:	f04f 31ff 	mov.w	r1, #4294967295
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffe7 	bl	8001bb6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001be8:	e7fe      	b.n	8001be8 <_exit+0x12>

08001bea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e00a      	b.n	8001c12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bfc:	f3af 8000 	nop.w
 8001c00:	4601      	mov	r1, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	60ba      	str	r2, [r7, #8]
 8001c08:	b2ca      	uxtb	r2, r1
 8001c0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dbf0      	blt.n	8001bfc <_read+0x12>
  }

  return len;
 8001c1a:	687b      	ldr	r3, [r7, #4]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	e009      	b.n	8001c4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	60ba      	str	r2, [r7, #8]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3301      	adds	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	dbf1      	blt.n	8001c36 <_write+0x12>
  }
  return len;
 8001c52:	687b      	ldr	r3, [r7, #4]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_close>:

int _close(int file)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c82:	605a      	str	r2, [r3, #4]
  return 0;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <_isatty>:

int _isatty(int file)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c98:	2301      	movs	r3, #1
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <_sbrk+0x5c>)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <_sbrk+0x60>)
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <_sbrk+0x64>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <_sbrk+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d207      	bcs.n	8001cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cec:	f007 ff02 	bl	8009af4 <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	e009      	b.n	8001d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <_sbrk+0x64>)
 8001d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20005000 	.word	0x20005000
 8001d1c:	00000400 	.word	0x00000400
 8001d20:	20000238 	.word	0x20000238
 8001d24:	200014b8 	.word	0x200014b8

08001d28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3a:	f107 0320 	add.w	r3, r7, #32
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	615a      	str	r2, [r3, #20]
 8001d54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d56:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <MX_TIM2_Init+0xa8>)
 8001d58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8001d5e:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <MX_TIM2_Init+0xa8>)
 8001d60:	2220      	movs	r2, #32
 8001d62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <MX_TIM2_Init+0xa8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7500;
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <MX_TIM2_Init+0xa8>)
 8001d6c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001d70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <MX_TIM2_Init+0xa8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <MX_TIM2_Init+0xa8>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d7e:	4817      	ldr	r0, [pc, #92]	; (8001ddc <MX_TIM2_Init+0xa8>)
 8001d80:	f002 fe6e 	bl	8004a60 <HAL_TIM_PWM_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d8a:	f7ff fe20 	bl	80019ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d96:	f107 0320 	add.w	r3, r7, #32
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480f      	ldr	r0, [pc, #60]	; (8001ddc <MX_TIM2_Init+0xa8>)
 8001d9e:	f003 fa91 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001da8:	f7ff fe11 	bl	80019ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dac:	2360      	movs	r3, #96	; 0x60
 8001dae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <MX_TIM2_Init+0xa8>)
 8001dc4:	f002 ffa4 	bl	8004d10 <HAL_TIM_PWM_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001dce:	f7ff fdfe 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	3728      	adds	r7, #40	; 0x28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000023c 	.word	0x2000023c

08001de0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de6:	f107 0320 	add.w	r3, r7, #32
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]
 8001dfe:	615a      	str	r2, [r3, #20]
 8001e00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <MX_TIM4_Init+0xa4>)
 8001e04:	4a20      	ldr	r2, [pc, #128]	; (8001e88 <MX_TIM4_Init+0xa8>)
 8001e06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32;
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <MX_TIM4_Init+0xa4>)
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <MX_TIM4_Init+0xa4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7500;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <MX_TIM4_Init+0xa4>)
 8001e16:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001e1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <MX_TIM4_Init+0xa4>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <MX_TIM4_Init+0xa4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e28:	4816      	ldr	r0, [pc, #88]	; (8001e84 <MX_TIM4_Init+0xa4>)
 8001e2a:	f002 fe19 	bl	8004a60 <HAL_TIM_PWM_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001e34:	f7ff fdcb 	bl	80019ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e40:	f107 0320 	add.w	r3, r7, #32
 8001e44:	4619      	mov	r1, r3
 8001e46:	480f      	ldr	r0, [pc, #60]	; (8001e84 <MX_TIM4_Init+0xa4>)
 8001e48:	f003 fa3c 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001e52:	f7ff fdbc 	bl	80019ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e56:	2360      	movs	r3, #96	; 0x60
 8001e58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_TIM4_Init+0xa4>)
 8001e6e:	f002 ff4f 	bl	8004d10 <HAL_TIM_PWM_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001e78:	f7ff fda9 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	; 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000284 	.word	0x20000284
 8001e88:	40000800 	.word	0x40000800

08001e8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9c:	d114      	bne.n	8001ec8 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_TIM_PWM_MspInit+0x78>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <HAL_TIM_PWM_MspInit+0x78>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	61d3      	str	r3, [r2, #28]
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_TIM_PWM_MspInit+0x78>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	201c      	movs	r0, #28
 8001ebc:	f000 f9a9 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ec0:	201c      	movs	r0, #28
 8001ec2:	f000 f9c2 	bl	800224a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ec6:	e018      	b.n	8001efa <HAL_TIM_PWM_MspInit+0x6e>
  else if(tim_pwmHandle->Instance==TIM4)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <HAL_TIM_PWM_MspInit+0x7c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d113      	bne.n	8001efa <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_TIM_PWM_MspInit+0x78>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <HAL_TIM_PWM_MspInit+0x78>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	61d3      	str	r3, [r2, #28]
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_TIM_PWM_MspInit+0x78>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	201e      	movs	r0, #30
 8001ef0:	f000 f98f 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ef4:	201e      	movs	r0, #30
 8001ef6:	f000 f9a8 	bl	800224a <HAL_NVIC_EnableIRQ>
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40000800 	.word	0x40000800

08001f0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f0c:	f7ff ff0c 	bl	8001d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f10:	480b      	ldr	r0, [pc, #44]	; (8001f40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f12:	490c      	ldr	r1, [pc, #48]	; (8001f44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f14:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f18:	e002      	b.n	8001f20 <LoopCopyDataInit>

08001f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1e:	3304      	adds	r3, #4

08001f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f24:	d3f9      	bcc.n	8001f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f28:	4c09      	ldr	r4, [pc, #36]	; (8001f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f2c:	e001      	b.n	8001f32 <LoopFillZerobss>

08001f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f30:	3204      	adds	r2, #4

08001f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f34:	d3fb      	bcc.n	8001f2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f36:	f007 fde3 	bl	8009b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f3a:	f7ff f925 	bl	8001188 <main>
  bx lr
 8001f3e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f44:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001f48:	0800d510 	.word	0x0800d510
  ldr r2, =_sbss
 8001f4c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001f50:	200014b8 	.word	0x200014b8

08001f54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <ADC1_2_IRQHandler>
	...

08001f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <HAL_Init+0x28>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <HAL_Init+0x28>)
 8001f62:	f043 0310 	orr.w	r3, r3, #16
 8001f66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f000 f947 	bl	80021fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6e:	200f      	movs	r0, #15
 8001f70:	f000 f808 	bl	8001f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f74:	f7ff fd30 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40022000 	.word	0x40022000

08001f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_InitTick+0x54>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_InitTick+0x58>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f95f 	bl	8002266 <HAL_SYSTICK_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00e      	b.n	8001fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d80a      	bhi.n	8001fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f000 f927 	bl	8002212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc4:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <HAL_InitTick+0x5c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e000      	b.n	8001fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000000c 	.word	0x2000000c
 8001fdc:	20000014 	.word	0x20000014
 8001fe0:	20000010 	.word	0x20000010

08001fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_IncTick+0x1c>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_IncTick+0x20>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a03      	ldr	r2, [pc, #12]	; (8002004 <HAL_IncTick+0x20>)
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	20000014 	.word	0x20000014
 8002004:	200002cc 	.word	0x200002cc

08002008 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b02      	ldr	r3, [pc, #8]	; (8002018 <HAL_GetTick+0x10>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	200002cc 	.word	0x200002cc

0800201c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff fff0 	bl	8002008 <HAL_GetTick>
 8002028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d005      	beq.n	8002042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_Delay+0x44>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002042:	bf00      	nop
 8002044:	f7ff ffe0 	bl	8002008 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d8f7      	bhi.n	8002044 <HAL_Delay+0x28>
  {
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000014 	.word	0x20000014

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4906      	ldr	r1, [pc, #24]	; (80020fc <__NVIC_EnableIRQ+0x34>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100

08002100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db0a      	blt.n	800212a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	490c      	ldr	r1, [pc, #48]	; (800214c <__NVIC_SetPriority+0x4c>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	440b      	add	r3, r1
 8002124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002128:	e00a      	b.n	8002140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4908      	ldr	r1, [pc, #32]	; (8002150 <__NVIC_SetPriority+0x50>)
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	3b04      	subs	r3, #4
 8002138:	0112      	lsls	r2, r2, #4
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	440b      	add	r3, r1
 800213e:	761a      	strb	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f1c3 0307 	rsb	r3, r3, #7
 800216e:	2b04      	cmp	r3, #4
 8002170:	bf28      	it	cs
 8002172:	2304      	movcs	r3, #4
 8002174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3304      	adds	r3, #4
 800217a:	2b06      	cmp	r3, #6
 800217c:	d902      	bls.n	8002184 <NVIC_EncodePriority+0x30>
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3b03      	subs	r3, #3
 8002182:	e000      	b.n	8002186 <NVIC_EncodePriority+0x32>
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	f04f 32ff 	mov.w	r2, #4294967295
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	401a      	ands	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800219c:	f04f 31ff 	mov.w	r1, #4294967295
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43d9      	mvns	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	4313      	orrs	r3, r2
         );
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c8:	d301      	bcc.n	80021ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00f      	b.n	80021ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <SysTick_Config+0x40>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d6:	210f      	movs	r1, #15
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	f7ff ff90 	bl	8002100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <SysTick_Config+0x40>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <SysTick_Config+0x40>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	e000e010 	.word	0xe000e010

080021fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff2d 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002224:	f7ff ff42 	bl	80020ac <__NVIC_GetPriorityGrouping>
 8002228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f7ff ff90 	bl	8002154 <NVIC_EncodePriority>
 8002234:	4602      	mov	r2, r0
 8002236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff5f 	bl	8002100 <__NVIC_SetPriority>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff35 	bl	80020c8 <__NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffa2 	bl	80021b8 <SysTick_Config>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b08b      	sub	sp, #44	; 0x2c
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002292:	e169      	b.n	8002568 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002294:	2201      	movs	r2, #1
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	f040 8158 	bne.w	8002562 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a9a      	ldr	r2, [pc, #616]	; (8002520 <HAL_GPIO_Init+0x2a0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d05e      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022bc:	4a98      	ldr	r2, [pc, #608]	; (8002520 <HAL_GPIO_Init+0x2a0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d875      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022c2:	4a98      	ldr	r2, [pc, #608]	; (8002524 <HAL_GPIO_Init+0x2a4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d058      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022c8:	4a96      	ldr	r2, [pc, #600]	; (8002524 <HAL_GPIO_Init+0x2a4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d86f      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022ce:	4a96      	ldr	r2, [pc, #600]	; (8002528 <HAL_GPIO_Init+0x2a8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d052      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022d4:	4a94      	ldr	r2, [pc, #592]	; (8002528 <HAL_GPIO_Init+0x2a8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d869      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022da:	4a94      	ldr	r2, [pc, #592]	; (800252c <HAL_GPIO_Init+0x2ac>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d04c      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022e0:	4a92      	ldr	r2, [pc, #584]	; (800252c <HAL_GPIO_Init+0x2ac>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d863      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022e6:	4a92      	ldr	r2, [pc, #584]	; (8002530 <HAL_GPIO_Init+0x2b0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d046      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022ec:	4a90      	ldr	r2, [pc, #576]	; (8002530 <HAL_GPIO_Init+0x2b0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d85d      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022f2:	2b12      	cmp	r3, #18
 80022f4:	d82a      	bhi.n	800234c <HAL_GPIO_Init+0xcc>
 80022f6:	2b12      	cmp	r3, #18
 80022f8:	d859      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022fa:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <HAL_GPIO_Init+0x80>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	0800237b 	.word	0x0800237b
 8002304:	08002355 	.word	0x08002355
 8002308:	08002367 	.word	0x08002367
 800230c:	080023a9 	.word	0x080023a9
 8002310:	080023af 	.word	0x080023af
 8002314:	080023af 	.word	0x080023af
 8002318:	080023af 	.word	0x080023af
 800231c:	080023af 	.word	0x080023af
 8002320:	080023af 	.word	0x080023af
 8002324:	080023af 	.word	0x080023af
 8002328:	080023af 	.word	0x080023af
 800232c:	080023af 	.word	0x080023af
 8002330:	080023af 	.word	0x080023af
 8002334:	080023af 	.word	0x080023af
 8002338:	080023af 	.word	0x080023af
 800233c:	080023af 	.word	0x080023af
 8002340:	080023af 	.word	0x080023af
 8002344:	0800235d 	.word	0x0800235d
 8002348:	08002371 	.word	0x08002371
 800234c:	4a79      	ldr	r2, [pc, #484]	; (8002534 <HAL_GPIO_Init+0x2b4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002352:	e02c      	b.n	80023ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	623b      	str	r3, [r7, #32]
          break;
 800235a:	e029      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	3304      	adds	r3, #4
 8002362:	623b      	str	r3, [r7, #32]
          break;
 8002364:	e024      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	3308      	adds	r3, #8
 800236c:	623b      	str	r3, [r7, #32]
          break;
 800236e:	e01f      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	330c      	adds	r3, #12
 8002376:	623b      	str	r3, [r7, #32]
          break;
 8002378:	e01a      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002382:	2304      	movs	r3, #4
 8002384:	623b      	str	r3, [r7, #32]
          break;
 8002386:	e013      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002390:	2308      	movs	r3, #8
 8002392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	611a      	str	r2, [r3, #16]
          break;
 800239a:	e009      	b.n	80023b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800239c:	2308      	movs	r3, #8
 800239e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	615a      	str	r2, [r3, #20]
          break;
 80023a6:	e003      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
          break;
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          break;
 80023ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2bff      	cmp	r3, #255	; 0xff
 80023b4:	d801      	bhi.n	80023ba <HAL_GPIO_Init+0x13a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	e001      	b.n	80023be <HAL_GPIO_Init+0x13e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2bff      	cmp	r3, #255	; 0xff
 80023c4:	d802      	bhi.n	80023cc <HAL_GPIO_Init+0x14c>
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	e002      	b.n	80023d2 <HAL_GPIO_Init+0x152>
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	3b08      	subs	r3, #8
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	210f      	movs	r1, #15
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	6a39      	ldr	r1, [r7, #32]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 80b1 	beq.w	8002562 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002400:	4b4d      	ldr	r3, [pc, #308]	; (8002538 <HAL_GPIO_Init+0x2b8>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a4c      	ldr	r2, [pc, #304]	; (8002538 <HAL_GPIO_Init+0x2b8>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <HAL_GPIO_Init+0x2b8>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002418:	4a48      	ldr	r2, [pc, #288]	; (800253c <HAL_GPIO_Init+0x2bc>)
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a40      	ldr	r2, [pc, #256]	; (8002540 <HAL_GPIO_Init+0x2c0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d013      	beq.n	800246c <HAL_GPIO_Init+0x1ec>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a3f      	ldr	r2, [pc, #252]	; (8002544 <HAL_GPIO_Init+0x2c4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00d      	beq.n	8002468 <HAL_GPIO_Init+0x1e8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a3e      	ldr	r2, [pc, #248]	; (8002548 <HAL_GPIO_Init+0x2c8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d007      	beq.n	8002464 <HAL_GPIO_Init+0x1e4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a3d      	ldr	r2, [pc, #244]	; (800254c <HAL_GPIO_Init+0x2cc>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d101      	bne.n	8002460 <HAL_GPIO_Init+0x1e0>
 800245c:	2303      	movs	r3, #3
 800245e:	e006      	b.n	800246e <HAL_GPIO_Init+0x1ee>
 8002460:	2304      	movs	r3, #4
 8002462:	e004      	b.n	800246e <HAL_GPIO_Init+0x1ee>
 8002464:	2302      	movs	r3, #2
 8002466:	e002      	b.n	800246e <HAL_GPIO_Init+0x1ee>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_GPIO_Init+0x1ee>
 800246c:	2300      	movs	r3, #0
 800246e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002470:	f002 0203 	and.w	r2, r2, #3
 8002474:	0092      	lsls	r2, r2, #2
 8002476:	4093      	lsls	r3, r2
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800247e:	492f      	ldr	r1, [pc, #188]	; (800253c <HAL_GPIO_Init+0x2bc>)
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d006      	beq.n	80024a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	492c      	ldr	r1, [pc, #176]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	608b      	str	r3, [r1, #8]
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024a6:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	4928      	ldr	r1, [pc, #160]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d006      	beq.n	80024ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024c0:	4b23      	ldr	r3, [pc, #140]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	4922      	ldr	r1, [pc, #136]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60cb      	str	r3, [r1, #12]
 80024cc:	e006      	b.n	80024dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	491e      	ldr	r1, [pc, #120]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024d8:	4013      	ands	r3, r2
 80024da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4918      	ldr	r1, [pc, #96]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
 80024f4:	e006      	b.n	8002504 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4914      	ldr	r1, [pc, #80]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 8002500:	4013      	ands	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d021      	beq.n	8002554 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	490e      	ldr	r1, [pc, #56]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]
 800251c:	e021      	b.n	8002562 <HAL_GPIO_Init+0x2e2>
 800251e:	bf00      	nop
 8002520:	10320000 	.word	0x10320000
 8002524:	10310000 	.word	0x10310000
 8002528:	10220000 	.word	0x10220000
 800252c:	10210000 	.word	0x10210000
 8002530:	10120000 	.word	0x10120000
 8002534:	10110000 	.word	0x10110000
 8002538:	40021000 	.word	0x40021000
 800253c:	40010000 	.word	0x40010000
 8002540:	40010800 	.word	0x40010800
 8002544:	40010c00 	.word	0x40010c00
 8002548:	40011000 	.word	0x40011000
 800254c:	40011400 	.word	0x40011400
 8002550:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_GPIO_Init+0x304>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	43db      	mvns	r3, r3
 800255c:	4909      	ldr	r1, [pc, #36]	; (8002584 <HAL_GPIO_Init+0x304>)
 800255e:	4013      	ands	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	3301      	adds	r3, #1
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	f47f ae8e 	bne.w	8002294 <HAL_GPIO_Init+0x14>
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	372c      	adds	r7, #44	; 0x2c
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	40010400 	.word	0x40010400

08002588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	887b      	ldrh	r3, [r7, #2]
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e001      	b.n	80025aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b8:	b08b      	sub	sp, #44	; 0x2c
 80025ba:	af06      	add	r7, sp, #24
 80025bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0f1      	b.n	80027ac <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f006 ffdf 	bl	80095a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2203      	movs	r2, #3
 80025e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f002 fefe 	bl	80053f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	687e      	ldr	r6, [r7, #4]
 80025fc:	466d      	mov	r5, sp
 80025fe:	f106 0410 	add.w	r4, r6, #16
 8002602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	602b      	str	r3, [r5, #0]
 800260a:	1d33      	adds	r3, r6, #4
 800260c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	f002 fec8 	bl	80053a4 <USB_CoreInit>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0c2      	b.n	80027ac <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f002 fef9 	bl	8005424 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e040      	b.n	80026ba <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	440b      	add	r3, r1
 8002648:	3301      	adds	r3, #1
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	440b      	add	r3, r1
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	440b      	add	r3, r1
 8002672:	3303      	adds	r3, #3
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	3338      	adds	r3, #56	; 0x38
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	440b      	add	r3, r1
 800269a:	333c      	adds	r3, #60	; 0x3c
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	3340      	adds	r3, #64	; 0x40
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	3301      	adds	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d3b9      	bcc.n	8002638 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	e044      	b.n	8002754 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	440b      	add	r3, r1
 80026ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	3301      	adds	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	429a      	cmp	r2, r3
 800275c:	d3b5      	bcc.n	80026ca <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	687e      	ldr	r6, [r7, #4]
 8002766:	466d      	mov	r5, sp
 8002768:	f106 0410 	add.w	r4, r6, #16
 800276c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	602b      	str	r3, [r5, #0]
 8002774:	1d33      	adds	r3, r6, #4
 8002776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002778:	6838      	ldr	r0, [r7, #0]
 800277a:	f002 fe5f 	bl	800543c <USB_DevInit>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e00d      	b.n	80027ac <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f005 f8e0 	bl	800796a <USB_DevDisconnect>

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_PCD_Start+0x16>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e016      	b.n	80027f8 <HAL_PCD_Start+0x44>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f002 fdf4 	bl	80053c4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80027dc:	2101      	movs	r1, #1
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f007 f951 	bl	8009a86 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f005 f8b4 	bl	8007956 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f005 f8b6 	bl	800797e <USB_ReadInterrupts>
 8002812:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fb1b 	bl	8002e5a <PCD_EP_ISR_Handler>

    return;
 8002824:	e119      	b.n	8002a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d013      	beq.n	8002858 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002838:	b29a      	uxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002842:	b292      	uxth	r2, r2
 8002844:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f006 ff24 	bl	8009696 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800284e:	2100      	movs	r1, #0
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f905 	bl	8002a60 <HAL_PCD_SetAddress>

    return;
 8002856:	e100      	b.n	8002a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00c      	beq.n	800287c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800286a:	b29a      	uxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002874:	b292      	uxth	r2, r2
 8002876:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800287a:	e0ee      	b.n	8002a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800288e:	b29a      	uxth	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002898:	b292      	uxth	r2, r2
 800289a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800289e:	e0dc      	b.n	8002a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d027      	beq.n	80028fa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0204 	bic.w	r2, r2, #4
 80028bc:	b292      	uxth	r2, r2
 80028be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0208 	bic.w	r2, r2, #8
 80028d4:	b292      	uxth	r2, r2
 80028d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f006 ff14 	bl	8009708 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028f2:	b292      	uxth	r2, r2
 80028f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80028f8:	e0af      	b.n	8002a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8083 	beq.w	8002a0c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002906:	2300      	movs	r3, #0
 8002908:	77fb      	strb	r3, [r7, #31]
 800290a:	e010      	b.n	800292e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	7ffb      	ldrb	r3, [r7, #31]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	441a      	add	r2, r3
 8002918:	7ffb      	ldrb	r3, [r7, #31]
 800291a:	8812      	ldrh	r2, [r2, #0]
 800291c:	b292      	uxth	r2, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	3320      	adds	r3, #32
 8002922:	443b      	add	r3, r7
 8002924:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002928:	7ffb      	ldrb	r3, [r7, #31]
 800292a:	3301      	adds	r3, #1
 800292c:	77fb      	strb	r3, [r7, #31]
 800292e:	7ffb      	ldrb	r3, [r7, #31]
 8002930:	2b07      	cmp	r3, #7
 8002932:	d9eb      	bls.n	800290c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800293c:	b29a      	uxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	b292      	uxth	r2, r2
 8002948:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002954:	b29a      	uxth	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	b292      	uxth	r2, r2
 8002960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002964:	bf00      	nop
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800296e:	b29b      	uxth	r3, r3
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f6      	beq.n	8002966 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002980:	b29a      	uxth	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800298a:	b292      	uxth	r2, r2
 800298c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002990:	2300      	movs	r3, #0
 8002992:	77fb      	strb	r3, [r7, #31]
 8002994:	e00f      	b.n	80029b6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002996:	7ffb      	ldrb	r3, [r7, #31]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	4611      	mov	r1, r2
 800299e:	7ffa      	ldrb	r2, [r7, #31]
 80029a0:	0092      	lsls	r2, r2, #2
 80029a2:	440a      	add	r2, r1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	3320      	adds	r3, #32
 80029a8:	443b      	add	r3, r7
 80029aa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80029ae:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80029b0:	7ffb      	ldrb	r3, [r7, #31]
 80029b2:	3301      	adds	r3, #1
 80029b4:	77fb      	strb	r3, [r7, #31]
 80029b6:	7ffb      	ldrb	r3, [r7, #31]
 80029b8:	2b07      	cmp	r3, #7
 80029ba:	d9ec      	bls.n	8002996 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0208 	orr.w	r2, r2, #8
 80029ce:	b292      	uxth	r2, r2
 80029d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029dc:	b29a      	uxth	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e6:	b292      	uxth	r2, r2
 80029e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0204 	orr.w	r2, r2, #4
 80029fe:	b292      	uxth	r2, r2
 8002a00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f006 fe65 	bl	80096d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002a0a:	e026      	b.n	8002a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00f      	beq.n	8002a36 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a28:	b292      	uxth	r2, r2
 8002a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f006 fe23 	bl	800967a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002a34:	e011      	b.n	8002a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00c      	beq.n	8002a5a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a52:	b292      	uxth	r2, r2
 8002a54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a58:	bf00      	nop
  }
}
 8002a5a:	3720      	adds	r7, #32
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_PCD_SetAddress+0x1a>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e013      	b.n	8002aa2 <HAL_PCD_SetAddress+0x42>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f004 ff4c 	bl	8007930 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	4608      	mov	r0, r1
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4603      	mov	r3, r0
 8002aba:	70fb      	strb	r3, [r7, #3]
 8002abc:	460b      	mov	r3, r1
 8002abe:	803b      	strh	r3, [r7, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	da0e      	bge.n	8002aee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	705a      	strb	r2, [r3, #1]
 8002aec:	e00e      	b.n	8002b0c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 0207 	and.w	r2, r3, #7
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b18:	883a      	ldrh	r2, [r7, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	78ba      	ldrb	r2, [r7, #2]
 8002b22:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b24:	78bb      	ldrb	r3, [r7, #2]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d102      	bne.n	8002b30 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_PCD_EP_Open+0x94>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e00e      	b.n	8002b5c <HAL_PCD_EP_Open+0xb2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68f9      	ldr	r1, [r7, #12]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f002 fc95 	bl	800547c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	da0e      	bge.n	8002b96 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	705a      	strb	r2, [r3, #1]
 8002b94:	e00e      	b.n	8002bb4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	f003 0207 	and.w	r2, r3, #7
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_PCD_EP_Close+0x6a>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e00e      	b.n	8002bec <HAL_PCD_EP_Close+0x88>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f003 f80d 	bl	8005bfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	460b      	mov	r3, r1
 8002c02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c04:	7afb      	ldrb	r3, [r7, #11]
 8002c06:	f003 0207 	and.w	r2, r3, #7
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4413      	add	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2200      	movs	r2, #0
 8002c32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c34:	7afb      	ldrb	r3, [r7, #11]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6979      	ldr	r1, [r7, #20]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 f9c4 	bl	8005fd4 <USB_EPStartXfer>

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	f003 0207 	and.w	r2, r3, #7
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002c78:	681b      	ldr	r3, [r3, #0]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	460b      	mov	r3, r1
 8002c92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c94:	7afb      	ldrb	r3, [r7, #11]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6979      	ldr	r1, [r7, #20]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 f976 	bl	8005fd4 <USB_EPStartXfer>

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	f003 0207 	and.w	r2, r3, #7
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d901      	bls.n	8002d10 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e04c      	b.n	8002daa <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	da0e      	bge.n	8002d36 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	705a      	strb	r2, [r3, #1]
 8002d34:	e00c      	b.n	8002d50 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_PCD_EP_SetStall+0x7e>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e01c      	b.n	8002daa <HAL_PCD_EP_SetStall+0xb8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68f9      	ldr	r1, [r7, #12]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f004 fcd9 	bl	8007736 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d108      	bne.n	8002da0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f004 fdfe 	bl	800799c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f003 020f 	and.w	r2, r3, #15
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d901      	bls.n	8002dd0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e040      	b.n	8002e52 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	da0e      	bge.n	8002df6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	705a      	strb	r2, [r3, #1]
 8002df4:	e00e      	b.n	8002e14 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	f003 0207 	and.w	r2, r3, #7
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_PCD_EP_ClrStall+0x82>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e00e      	b.n	8002e52 <HAL_PCD_EP_ClrStall+0xa0>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 fcc7 	bl	80077d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b096      	sub	sp, #88	; 0x58
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e62:	e3bf      	b.n	80035e4 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002e70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002e7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 8179 	bne.w	800317a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d152      	bne.n	8002f3a <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea4:	81fb      	strh	r3, [r7, #14]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	89fb      	ldrh	r3, [r7, #14]
 8002eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3328      	adds	r3, #40	; 0x28
 8002ebc:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	441a      	add	r2, r3
 8002ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ef8:	2100      	movs	r1, #0
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f006 fba3 	bl	8009646 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 836b 	beq.w	80035e4 <PCD_EP_ISR_Handler+0x78a>
 8002f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 8366 	bne.w	80035e4 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	b292      	uxth	r2, r2
 8002f2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f38:	e354      	b.n	80035e4 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f40:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002f4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d034      	beq.n	8002fc2 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3306      	adds	r3, #6
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f82:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f90:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f94:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	f004 fd50 	bl	8007a3c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002fa8:	4013      	ands	r3, r2
 8002faa:	823b      	strh	r3, [r7, #16]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	8a3a      	ldrh	r2, [r7, #16]
 8002fb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fb6:	b292      	uxth	r2, r2
 8002fb8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f006 fb16 	bl	80095ec <HAL_PCD_SetupStageCallback>
 8002fc0:	e310      	b.n	80035e4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002fc2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f280 830c 	bge.w	80035e4 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002fd8:	4013      	ands	r3, r2
 8002fda:	83fb      	strh	r3, [r7, #30]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	8bfa      	ldrh	r2, [r7, #30]
 8002fe2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fe6:	b292      	uxth	r2, r2
 8002fe8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3306      	adds	r3, #6
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	4413      	add	r3, r2
 8003008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003014:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d019      	beq.n	8003052 <PCD_EP_ISR_Handler+0x1f8>
 800301e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d015      	beq.n	8003052 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800302c:	6959      	ldr	r1, [r3, #20]
 800302e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003030:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003034:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003036:	b29b      	uxth	r3, r3
 8003038:	f004 fd00 	bl	8007a3c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800303c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	441a      	add	r2, r3
 8003046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003048:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800304a:	2100      	movs	r1, #0
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f006 fadf 	bl	8009610 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800305c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003064:	2b00      	cmp	r3, #0
 8003066:	f040 82bd 	bne.w	80035e4 <PCD_EP_ISR_Handler+0x78a>
 800306a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800306e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003072:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003076:	f000 82b5 	beq.w	80035e4 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003088:	b29b      	uxth	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	4413      	add	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	801a      	strh	r2, [r3, #0]
 80030aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b3e      	cmp	r3, #62	; 0x3e
 80030b0:	d91d      	bls.n	80030ee <PCD_EP_ISR_Handler+0x294>
 80030b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	647b      	str	r3, [r7, #68]	; 0x44
 80030ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <PCD_EP_ISR_Handler+0x272>
 80030c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c8:	3b01      	subs	r3, #1
 80030ca:	647b      	str	r3, [r7, #68]	; 0x44
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	029b      	lsls	r3, r3, #10
 80030d8:	b29b      	uxth	r3, r3
 80030da:	4313      	orrs	r3, r2
 80030dc:	b29b      	uxth	r3, r3
 80030de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	801a      	strh	r2, [r3, #0]
 80030ec:	e026      	b.n	800313c <PCD_EP_ISR_Handler+0x2e2>
 80030ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <PCD_EP_ISR_Handler+0x2b2>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003104:	b29a      	uxth	r2, r3
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	801a      	strh	r2, [r3, #0]
 800310a:	e017      	b.n	800313c <PCD_EP_ISR_Handler+0x2e2>
 800310c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	647b      	str	r3, [r7, #68]	; 0x44
 8003114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <PCD_EP_ISR_Handler+0x2cc>
 8003120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003122:	3301      	adds	r3, #1
 8003124:	647b      	str	r3, [r7, #68]	; 0x44
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29a      	uxth	r2, r3
 800312c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312e:	b29b      	uxth	r3, r3
 8003130:	029b      	lsls	r3, r3, #10
 8003132:	b29b      	uxth	r3, r3
 8003134:	4313      	orrs	r3, r2
 8003136:	b29a      	uxth	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314c:	827b      	strh	r3, [r7, #18]
 800314e:	8a7b      	ldrh	r3, [r7, #18]
 8003150:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003154:	827b      	strh	r3, [r7, #18]
 8003156:	8a7b      	ldrh	r3, [r7, #18]
 8003158:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800315c:	827b      	strh	r3, [r7, #18]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	8a7b      	ldrh	r3, [r7, #18]
 8003164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800316c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003174:	b29b      	uxth	r3, r3
 8003176:	8013      	strh	r3, [r2, #0]
 8003178:	e234      	b.n	80035e4 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800318e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003192:	2b00      	cmp	r3, #0
 8003194:	f280 80fc 	bge.w	8003390 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031ae:	4013      	ands	r3, r2
 80031b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80031c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031ca:	b292      	uxth	r2, r2
 80031cc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80031ce:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80031e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e6:	7b1b      	ldrb	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d125      	bne.n	8003238 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	3306      	adds	r3, #6
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003214:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003218:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8092 	beq.w	8003346 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003228:	6959      	ldr	r1, [r3, #20]
 800322a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800322c:	88da      	ldrh	r2, [r3, #6]
 800322e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003232:	f004 fc03 	bl	8007a3c <USB_ReadPMA>
 8003236:	e086      	b.n	8003346 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800323a:	78db      	ldrb	r3, [r3, #3]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d10a      	bne.n	8003256 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003240:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003244:	461a      	mov	r2, r3
 8003246:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f9d9 	bl	8003600 <HAL_PCD_EP_DB_Receive>
 800324e:	4603      	mov	r3, r0
 8003250:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003254:	e077      	b.n	8003346 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003270:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	441a      	add	r2, r3
 8003282:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800328a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800328e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003292:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003296:	b29b      	uxth	r3, r3
 8003298:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d024      	beq.n	80032fe <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032bc:	b29b      	uxth	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	3302      	adds	r3, #2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032dc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80032e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d02e      	beq.n	8003346 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ee:	6959      	ldr	r1, [r3, #20]
 80032f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f2:	891a      	ldrh	r2, [r3, #8]
 80032f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032f8:	f004 fba0 	bl	8007a3c <USB_ReadPMA>
 80032fc:	e023      	b.n	8003346 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003306:	b29b      	uxth	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	3306      	adds	r3, #6
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003326:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800332a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003338:	6959      	ldr	r1, [r3, #20]
 800333a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333c:	895a      	ldrh	r2, [r3, #10]
 800333e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003342:	f004 fb7b 	bl	8007a3c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800334e:	441a      	add	r2, r3
 8003350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003352:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800335c:	441a      	add	r2, r3
 800335e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003360:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <PCD_EP_ISR_Handler+0x51c>
 800336a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800336e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	429a      	cmp	r2, r3
 8003374:	d206      	bcs.n	8003384 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	4619      	mov	r1, r3
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f006 f947 	bl	8009610 <HAL_PCD_DataOutStageCallback>
 8003382:	e005      	b.n	8003390 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800338a:	4618      	mov	r0, r3
 800338c:	f002 fe22 	bl	8005fd4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003390:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8123 	beq.w	80035e4 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800339e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80033c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	441a      	add	r2, r3
 80033de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80033e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80033ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f0:	78db      	ldrb	r3, [r3, #3]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	f040 80a2 	bne.w	800353c <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80033f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033fa:	2200      	movs	r2, #0
 80033fc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80033fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003400:	7b1b      	ldrb	r3, [r3, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 8093 	beq.w	800352e <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003408:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d046      	beq.n	80034a2 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003416:	785b      	ldrb	r3, [r3, #1]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d126      	bne.n	800346a <PCD_EP_ISR_Handler+0x610>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800342a:	b29b      	uxth	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	4413      	add	r3, r2
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
 8003434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	011a      	lsls	r2, r3, #4
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	4413      	add	r3, r2
 800343e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003442:	623b      	str	r3, [r7, #32]
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800344e:	b29a      	uxth	r2, r3
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	801a      	strh	r2, [r3, #0]
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800345e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003462:	b29a      	uxth	r2, r3
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	801a      	strh	r2, [r3, #0]
 8003468:	e061      	b.n	800352e <PCD_EP_ISR_Handler+0x6d4>
 800346a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346c:	785b      	ldrb	r3, [r3, #1]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d15d      	bne.n	800352e <PCD_EP_ISR_Handler+0x6d4>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003480:	b29b      	uxth	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003486:	4413      	add	r3, r2
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800348a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	011a      	lsls	r2, r3, #4
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003492:	4413      	add	r3, r2
 8003494:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	2200      	movs	r2, #0
 800349e:	801a      	strh	r2, [r3, #0]
 80034a0:	e045      	b.n	800352e <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034aa:	785b      	ldrb	r3, [r3, #1]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d126      	bne.n	80034fe <PCD_EP_ISR_Handler+0x6a4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034be:	b29b      	uxth	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c4:	4413      	add	r3, r2
 80034c6:	637b      	str	r3, [r7, #52]	; 0x34
 80034c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	011a      	lsls	r2, r3, #4
 80034ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d0:	4413      	add	r3, r2
 80034d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034d6:	633b      	str	r3, [r7, #48]	; 0x30
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e6:	801a      	strh	r2, [r3, #0]
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	801a      	strh	r2, [r3, #0]
 80034fc:	e017      	b.n	800352e <PCD_EP_ISR_Handler+0x6d4>
 80034fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003500:	785b      	ldrb	r3, [r3, #1]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d113      	bne.n	800352e <PCD_EP_ISR_Handler+0x6d4>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800350e:	b29b      	uxth	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003514:	4413      	add	r3, r2
 8003516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	011a      	lsls	r2, r3, #4
 800351e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003520:	4413      	add	r3, r2
 8003522:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003526:	63bb      	str	r3, [r7, #56]	; 0x38
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	2200      	movs	r2, #0
 800352c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800352e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	4619      	mov	r1, r3
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f006 f886 	bl	8009646 <HAL_PCD_DataInStageCallback>
 800353a:	e053      	b.n	80035e4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800353c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d146      	bne.n	80035d6 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003550:	b29b      	uxth	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	3302      	adds	r3, #2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003570:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800357c:	429a      	cmp	r2, r3
 800357e:	d907      	bls.n	8003590 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003588:	1ad2      	subs	r2, r2, r3
 800358a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358c:	619a      	str	r2, [r3, #24]
 800358e:	e002      	b.n	8003596 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003592:	2200      	movs	r2, #0
 8003594:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800359e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	4619      	mov	r1, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f006 f84e 	bl	8009646 <HAL_PCD_DataInStageCallback>
 80035aa:	e01b      	b.n	80035e4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80035ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035b4:	441a      	add	r2, r3
 80035b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80035ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035bc:	69da      	ldr	r2, [r3, #28]
 80035be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035c2:	441a      	add	r2, r3
 80035c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035ce:	4618      	mov	r0, r3
 80035d0:	f002 fd00 	bl	8005fd4 <USB_EPStartXfer>
 80035d4:	e006      	b.n	80035e4 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80035d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035da:	461a      	mov	r2, r3
 80035dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f91b 	bl	800381a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	b21b      	sxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f6ff ac37 	blt.w	8002e64 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3758      	adds	r7, #88	; 0x58
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	4613      	mov	r3, r2
 800360c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d07e      	beq.n	8003716 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003620:	b29b      	uxth	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	3302      	adds	r3, #2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003640:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	8b7b      	ldrh	r3, [r7, #26]
 8003648:	429a      	cmp	r2, r3
 800364a:	d306      	bcc.n	800365a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	699a      	ldr	r2, [r3, #24]
 8003650:	8b7b      	ldrh	r3, [r7, #26]
 8003652:	1ad2      	subs	r2, r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	619a      	str	r2, [r3, #24]
 8003658:	e002      	b.n	8003660 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2200      	movs	r2, #0
 800365e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d123      	bne.n	80036b0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	833b      	strh	r3, [r7, #24]
 8003684:	8b3b      	ldrh	r3, [r7, #24]
 8003686:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800368a:	833b      	strh	r3, [r7, #24]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	441a      	add	r2, r3
 800369a:	8b3b      	ldrh	r3, [r7, #24]
 800369c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d01f      	beq.n	80036fa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d4:	82fb      	strh	r3, [r7, #22]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	441a      	add	r2, r3
 80036e4:	8afb      	ldrh	r3, [r7, #22]
 80036e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036fa:	8b7b      	ldrh	r3, [r7, #26]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8087 	beq.w	8003810 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	6959      	ldr	r1, [r3, #20]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	891a      	ldrh	r2, [r3, #8]
 800370e:	8b7b      	ldrh	r3, [r7, #26]
 8003710:	f004 f994 	bl	8007a3c <USB_ReadPMA>
 8003714:	e07c      	b.n	8003810 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800371e:	b29b      	uxth	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	3306      	adds	r3, #6
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	699a      	ldr	r2, [r3, #24]
 8003744:	8b7b      	ldrh	r3, [r7, #26]
 8003746:	429a      	cmp	r2, r3
 8003748:	d306      	bcc.n	8003758 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	8b7b      	ldrh	r3, [r7, #26]
 8003750:	1ad2      	subs	r2, r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	619a      	str	r2, [r3, #24]
 8003756:	e002      	b.n	800375e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d123      	bne.n	80037ae <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800377c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003780:	83fb      	strh	r3, [r7, #30]
 8003782:	8bfb      	ldrh	r3, [r7, #30]
 8003784:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003788:	83fb      	strh	r3, [r7, #30]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	441a      	add	r2, r3
 8003798:	8bfb      	ldrh	r3, [r7, #30]
 800379a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d11f      	bne.n	80037f8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d2:	83bb      	strh	r3, [r7, #28]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	441a      	add	r2, r3
 80037e2:	8bbb      	ldrh	r3, [r7, #28]
 80037e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80037f8:	8b7b      	ldrh	r3, [r7, #26]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	6959      	ldr	r1, [r3, #20]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	895a      	ldrh	r2, [r3, #10]
 800380a:	8b7b      	ldrh	r3, [r7, #26]
 800380c:	f004 f916 	bl	8007a3c <USB_ReadPMA>
    }
  }

  return count;
 8003810:	8b7b      	ldrh	r3, [r7, #26]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b0a4      	sub	sp, #144	; 0x90
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	4613      	mov	r3, r2
 8003826:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 81dd 	beq.w	8003bee <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383c:	b29b      	uxth	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4413      	add	r3, r2
 8003848:	3302      	adds	r3, #2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800385c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003868:	429a      	cmp	r2, r3
 800386a:	d907      	bls.n	800387c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	699a      	ldr	r2, [r3, #24]
 8003870:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003874:	1ad2      	subs	r2, r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	619a      	str	r2, [r3, #24]
 800387a:	e002      	b.n	8003882 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2200      	movs	r2, #0
 8003880:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f040 80b9 	bne.w	80039fe <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	785b      	ldrb	r3, [r3, #1]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d126      	bne.n	80038e2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	4413      	add	r3, r2
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	011a      	lsls	r2, r3, #4
 80038b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b4:	4413      	add	r3, r2
 80038b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	801a      	strh	r2, [r3, #0]
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038da:	b29a      	uxth	r2, r3
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	801a      	strh	r2, [r3, #0]
 80038e0:	e01a      	b.n	8003918 <HAL_PCD_EP_DB_Transmit+0xfe>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d116      	bne.n	8003918 <HAL_PCD_EP_DB_Transmit+0xfe>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fe:	4413      	add	r3, r2
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	011a      	lsls	r2, r3, #4
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	4413      	add	r3, r2
 800390c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003910:	633b      	str	r3, [r7, #48]	; 0x30
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	2200      	movs	r2, #0
 8003916:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	785b      	ldrb	r3, [r3, #1]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d126      	bne.n	8003974 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003934:	b29b      	uxth	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	4413      	add	r3, r2
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	011a      	lsls	r2, r3, #4
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	4413      	add	r3, r2
 8003948:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003958:	b29a      	uxth	r2, r3
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b29b      	uxth	r3, r3
 8003964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800396c:	b29a      	uxth	r2, r3
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	801a      	strh	r2, [r3, #0]
 8003972:	e017      	b.n	80039a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	785b      	ldrb	r3, [r3, #1]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d113      	bne.n	80039a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003984:	b29b      	uxth	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	4413      	add	r3, r2
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	011a      	lsls	r2, r3, #4
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	4413      	add	r3, r2
 8003998:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	2200      	movs	r2, #0
 80039a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4619      	mov	r1, r3
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f005 fe4b 	bl	8009646 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 82fc 	beq.w	8003fb4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	82fb      	strh	r3, [r7, #22]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	441a      	add	r2, r3
 80039e6:	8afb      	ldrh	r3, [r7, #22]
 80039e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	8013      	strh	r3, [r2, #0]
 80039fc:	e2da      	b.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d021      	beq.n	8003a4c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	441a      	add	r2, r3
 8003a34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	f040 82ae 	bne.w	8003fb4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003a60:	441a      	add	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	69da      	ldr	r2, [r3, #28]
 8003a6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003a6e:	441a      	add	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d30b      	bcc.n	8003a98 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	6a1a      	ldr	r2, [r3, #32]
 8003a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a90:	1ad2      	subs	r2, r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	621a      	str	r2, [r3, #32]
 8003a96:	e017      	b.n	8003ac8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d108      	bne.n	8003ab2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003aa0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003aa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ab0:	e00a      	b.n	8003ac8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	785b      	ldrb	r3, [r3, #1]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d165      	bne.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x382>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae4:	4413      	add	r3, r2
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	011a      	lsls	r2, r3, #4
 8003aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af0:	4413      	add	r3, r2
 8003af2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b06:	801a      	strh	r2, [r3, #0]
 8003b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b0c:	2b3e      	cmp	r3, #62	; 0x3e
 8003b0e:	d91d      	bls.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x332>
 8003b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <HAL_PCD_EP_DB_Transmit+0x310>
 8003b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b26:	3b01      	subs	r3, #1
 8003b28:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	029b      	lsls	r3, r3, #10
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	e044      	b.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <HAL_PCD_EP_DB_Transmit+0x350>
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b66:	801a      	strh	r2, [r3, #0]
 8003b68:	e035      	b.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b80:	3301      	adds	r3, #1
 8003b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	029b      	lsls	r3, r3, #10
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	4313      	orrs	r3, r2
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	801a      	strh	r2, [r3, #0]
 8003b9a:	e01c      	b.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	785b      	ldrb	r3, [r3, #1]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d118      	bne.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb8:	4413      	add	r3, r2
 8003bba:	647b      	str	r3, [r7, #68]	; 0x44
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	011a      	lsls	r2, r3, #4
 8003bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bca:	643b      	str	r3, [r7, #64]	; 0x40
 8003bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	6959      	ldr	r1, [r3, #20]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	891a      	ldrh	r2, [r3, #8]
 8003be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	f003 fee3 	bl	80079b2 <USB_WritePMA>
 8003bec:	e1e2      	b.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	3306      	adds	r3, #6
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c16:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d307      	bcc.n	8003c36 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003c2e:	1ad2      	subs	r2, r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	619a      	str	r2, [r3, #24]
 8003c34:	e002      	b.n	8003c3c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f040 80c0 	bne.w	8003dc6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	785b      	ldrb	r3, [r3, #1]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d126      	bne.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x482>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c62:	4413      	add	r3, r2
 8003c64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	011a      	lsls	r2, r3, #4
 8003c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c6e:	4413      	add	r3, r2
 8003c70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c74:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c98:	801a      	strh	r2, [r3, #0]
 8003c9a:	e01a      	b.n	8003cd2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d116      	bne.n	8003cd2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	667b      	str	r3, [r7, #100]	; 0x64
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cb8:	4413      	add	r3, r2
 8003cba:	667b      	str	r3, [r7, #100]	; 0x64
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	011a      	lsls	r2, r3, #4
 8003cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cca:	663b      	str	r3, [r7, #96]	; 0x60
 8003ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cce:	2200      	movs	r2, #0
 8003cd0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	677b      	str	r3, [r7, #116]	; 0x74
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	785b      	ldrb	r3, [r3, #1]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d12b      	bne.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf4:	4413      	add	r3, r2
 8003cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	011a      	lsls	r2, r3, #4
 8003cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d00:	4413      	add	r3, r2
 8003d02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d1c:	801a      	strh	r2, [r3, #0]
 8003d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	e017      	b.n	8003d68 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	785b      	ldrb	r3, [r3, #1]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d113      	bne.n	8003d68 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d4e:	4413      	add	r3, r2
 8003d50:	677b      	str	r3, [r7, #116]	; 0x74
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	011a      	lsls	r2, r3, #4
 8003d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d60:	673b      	str	r3, [r7, #112]	; 0x70
 8003d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d64:	2200      	movs	r2, #0
 8003d66:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f005 fc69 	bl	8009646 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 811a 	bne.w	8003fb4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	441a      	add	r2, r3
 8003dac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	8013      	strh	r3, [r2, #0]
 8003dc4:	e0f6      	b.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d121      	bne.n	8003e14 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	441a      	add	r2, r3
 8003dfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	f040 80ca 	bne.w	8003fb4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e28:	441a      	add	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e36:	441a      	add	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6a1a      	ldr	r2, [r3, #32]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d30b      	bcc.n	8003e60 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e58:	1ad2      	subs	r2, r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	621a      	str	r2, [r3, #32]
 8003e5e:	e017      	b.n	8003e90 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d108      	bne.n	8003e7a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003e68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e78:	e00a      	b.n	8003e90 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2200      	movs	r2, #0
 8003e86:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	657b      	str	r3, [r7, #84]	; 0x54
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	785b      	ldrb	r3, [r3, #1]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d165      	bne.n	8003f6a <HAL_PCD_EP_DB_Transmit+0x750>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb2:	4413      	add	r3, r2
 8003eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	011a      	lsls	r2, r3, #4
 8003ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ec4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ed4:	801a      	strh	r2, [r3, #0]
 8003ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eda:	2b3e      	cmp	r3, #62	; 0x3e
 8003edc:	d91d      	bls.n	8003f1a <HAL_PCD_EP_DB_Transmit+0x700>
 8003ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eea:	f003 031f 	and.w	r3, r3, #31
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ef8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	029b      	lsls	r3, r3, #10
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	4313      	orrs	r3, r2
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f16:	801a      	strh	r2, [r3, #0]
 8003f18:	e041      	b.n	8003f9e <HAL_PCD_EP_DB_Transmit+0x784>
 8003f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f34:	801a      	strh	r2, [r3, #0]
 8003f36:	e032      	b.n	8003f9e <HAL_PCD_EP_DB_Transmit+0x784>
 8003f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_PCD_EP_DB_Transmit+0x738>
 8003f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f4e:	3301      	adds	r3, #1
 8003f50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	029b      	lsls	r3, r3, #10
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	4313      	orrs	r3, r2
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f66:	801a      	strh	r2, [r3, #0]
 8003f68:	e019      	b.n	8003f9e <HAL_PCD_EP_DB_Transmit+0x784>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	785b      	ldrb	r3, [r3, #1]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d115      	bne.n	8003f9e <HAL_PCD_EP_DB_Transmit+0x784>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f80:	4413      	add	r3, r2
 8003f82:	657b      	str	r3, [r7, #84]	; 0x54
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	011a      	lsls	r2, r3, #4
 8003f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f92:	653b      	str	r3, [r7, #80]	; 0x50
 8003f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	6959      	ldr	r1, [r3, #20]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	895a      	ldrh	r2, [r3, #10]
 8003faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f003 fcff 	bl	80079b2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fce:	82bb      	strh	r3, [r7, #20]
 8003fd0:	8abb      	ldrh	r3, [r7, #20]
 8003fd2:	f083 0310 	eor.w	r3, r3, #16
 8003fd6:	82bb      	strh	r3, [r7, #20]
 8003fd8:	8abb      	ldrh	r3, [r7, #20]
 8003fda:	f083 0320 	eor.w	r3, r3, #32
 8003fde:	82bb      	strh	r3, [r7, #20]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	441a      	add	r2, r3
 8003fee:	8abb      	ldrh	r3, [r7, #20]
 8003ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004000:	b29b      	uxth	r3, r3
 8004002:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3790      	adds	r7, #144	; 0x90
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	607b      	str	r3, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	817b      	strh	r3, [r7, #10]
 800401c:	4613      	mov	r3, r2
 800401e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004020:	897b      	ldrh	r3, [r7, #10]
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00b      	beq.n	8004044 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800402c:	897b      	ldrh	r3, [r7, #10]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	e009      	b.n	8004058 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004044:	897a      	ldrh	r2, [r7, #10]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004058:	893b      	ldrh	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d107      	bne.n	800406e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2200      	movs	r2, #0
 8004062:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	b29a      	uxth	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	80da      	strh	r2, [r3, #6]
 800406c:	e00b      	b.n	8004086 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2201      	movs	r2, #1
 8004072:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	b29a      	uxth	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	0c1b      	lsrs	r3, r3, #16
 8004080:	b29a      	uxth	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr
	...

08004094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e272      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 8087 	beq.w	80041c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040b4:	4b92      	ldr	r3, [pc, #584]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d00c      	beq.n	80040da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040c0:	4b8f      	ldr	r3, [pc, #572]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d112      	bne.n	80040f2 <HAL_RCC_OscConfig+0x5e>
 80040cc:	4b8c      	ldr	r3, [pc, #560]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d8:	d10b      	bne.n	80040f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040da:	4b89      	ldr	r3, [pc, #548]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d06c      	beq.n	80041c0 <HAL_RCC_OscConfig+0x12c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d168      	bne.n	80041c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e24c      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fa:	d106      	bne.n	800410a <HAL_RCC_OscConfig+0x76>
 80040fc:	4b80      	ldr	r3, [pc, #512]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a7f      	ldr	r2, [pc, #508]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 8004102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	e02e      	b.n	8004168 <HAL_RCC_OscConfig+0xd4>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10c      	bne.n	800412c <HAL_RCC_OscConfig+0x98>
 8004112:	4b7b      	ldr	r3, [pc, #492]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a7a      	ldr	r2, [pc, #488]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 8004118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	4b78      	ldr	r3, [pc, #480]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a77      	ldr	r2, [pc, #476]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 8004124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	e01d      	b.n	8004168 <HAL_RCC_OscConfig+0xd4>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004134:	d10c      	bne.n	8004150 <HAL_RCC_OscConfig+0xbc>
 8004136:	4b72      	ldr	r3, [pc, #456]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a71      	ldr	r2, [pc, #452]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 800413c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	4b6f      	ldr	r3, [pc, #444]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a6e      	ldr	r2, [pc, #440]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 8004148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e00b      	b.n	8004168 <HAL_RCC_OscConfig+0xd4>
 8004150:	4b6b      	ldr	r3, [pc, #428]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a6a      	ldr	r2, [pc, #424]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 8004156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	4b68      	ldr	r3, [pc, #416]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a67      	ldr	r2, [pc, #412]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 8004162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004166:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d013      	beq.n	8004198 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fd ff4a 	bl	8002008 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004178:	f7fd ff46 	bl	8002008 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	; 0x64
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e200      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	4b5d      	ldr	r3, [pc, #372]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0xe4>
 8004196:	e014      	b.n	80041c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004198:	f7fd ff36 	bl	8002008 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a0:	f7fd ff32 	bl	8002008 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b64      	cmp	r3, #100	; 0x64
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e1ec      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b2:	4b53      	ldr	r3, [pc, #332]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x10c>
 80041be:	e000      	b.n	80041c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d063      	beq.n	8004296 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ce:	4b4c      	ldr	r3, [pc, #304]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00b      	beq.n	80041f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041da:	4b49      	ldr	r3, [pc, #292]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d11c      	bne.n	8004220 <HAL_RCC_OscConfig+0x18c>
 80041e6:	4b46      	ldr	r3, [pc, #280]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d116      	bne.n	8004220 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041f2:	4b43      	ldr	r3, [pc, #268]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <HAL_RCC_OscConfig+0x176>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d001      	beq.n	800420a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e1c0      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420a:	4b3d      	ldr	r3, [pc, #244]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4939      	ldr	r1, [pc, #228]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800421e:	e03a      	b.n	8004296 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d020      	beq.n	800426a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004228:	4b36      	ldr	r3, [pc, #216]	; (8004304 <HAL_RCC_OscConfig+0x270>)
 800422a:	2201      	movs	r2, #1
 800422c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422e:	f7fd feeb 	bl	8002008 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004236:	f7fd fee7 	bl	8002008 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e1a1      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004248:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004254:	4b2a      	ldr	r3, [pc, #168]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4927      	ldr	r1, [pc, #156]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 8004264:	4313      	orrs	r3, r2
 8004266:	600b      	str	r3, [r1, #0]
 8004268:	e015      	b.n	8004296 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800426a:	4b26      	ldr	r3, [pc, #152]	; (8004304 <HAL_RCC_OscConfig+0x270>)
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7fd feca 	bl	8002008 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004278:	f7fd fec6 	bl	8002008 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e180      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428a:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d03a      	beq.n	8004318 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d019      	beq.n	80042de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042aa:	4b17      	ldr	r3, [pc, #92]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b0:	f7fd feaa 	bl	8002008 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b8:	f7fd fea6 	bl	8002008 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e160      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0f0      	beq.n	80042b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042d6:	2001      	movs	r0, #1
 80042d8:	f000 fa9c 	bl	8004814 <RCC_Delay>
 80042dc:	e01c      	b.n	8004318 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e4:	f7fd fe90 	bl	8002008 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ea:	e00f      	b.n	800430c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ec:	f7fd fe8c 	bl	8002008 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d908      	bls.n	800430c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e146      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000
 8004304:	42420000 	.word	0x42420000
 8004308:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430c:	4b92      	ldr	r3, [pc, #584]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e9      	bne.n	80042ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80a6 	beq.w	8004472 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432a:	4b8b      	ldr	r3, [pc, #556]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10d      	bne.n	8004352 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	4b88      	ldr	r3, [pc, #544]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	4a87      	ldr	r2, [pc, #540]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 800433c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004340:	61d3      	str	r3, [r2, #28]
 8004342:	4b85      	ldr	r3, [pc, #532]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800434e:	2301      	movs	r3, #1
 8004350:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004352:	4b82      	ldr	r3, [pc, #520]	; (800455c <HAL_RCC_OscConfig+0x4c8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d118      	bne.n	8004390 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800435e:	4b7f      	ldr	r3, [pc, #508]	; (800455c <HAL_RCC_OscConfig+0x4c8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a7e      	ldr	r2, [pc, #504]	; (800455c <HAL_RCC_OscConfig+0x4c8>)
 8004364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436a:	f7fd fe4d 	bl	8002008 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004372:	f7fd fe49 	bl	8002008 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b64      	cmp	r3, #100	; 0x64
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e103      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	4b75      	ldr	r3, [pc, #468]	; (800455c <HAL_RCC_OscConfig+0x4c8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d106      	bne.n	80043a6 <HAL_RCC_OscConfig+0x312>
 8004398:	4b6f      	ldr	r3, [pc, #444]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	4a6e      	ldr	r2, [pc, #440]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6213      	str	r3, [r2, #32]
 80043a4:	e02d      	b.n	8004402 <HAL_RCC_OscConfig+0x36e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x334>
 80043ae:	4b6a      	ldr	r3, [pc, #424]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	4a69      	ldr	r2, [pc, #420]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	6213      	str	r3, [r2, #32]
 80043ba:	4b67      	ldr	r3, [pc, #412]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4a66      	ldr	r2, [pc, #408]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	f023 0304 	bic.w	r3, r3, #4
 80043c4:	6213      	str	r3, [r2, #32]
 80043c6:	e01c      	b.n	8004402 <HAL_RCC_OscConfig+0x36e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b05      	cmp	r3, #5
 80043ce:	d10c      	bne.n	80043ea <HAL_RCC_OscConfig+0x356>
 80043d0:	4b61      	ldr	r3, [pc, #388]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	4a60      	ldr	r2, [pc, #384]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80043d6:	f043 0304 	orr.w	r3, r3, #4
 80043da:	6213      	str	r3, [r2, #32]
 80043dc:	4b5e      	ldr	r3, [pc, #376]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	4a5d      	ldr	r2, [pc, #372]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6213      	str	r3, [r2, #32]
 80043e8:	e00b      	b.n	8004402 <HAL_RCC_OscConfig+0x36e>
 80043ea:	4b5b      	ldr	r3, [pc, #364]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	4a5a      	ldr	r2, [pc, #360]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80043f0:	f023 0301 	bic.w	r3, r3, #1
 80043f4:	6213      	str	r3, [r2, #32]
 80043f6:	4b58      	ldr	r3, [pc, #352]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	4a57      	ldr	r2, [pc, #348]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80043fc:	f023 0304 	bic.w	r3, r3, #4
 8004400:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d015      	beq.n	8004436 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440a:	f7fd fdfd 	bl	8002008 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004410:	e00a      	b.n	8004428 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004412:	f7fd fdf9 	bl	8002008 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004420:	4293      	cmp	r3, r2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e0b1      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004428:	4b4b      	ldr	r3, [pc, #300]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0ee      	beq.n	8004412 <HAL_RCC_OscConfig+0x37e>
 8004434:	e014      	b.n	8004460 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004436:	f7fd fde7 	bl	8002008 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443c:	e00a      	b.n	8004454 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443e:	f7fd fde3 	bl	8002008 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	f241 3288 	movw	r2, #5000	; 0x1388
 800444c:	4293      	cmp	r3, r2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e09b      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004454:	4b40      	ldr	r3, [pc, #256]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ee      	bne.n	800443e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004460:	7dfb      	ldrb	r3, [r7, #23]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d105      	bne.n	8004472 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004466:	4b3c      	ldr	r3, [pc, #240]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	4a3b      	ldr	r2, [pc, #236]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 800446c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004470:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 8087 	beq.w	800458a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800447c:	4b36      	ldr	r3, [pc, #216]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	2b08      	cmp	r3, #8
 8004486:	d061      	beq.n	800454c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d146      	bne.n	800451e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004490:	4b33      	ldr	r3, [pc, #204]	; (8004560 <HAL_RCC_OscConfig+0x4cc>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004496:	f7fd fdb7 	bl	8002008 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449e:	f7fd fdb3 	bl	8002008 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e06d      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b0:	4b29      	ldr	r3, [pc, #164]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f0      	bne.n	800449e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c4:	d108      	bne.n	80044d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	4921      	ldr	r1, [pc, #132]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044d8:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a19      	ldr	r1, [r3, #32]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	430b      	orrs	r3, r1
 80044ea:	491b      	ldr	r1, [pc, #108]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f0:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_RCC_OscConfig+0x4cc>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f6:	f7fd fd87 	bl	8002008 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fe:	f7fd fd83 	bl	8002008 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e03d      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004510:	4b11      	ldr	r3, [pc, #68]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCC_OscConfig+0x46a>
 800451c:	e035      	b.n	800458a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451e:	4b10      	ldr	r3, [pc, #64]	; (8004560 <HAL_RCC_OscConfig+0x4cc>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fd fd70 	bl	8002008 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452c:	f7fd fd6c 	bl	8002008 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e026      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_RCC_OscConfig+0x4c4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x498>
 800454a:	e01e      	b.n	800458a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d107      	bne.n	8004564 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e019      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
 8004558:	40021000 	.word	0x40021000
 800455c:	40007000 	.word	0x40007000
 8004560:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCC_OscConfig+0x500>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	429a      	cmp	r2, r3
 8004576:	d106      	bne.n	8004586 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d001      	beq.n	800458a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000

08004598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0d0      	b.n	800474e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045ac:	4b6a      	ldr	r3, [pc, #424]	; (8004758 <HAL_RCC_ClockConfig+0x1c0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d910      	bls.n	80045dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ba:	4b67      	ldr	r3, [pc, #412]	; (8004758 <HAL_RCC_ClockConfig+0x1c0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 0207 	bic.w	r2, r3, #7
 80045c2:	4965      	ldr	r1, [pc, #404]	; (8004758 <HAL_RCC_ClockConfig+0x1c0>)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	4b63      	ldr	r3, [pc, #396]	; (8004758 <HAL_RCC_ClockConfig+0x1c0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0b8      	b.n	800474e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d020      	beq.n	800462a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045f4:	4b59      	ldr	r3, [pc, #356]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	4a58      	ldr	r2, [pc, #352]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 80045fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800460c:	4b53      	ldr	r3, [pc, #332]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a52      	ldr	r2, [pc, #328]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 8004612:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004616:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004618:	4b50      	ldr	r3, [pc, #320]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	494d      	ldr	r1, [pc, #308]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 8004626:	4313      	orrs	r3, r2
 8004628:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d040      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463e:	4b47      	ldr	r3, [pc, #284]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d115      	bne.n	8004676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e07f      	b.n	800474e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d107      	bne.n	8004666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004656:	4b41      	ldr	r3, [pc, #260]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e073      	b.n	800474e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004666:	4b3d      	ldr	r3, [pc, #244]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e06b      	b.n	800474e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004676:	4b39      	ldr	r3, [pc, #228]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f023 0203 	bic.w	r2, r3, #3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	4936      	ldr	r1, [pc, #216]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004688:	f7fd fcbe 	bl	8002008 <HAL_GetTick>
 800468c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468e:	e00a      	b.n	80046a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004690:	f7fd fcba 	bl	8002008 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e053      	b.n	800474e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a6:	4b2d      	ldr	r3, [pc, #180]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 020c 	and.w	r2, r3, #12
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d1eb      	bne.n	8004690 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046b8:	4b27      	ldr	r3, [pc, #156]	; (8004758 <HAL_RCC_ClockConfig+0x1c0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d210      	bcs.n	80046e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_ClockConfig+0x1c0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 0207 	bic.w	r2, r3, #7
 80046ce:	4922      	ldr	r1, [pc, #136]	; (8004758 <HAL_RCC_ClockConfig+0x1c0>)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	4b20      	ldr	r3, [pc, #128]	; (8004758 <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e032      	b.n	800474e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046f4:	4b19      	ldr	r3, [pc, #100]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4916      	ldr	r1, [pc, #88]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	4313      	orrs	r3, r2
 8004704:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004712:	4b12      	ldr	r3, [pc, #72]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	490e      	ldr	r1, [pc, #56]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004726:	f000 f821 	bl	800476c <HAL_RCC_GetSysClockFreq>
 800472a:	4602      	mov	r2, r0
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	490a      	ldr	r1, [pc, #40]	; (8004760 <HAL_RCC_ClockConfig+0x1c8>)
 8004738:	5ccb      	ldrb	r3, [r1, r3]
 800473a:	fa22 f303 	lsr.w	r3, r2, r3
 800473e:	4a09      	ldr	r2, [pc, #36]	; (8004764 <HAL_RCC_ClockConfig+0x1cc>)
 8004740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004742:	4b09      	ldr	r3, [pc, #36]	; (8004768 <HAL_RCC_ClockConfig+0x1d0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fd fc1c 	bl	8001f84 <HAL_InitTick>

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40022000 	.word	0x40022000
 800475c:	40021000 	.word	0x40021000
 8004760:	0800d164 	.word	0x0800d164
 8004764:	2000000c 	.word	0x2000000c
 8004768:	20000010 	.word	0x20000010

0800476c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	2300      	movs	r3, #0
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	2300      	movs	r3, #0
 8004780:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004786:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <HAL_RCC_GetSysClockFreq+0x94>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 030c 	and.w	r3, r3, #12
 8004792:	2b04      	cmp	r3, #4
 8004794:	d002      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0x30>
 8004796:	2b08      	cmp	r3, #8
 8004798:	d003      	beq.n	80047a2 <HAL_RCC_GetSysClockFreq+0x36>
 800479a:	e027      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_GetSysClockFreq+0x98>)
 800479e:	613b      	str	r3, [r7, #16]
      break;
 80047a0:	e027      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	0c9b      	lsrs	r3, r3, #18
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	4a17      	ldr	r2, [pc, #92]	; (8004808 <HAL_RCC_GetSysClockFreq+0x9c>)
 80047ac:	5cd3      	ldrb	r3, [r2, r3]
 80047ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d010      	beq.n	80047dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <HAL_RCC_GetSysClockFreq+0x94>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	0c5b      	lsrs	r3, r3, #17
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	4a11      	ldr	r2, [pc, #68]	; (800480c <HAL_RCC_GetSysClockFreq+0xa0>)
 80047c6:	5cd3      	ldrb	r3, [r2, r3]
 80047c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a0d      	ldr	r2, [pc, #52]	; (8004804 <HAL_RCC_GetSysClockFreq+0x98>)
 80047ce:	fb03 f202 	mul.w	r2, r3, r2
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	e004      	b.n	80047e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a0c      	ldr	r2, [pc, #48]	; (8004810 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047e0:	fb02 f303 	mul.w	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	613b      	str	r3, [r7, #16]
      break;
 80047ea:	e002      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_RCC_GetSysClockFreq+0x98>)
 80047ee:	613b      	str	r3, [r7, #16]
      break;
 80047f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047f2:	693b      	ldr	r3, [r7, #16]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000
 8004804:	007a1200 	.word	0x007a1200
 8004808:	0800d174 	.word	0x0800d174
 800480c:	0800d184 	.word	0x0800d184
 8004810:	003d0900 	.word	0x003d0900

08004814 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <RCC_Delay+0x34>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a0a      	ldr	r2, [pc, #40]	; (800484c <RCC_Delay+0x38>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	0a5b      	lsrs	r3, r3, #9
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004830:	bf00      	nop
  }
  while (Delay --);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1e5a      	subs	r2, r3, #1
 8004836:	60fa      	str	r2, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f9      	bne.n	8004830 <RCC_Delay+0x1c>
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr
 8004848:	2000000c 	.word	0x2000000c
 800484c:	10624dd3 	.word	0x10624dd3

08004850 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d07d      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800486c:	2300      	movs	r3, #0
 800486e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004870:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10d      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800487c:	4b4c      	ldr	r3, [pc, #304]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	4a4b      	ldr	r2, [pc, #300]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004886:	61d3      	str	r3, [r2, #28]
 8004888:	4b49      	ldr	r3, [pc, #292]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004894:	2301      	movs	r3, #1
 8004896:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	4b46      	ldr	r3, [pc, #280]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d118      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048a4:	4b43      	ldr	r3, [pc, #268]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a42      	ldr	r2, [pc, #264]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048b0:	f7fd fbaa 	bl	8002008 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b6:	e008      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b8:	f7fd fba6 	bl	8002008 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	; 0x64
 80048c4:	d901      	bls.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e06d      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ca:	4b3a      	ldr	r3, [pc, #232]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048d6:	4b36      	ldr	r3, [pc, #216]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d02e      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d027      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048f4:	4b2e      	ldr	r3, [pc, #184]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048fe:	4b2e      	ldr	r3, [pc, #184]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004904:	4b2c      	ldr	r3, [pc, #176]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800490a:	4a29      	ldr	r2, [pc, #164]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d014      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491a:	f7fd fb75 	bl	8002008 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004920:	e00a      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004922:	f7fd fb71 	bl	8002008 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004930:	4293      	cmp	r3, r2
 8004932:	d901      	bls.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e036      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004938:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0ee      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004944:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4917      	ldr	r1, [pc, #92]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004952:	4313      	orrs	r3, r2
 8004954:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004956:	7dfb      	ldrb	r3, [r7, #23]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d105      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495c:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004966:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004974:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	490b      	ldr	r1, [pc, #44]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004982:	4313      	orrs	r3, r2
 8004984:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004992:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	4904      	ldr	r1, [pc, #16]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000
 80049b4:	40007000 	.word	0x40007000
 80049b8:	42420440 	.word	0x42420440

080049bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d001      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e03a      	b.n	8004a4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <HAL_TIM_Base_Start_IT+0x98>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x58>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fe:	d009      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x58>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a14      	ldr	r2, [pc, #80]	; (8004a58 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x58>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a13      	ldr	r2, [pc, #76]	; (8004a5c <HAL_TIM_Base_Start_IT+0xa0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d111      	bne.n	8004a38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d010      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a36:	e007      	b.n	8004a48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr
 8004a54:	40012c00 	.word	0x40012c00
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	40000800 	.word	0x40000800

08004a60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e041      	b.n	8004af6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fd fa00 	bl	8001e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	f000 fa26 	bl	8004ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d122      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d11b      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0202 	mvn.w	r2, #2
 8004b2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f9b9 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004b46:	e005      	b.n	8004b54 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f9ac 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f9bb 	bl	8004eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d122      	bne.n	8004bae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d11b      	bne.n	8004bae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0204 	mvn.w	r2, #4
 8004b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f98f 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004b9a:	e005      	b.n	8004ba8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f982 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f991 	bl	8004eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d122      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d11b      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0208 	mvn.w	r2, #8
 8004bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f965 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004bee:	e005      	b.n	8004bfc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f958 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f967 	bl	8004eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	2b10      	cmp	r3, #16
 8004c0e:	d122      	bne.n	8004c56 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0310 	and.w	r3, r3, #16
 8004c1a:	2b10      	cmp	r3, #16
 8004c1c:	d11b      	bne.n	8004c56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f06f 0210 	mvn.w	r2, #16
 8004c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f93b 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004c42:	e005      	b.n	8004c50 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f92e 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f93d 	bl	8004eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d10e      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d107      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f06f 0201 	mvn.w	r2, #1
 8004c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f909 	bl	8004e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8c:	2b80      	cmp	r3, #128	; 0x80
 8004c8e:	d10e      	bne.n	8004cae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9a:	2b80      	cmp	r3, #128	; 0x80
 8004c9c:	d107      	bne.n	8004cae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fb72 	bl	8005392 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	d10e      	bne.n	8004cda <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc6:	2b40      	cmp	r3, #64	; 0x40
 8004cc8:	d107      	bne.n	8004cda <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f901 	bl	8004edc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d10e      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d107      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f06f 0220 	mvn.w	r2, #32
 8004cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fb3d 	bl	8005380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e0ae      	b.n	8004e8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b0c      	cmp	r3, #12
 8004d3a:	f200 809f 	bhi.w	8004e7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d79 	.word	0x08004d79
 8004d48:	08004e7d 	.word	0x08004e7d
 8004d4c:	08004e7d 	.word	0x08004e7d
 8004d50:	08004e7d 	.word	0x08004e7d
 8004d54:	08004db9 	.word	0x08004db9
 8004d58:	08004e7d 	.word	0x08004e7d
 8004d5c:	08004e7d 	.word	0x08004e7d
 8004d60:	08004e7d 	.word	0x08004e7d
 8004d64:	08004dfb 	.word	0x08004dfb
 8004d68:	08004e7d 	.word	0x08004e7d
 8004d6c:	08004e7d 	.word	0x08004e7d
 8004d70:	08004e7d 	.word	0x08004e7d
 8004d74:	08004e3b 	.word	0x08004e3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f918 	bl	8004fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0208 	orr.w	r2, r2, #8
 8004d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0204 	bic.w	r2, r2, #4
 8004da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6999      	ldr	r1, [r3, #24]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	619a      	str	r2, [r3, #24]
      break;
 8004db6:	e064      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 f95e 	bl	8005080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6999      	ldr	r1, [r3, #24]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	021a      	lsls	r2, r3, #8
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	619a      	str	r2, [r3, #24]
      break;
 8004df8:	e043      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f9a7 	bl	8005154 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0208 	orr.w	r2, r2, #8
 8004e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0204 	bic.w	r2, r2, #4
 8004e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69d9      	ldr	r1, [r3, #28]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	61da      	str	r2, [r3, #28]
      break;
 8004e38:	e023      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 f9f1 	bl	8005228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69d9      	ldr	r1, [r3, #28]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	021a      	lsls	r2, r3, #8
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	61da      	str	r2, [r3, #28]
      break;
 8004e7a:	e002      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bc80      	pop	{r7}
 8004ec8:	4770      	bx	lr

08004eca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr

08004edc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr
	...

08004ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a29      	ldr	r2, [pc, #164]	; (8004fa8 <TIM_Base_SetConfig+0xb8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <TIM_Base_SetConfig+0x30>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0e:	d007      	beq.n	8004f20 <TIM_Base_SetConfig+0x30>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a26      	ldr	r2, [pc, #152]	; (8004fac <TIM_Base_SetConfig+0xbc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_Base_SetConfig+0x30>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a25      	ldr	r2, [pc, #148]	; (8004fb0 <TIM_Base_SetConfig+0xc0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d108      	bne.n	8004f32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <TIM_Base_SetConfig+0xb8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00b      	beq.n	8004f52 <TIM_Base_SetConfig+0x62>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d007      	beq.n	8004f52 <TIM_Base_SetConfig+0x62>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a19      	ldr	r2, [pc, #100]	; (8004fac <TIM_Base_SetConfig+0xbc>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_Base_SetConfig+0x62>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a18      	ldr	r2, [pc, #96]	; (8004fb0 <TIM_Base_SetConfig+0xc0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d108      	bne.n	8004f64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a07      	ldr	r2, [pc, #28]	; (8004fa8 <TIM_Base_SetConfig+0xb8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d103      	bne.n	8004f98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	615a      	str	r2, [r3, #20]
}
 8004f9e:	bf00      	nop
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800

08004fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f023 0201 	bic.w	r2, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f023 0302 	bic.w	r3, r3, #2
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a1c      	ldr	r2, [pc, #112]	; (800507c <TIM_OC1_SetConfig+0xc8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10c      	bne.n	800502a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0308 	bic.w	r3, r3, #8
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 0304 	bic.w	r3, r3, #4
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a13      	ldr	r2, [pc, #76]	; (800507c <TIM_OC1_SetConfig+0xc8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d111      	bne.n	8005056 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	621a      	str	r2, [r3, #32]
}
 8005070:	bf00      	nop
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40012c00 	.word	0x40012c00

08005080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	f023 0210 	bic.w	r2, r3, #16
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0320 	bic.w	r3, r3, #32
 80050ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <TIM_OC2_SetConfig+0xd0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10d      	bne.n	80050fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a14      	ldr	r2, [pc, #80]	; (8005150 <TIM_OC2_SetConfig+0xd0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d113      	bne.n	800512c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800510a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	40012c00 	.word	0x40012c00

08005154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0303 	bic.w	r3, r3, #3
 800518a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800519c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <TIM_OC3_SetConfig+0xd0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d10d      	bne.n	80051ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a14      	ldr	r2, [pc, #80]	; (8005224 <TIM_OC3_SetConfig+0xd0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d113      	bne.n	80051fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	621a      	str	r2, [r3, #32]
}
 8005218:	bf00      	nop
 800521a:	371c      	adds	r7, #28
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00

08005228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a0f      	ldr	r2, [pc, #60]	; (80052c0 <TIM_OC4_SetConfig+0x98>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d109      	bne.n	800529c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800528e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	019b      	lsls	r3, r3, #6
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr
 80052c0:	40012c00 	.word	0x40012c00

080052c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d8:	2302      	movs	r3, #2
 80052da:	e046      	b.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00e      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005328:	d009      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a12      	ldr	r2, [pc, #72]	; (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d004      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a10      	ldr	r2, [pc, #64]	; (800537c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10c      	bne.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4313      	orrs	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr
 8005374:	40012c00 	.word	0x40012c00
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800

08005380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	bc80      	pop	{r7}
 8005390:	4770      	bx	lr

08005392 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr

080053a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053a4:	b084      	sub	sp, #16
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	f107 0014 	add.w	r0, r7, #20
 80053b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	b004      	add	sp, #16
 80053c2:	4770      	bx	lr

080053c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80053d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	b29a      	uxth	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bc80      	pop	{r7}
 80053ee:	4770      	bx	lr

080053f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80053fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	b29b      	uxth	r3, r3
 800540a:	43db      	mvns	r3, r3
 800540c:	b29b      	uxth	r3, r3
 800540e:	4013      	ands	r3, r2
 8005410:	b29a      	uxth	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr

08005424 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr

0800543c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800543c:	b084      	sub	sp, #16
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	f107 0014 	add.w	r0, r7, #20
 800544a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	b004      	add	sp, #16
 800547a:	4770      	bx	lr

0800547c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800547c:	b480      	push	{r7}
 800547e:	b09d      	sub	sp, #116	; 0x74
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800549e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	78db      	ldrb	r3, [r3, #3]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d81f      	bhi.n	80054ee <USB_ActivateEndpoint+0x72>
 80054ae:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <USB_ActivateEndpoint+0x38>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	080054c5 	.word	0x080054c5
 80054b8:	080054e1 	.word	0x080054e1
 80054bc:	080054f7 	.word	0x080054f7
 80054c0:	080054d3 	.word	0x080054d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80054c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80054c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80054d0:	e012      	b.n	80054f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80054d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80054d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80054da:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80054de:	e00b      	b.n	80054f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80054e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80054e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80054ec:	e004      	b.n	80054f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80054f4:	e000      	b.n	80054f8 <USB_ActivateEndpoint+0x7c>
      break;
 80054f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	441a      	add	r2, r3
 8005502:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800550e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005516:	b29b      	uxth	r3, r3
 8005518:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005530:	b29a      	uxth	r2, r3
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	4313      	orrs	r3, r2
 800553a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	441a      	add	r2, r3
 8005548:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800554c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555c:	b29b      	uxth	r3, r3
 800555e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	7b1b      	ldrb	r3, [r3, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	f040 8178 	bne.w	800585a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 8084 	beq.w	800567c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557e:	b29b      	uxth	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	4413      	add	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	011a      	lsls	r2, r3, #4
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	88db      	ldrh	r3, [r3, #6]
 800559c:	085b      	lsrs	r3, r3, #1
 800559e:	b29b      	uxth	r3, r3
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	827b      	strh	r3, [r7, #18]
 80055b6:	8a7b      	ldrh	r3, [r7, #18]
 80055b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01b      	beq.n	80055f8 <USB_ActivateEndpoint+0x17c>
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d6:	823b      	strh	r3, [r7, #16]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	441a      	add	r2, r3
 80055e2:	8a3b      	ldrh	r3, [r7, #16]
 80055e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	78db      	ldrb	r3, [r3, #3]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d020      	beq.n	8005642 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005616:	81bb      	strh	r3, [r7, #12]
 8005618:	89bb      	ldrh	r3, [r7, #12]
 800561a:	f083 0320 	eor.w	r3, r3, #32
 800561e:	81bb      	strh	r3, [r7, #12]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	441a      	add	r2, r3
 800562a:	89bb      	ldrh	r3, [r7, #12]
 800562c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563c:	b29b      	uxth	r3, r3
 800563e:	8013      	strh	r3, [r2, #0]
 8005640:	e2d5      	b.n	8005bee <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005658:	81fb      	strh	r3, [r7, #14]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	441a      	add	r2, r3
 8005664:	89fb      	ldrh	r3, [r7, #14]
 8005666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800566e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005676:	b29b      	uxth	r3, r3
 8005678:	8013      	strh	r3, [r2, #0]
 800567a:	e2b8      	b.n	8005bee <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	633b      	str	r3, [r7, #48]	; 0x30
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005686:	b29b      	uxth	r3, r3
 8005688:	461a      	mov	r2, r3
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	4413      	add	r3, r2
 800568e:	633b      	str	r3, [r7, #48]	; 0x30
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	011a      	lsls	r2, r3, #4
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	4413      	add	r3, r2
 800569a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	88db      	ldrh	r3, [r3, #6]
 80056a4:	085b      	lsrs	r3, r3, #1
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ae:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	4413      	add	r3, r2
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	011a      	lsls	r2, r3, #4
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	4413      	add	r3, r2
 80056ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056de:	b29a      	uxth	r2, r3
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	801a      	strh	r2, [r3, #0]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b3e      	cmp	r3, #62	; 0x3e
 80056ea:	d91d      	bls.n	8005728 <USB_ActivateEndpoint+0x2ac>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f003 031f 	and.w	r3, r3, #31
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d102      	bne.n	8005706 <USB_ActivateEndpoint+0x28a>
 8005700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005702:	3b01      	subs	r3, #1
 8005704:	66bb      	str	r3, [r7, #104]	; 0x68
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29a      	uxth	r2, r3
 800570c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800570e:	b29b      	uxth	r3, r3
 8005710:	029b      	lsls	r3, r3, #10
 8005712:	b29b      	uxth	r3, r3
 8005714:	4313      	orrs	r3, r2
 8005716:	b29b      	uxth	r3, r3
 8005718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800571c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005720:	b29a      	uxth	r2, r3
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	801a      	strh	r2, [r3, #0]
 8005726:	e026      	b.n	8005776 <USB_ActivateEndpoint+0x2fa>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <USB_ActivateEndpoint+0x2ca>
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	b29b      	uxth	r3, r3
 8005736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800573a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800573e:	b29a      	uxth	r2, r3
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	801a      	strh	r2, [r3, #0]
 8005744:	e017      	b.n	8005776 <USB_ActivateEndpoint+0x2fa>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	085b      	lsrs	r3, r3, #1
 800574c:	66bb      	str	r3, [r7, #104]	; 0x68
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <USB_ActivateEndpoint+0x2e4>
 800575a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800575c:	3301      	adds	r3, #1
 800575e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29a      	uxth	r2, r3
 8005766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005768:	b29b      	uxth	r3, r3
 800576a:	029b      	lsls	r3, r3, #10
 800576c:	b29b      	uxth	r3, r3
 800576e:	4313      	orrs	r3, r2
 8005770:	b29a      	uxth	r2, r3
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	847b      	strh	r3, [r7, #34]	; 0x22
 8005784:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01b      	beq.n	80057c6 <USB_ActivateEndpoint+0x34a>
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a4:	843b      	strh	r3, [r7, #32]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	441a      	add	r2, r3
 80057b0:	8c3b      	ldrh	r3, [r7, #32]
 80057b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d124      	bne.n	8005818 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e4:	83bb      	strh	r3, [r7, #28]
 80057e6:	8bbb      	ldrh	r3, [r7, #28]
 80057e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057ec:	83bb      	strh	r3, [r7, #28]
 80057ee:	8bbb      	ldrh	r3, [r7, #28]
 80057f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057f4:	83bb      	strh	r3, [r7, #28]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	441a      	add	r2, r3
 8005800:	8bbb      	ldrh	r3, [r7, #28]
 8005802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800580e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005812:	b29b      	uxth	r3, r3
 8005814:	8013      	strh	r3, [r2, #0]
 8005816:	e1ea      	b.n	8005bee <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	83fb      	strh	r3, [r7, #30]
 8005830:	8bfb      	ldrh	r3, [r7, #30]
 8005832:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005836:	83fb      	strh	r3, [r7, #30]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	441a      	add	r2, r3
 8005842:	8bfb      	ldrh	r3, [r7, #30]
 8005844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800584c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005854:	b29b      	uxth	r3, r3
 8005856:	8013      	strh	r3, [r2, #0]
 8005858:	e1c9      	b.n	8005bee <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	78db      	ldrb	r3, [r3, #3]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d11e      	bne.n	80058a0 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005878:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	441a      	add	r2, r3
 8005886:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800588a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005892:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589a:	b29b      	uxth	r3, r3
 800589c:	8013      	strh	r3, [r2, #0]
 800589e:	e01d      	b.n	80058dc <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	441a      	add	r2, r3
 80058c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d8:	b29b      	uxth	r3, r3
 80058da:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ec:	4413      	add	r3, r2
 80058ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	011a      	lsls	r2, r3, #4
 80058f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	891b      	ldrh	r3, [r3, #8]
 8005904:	085b      	lsrs	r3, r3, #1
 8005906:	b29b      	uxth	r3, r3
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	657b      	str	r3, [r7, #84]	; 0x54
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800591a:	b29b      	uxth	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005920:	4413      	add	r3, r2
 8005922:	657b      	str	r3, [r7, #84]	; 0x54
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	011a      	lsls	r2, r3, #4
 800592a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800592c:	4413      	add	r3, r2
 800592e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005932:	653b      	str	r3, [r7, #80]	; 0x50
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	895b      	ldrh	r3, [r3, #10]
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	b29b      	uxth	r3, r3
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005942:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f040 8093 	bne.w	8005a74 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800595e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01b      	beq.n	80059a2 <USB_ActivateEndpoint+0x526>
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005980:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	441a      	add	r2, r3
 800598c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800598e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800599a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599e:	b29b      	uxth	r3, r3
 80059a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80059b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80059b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d01b      	beq.n	80059f2 <USB_ActivateEndpoint+0x576>
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	441a      	add	r2, r3
 80059dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80059de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a08:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a0a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a10:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a18:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	441a      	add	r2, r3
 8005a24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a50:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	441a      	add	r2, r3
 8005a5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	8013      	strh	r3, [r2, #0]
 8005a72:	e0bc      	b.n	8005bee <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005a84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01d      	beq.n	8005acc <USB_ActivateEndpoint+0x650>
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	441a      	add	r2, r3
 8005ab4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005adc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01d      	beq.n	8005b24 <USB_ActivateEndpoint+0x6a8>
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	441a      	add	r2, r3
 8005b0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	78db      	ldrb	r3, [r3, #3]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d024      	beq.n	8005b76 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005b46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b4a:	f083 0320 	eor.w	r3, r3, #32
 8005b4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	441a      	add	r2, r3
 8005b5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	8013      	strh	r3, [r2, #0]
 8005b74:	e01d      	b.n	8005bb2 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	441a      	add	r2, r3
 8005b9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	441a      	add	r2, r3
 8005bd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005bee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3774      	adds	r7, #116	; 0x74
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b08d      	sub	sp, #52	; 0x34
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	7b1b      	ldrb	r3, [r3, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f040 808e 	bne.w	8005d2c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	785b      	ldrb	r3, [r3, #1]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d044      	beq.n	8005ca2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	81bb      	strh	r3, [r7, #12]
 8005c26:	89bb      	ldrh	r3, [r7, #12]
 8005c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01b      	beq.n	8005c68 <USB_DeactivateEndpoint+0x6c>
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c46:	817b      	strh	r3, [r7, #10]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	441a      	add	r2, r3
 8005c52:	897b      	ldrh	r3, [r7, #10]
 8005c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7e:	813b      	strh	r3, [r7, #8]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	441a      	add	r2, r3
 8005c8a:	893b      	ldrh	r3, [r7, #8]
 8005c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	8013      	strh	r3, [r2, #0]
 8005ca0:	e192      	b.n	8005fc8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	827b      	strh	r3, [r7, #18]
 8005cb0:	8a7b      	ldrh	r3, [r7, #18]
 8005cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01b      	beq.n	8005cf2 <USB_DeactivateEndpoint+0xf6>
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd0:	823b      	strh	r3, [r7, #16]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	441a      	add	r2, r3
 8005cdc:	8a3b      	ldrh	r3, [r7, #16]
 8005cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d08:	81fb      	strh	r3, [r7, #14]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	441a      	add	r2, r3
 8005d14:	89fb      	ldrh	r3, [r7, #14]
 8005d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	8013      	strh	r3, [r2, #0]
 8005d2a:	e14d      	b.n	8005fc8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 80a5 	bne.w	8005e80 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	843b      	strh	r3, [r7, #32]
 8005d44:	8c3b      	ldrh	r3, [r7, #32]
 8005d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d01b      	beq.n	8005d86 <USB_DeactivateEndpoint+0x18a>
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d64:	83fb      	strh	r3, [r7, #30]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	441a      	add	r2, r3
 8005d70:	8bfb      	ldrh	r3, [r7, #30]
 8005d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	83bb      	strh	r3, [r7, #28]
 8005d94:	8bbb      	ldrh	r3, [r7, #28]
 8005d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d01b      	beq.n	8005dd6 <USB_DeactivateEndpoint+0x1da>
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	837b      	strh	r3, [r7, #26]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	441a      	add	r2, r3
 8005dc0:	8b7b      	ldrh	r3, [r7, #26]
 8005dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dec:	833b      	strh	r3, [r7, #24]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	441a      	add	r2, r3
 8005df8:	8b3b      	ldrh	r3, [r7, #24]
 8005dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e24:	82fb      	strh	r3, [r7, #22]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	441a      	add	r2, r3
 8005e30:	8afb      	ldrh	r3, [r7, #22]
 8005e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5c:	82bb      	strh	r3, [r7, #20]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	441a      	add	r2, r3
 8005e68:	8abb      	ldrh	r3, [r7, #20]
 8005e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	8013      	strh	r3, [r2, #0]
 8005e7e:	e0a3      	b.n	8005fc8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005e8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01b      	beq.n	8005ed0 <USB_DeactivateEndpoint+0x2d4>
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	441a      	add	r2, r3
 8005eba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005ede:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01b      	beq.n	8005f20 <USB_DeactivateEndpoint+0x324>
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efe:	853b      	strh	r3, [r7, #40]	; 0x28
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	441a      	add	r2, r3
 8005f0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f36:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	441a      	add	r2, r3
 8005f42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	441a      	add	r2, r3
 8005f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa6:	847b      	strh	r3, [r7, #34]	; 0x22
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3734      	adds	r7, #52	; 0x34
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr

08005fd4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b0c2      	sub	sp, #264	; 0x108
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fe2:	6018      	str	r0, [r3, #0]
 8005fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fec:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	f040 86b7 	bne.w	8006d6e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	429a      	cmp	r2, r3
 800601a:	d908      	bls.n	800602e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800601c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800602c:	e007      	b.n	800603e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800602e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800603e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	7b1b      	ldrb	r3, [r3, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d13a      	bne.n	80060c4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800604e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6959      	ldr	r1, [r3, #20]
 800605a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	88da      	ldrh	r2, [r3, #6]
 8006066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606a:	b29b      	uxth	r3, r3
 800606c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006070:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006074:	6800      	ldr	r0, [r0, #0]
 8006076:	f001 fc9c 	bl	80079b2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800607a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006094:	b29b      	uxth	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4413      	add	r3, r2
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	011a      	lsls	r2, r3, #4
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	4413      	add	r3, r2
 80060b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	801a      	strh	r2, [r3, #0]
 80060c0:	f000 be1f 	b.w	8006d02 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80060c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	78db      	ldrb	r3, [r3, #3]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	f040 8462 	bne.w	800699a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80060d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6a1a      	ldr	r2, [r3, #32]
 80060e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	f240 83df 	bls.w	80068b2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80060f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800611e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	441a      	add	r2, r3
 8006138:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800613c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006144:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614c:	b29b      	uxth	r3, r3
 800614e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6a1a      	ldr	r2, [r3, #32]
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006160:	1ad2      	subs	r2, r2, r3
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800616e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 81c7 	beq.w	8006524 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	633b      	str	r3, [r7, #48]	; 0x30
 80061a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	785b      	ldrb	r3, [r3, #1]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d177      	bne.n	80062a2 <USB_EPStartXfer+0x2ce>
 80061b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	4413      	add	r3, r2
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	011a      	lsls	r2, r3, #4
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	4413      	add	r3, r2
 80061e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006202:	2b3e      	cmp	r3, #62	; 0x3e
 8006204:	d921      	bls.n	800624a <USB_EPStartXfer+0x276>
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620a:	095b      	lsrs	r3, r3, #5
 800620c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <USB_EPStartXfer+0x252>
 800621c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006220:	3b01      	subs	r3, #1
 8006222:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29a      	uxth	r2, r3
 800622c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006230:	b29b      	uxth	r3, r3
 8006232:	029b      	lsls	r3, r3, #10
 8006234:	b29b      	uxth	r3, r3
 8006236:	4313      	orrs	r3, r2
 8006238:	b29b      	uxth	r3, r3
 800623a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006242:	b29a      	uxth	r2, r3
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	e050      	b.n	80062ec <USB_EPStartXfer+0x318>
 800624a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <USB_EPStartXfer+0x294>
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800625c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006260:	b29a      	uxth	r2, r3
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	801a      	strh	r2, [r3, #0]
 8006266:	e041      	b.n	80062ec <USB_EPStartXfer+0x318>
 8006268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626c:	085b      	lsrs	r3, r3, #1
 800626e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <USB_EPStartXfer+0x2b4>
 800627e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006282:	3301      	adds	r3, #1
 8006284:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29a      	uxth	r2, r3
 800628e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006292:	b29b      	uxth	r3, r3
 8006294:	029b      	lsls	r3, r3, #10
 8006296:	b29b      	uxth	r3, r3
 8006298:	4313      	orrs	r3, r2
 800629a:	b29a      	uxth	r2, r3
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	801a      	strh	r2, [r3, #0]
 80062a0:	e024      	b.n	80062ec <USB_EPStartXfer+0x318>
 80062a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d11c      	bne.n	80062ec <USB_EPStartXfer+0x318>
 80062b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	4413      	add	r3, r2
 80062c8:	633b      	str	r3, [r7, #48]	; 0x30
 80062ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	011a      	lsls	r2, r3, #4
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	4413      	add	r3, r2
 80062dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	895b      	ldrh	r3, [r3, #10]
 80062f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6959      	ldr	r1, [r3, #20]
 8006308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630c:	b29b      	uxth	r3, r3
 800630e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006312:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006316:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800631a:	6800      	ldr	r0, [r0, #0]
 800631c:	f001 fb49 	bl	80079b2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695a      	ldr	r2, [r3, #20]
 800632c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006330:	441a      	add	r2, r3
 8006332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800633e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6a1a      	ldr	r2, [r3, #32]
 800634a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	429a      	cmp	r2, r3
 8006358:	d90f      	bls.n	800637a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800635a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6a1a      	ldr	r2, [r3, #32]
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636a:	1ad2      	subs	r2, r2, r3
 800636c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	621a      	str	r2, [r3, #32]
 8006378:	e00e      	b.n	8006398 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800637a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800638a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2200      	movs	r2, #0
 8006396:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d177      	bne.n	8006498 <USB_EPStartXfer+0x4c4>
 80063a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	61bb      	str	r3, [r7, #24]
 80063b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	4413      	add	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	011a      	lsls	r2, r3, #4
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	4413      	add	r3, r2
 80063de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f8:	2b3e      	cmp	r3, #62	; 0x3e
 80063fa:	d921      	bls.n	8006440 <USB_EPStartXfer+0x46c>
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640a:	f003 031f 	and.w	r3, r3, #31
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <USB_EPStartXfer+0x448>
 8006412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006416:	3b01      	subs	r3, #1
 8006418:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29a      	uxth	r2, r3
 8006422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006426:	b29b      	uxth	r3, r3
 8006428:	029b      	lsls	r3, r3, #10
 800642a:	b29b      	uxth	r3, r3
 800642c:	4313      	orrs	r3, r2
 800642e:	b29b      	uxth	r3, r3
 8006430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006438:	b29a      	uxth	r2, r3
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	801a      	strh	r2, [r3, #0]
 800643e:	e056      	b.n	80064ee <USB_EPStartXfer+0x51a>
 8006440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <USB_EPStartXfer+0x48a>
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006456:	b29a      	uxth	r2, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	e047      	b.n	80064ee <USB_EPStartXfer+0x51a>
 800645e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006462:	085b      	lsrs	r3, r3, #1
 8006464:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d004      	beq.n	800647e <USB_EPStartXfer+0x4aa>
 8006474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006478:	3301      	adds	r3, #1
 800647a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29a      	uxth	r2, r3
 8006484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006488:	b29b      	uxth	r3, r3
 800648a:	029b      	lsls	r3, r3, #10
 800648c:	b29b      	uxth	r3, r3
 800648e:	4313      	orrs	r3, r2
 8006490:	b29a      	uxth	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	e02a      	b.n	80064ee <USB_EPStartXfer+0x51a>
 8006498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d122      	bne.n	80064ee <USB_EPStartXfer+0x51a>
 80064a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	623b      	str	r3, [r7, #32]
 80064b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	4413      	add	r3, r2
 80064ca:	623b      	str	r3, [r7, #32]
 80064cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	011a      	lsls	r2, r3, #4
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	4413      	add	r3, r2
 80064de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064e2:	61fb      	str	r3, [r7, #28]
 80064e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	891b      	ldrh	r3, [r3, #8]
 80064fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6959      	ldr	r1, [r3, #20]
 800650a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650e:	b29b      	uxth	r3, r3
 8006510:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006514:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006518:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800651c:	6800      	ldr	r0, [r0, #0]
 800651e:	f001 fa48 	bl	80079b2 <USB_WritePMA>
 8006522:	e3ee      	b.n	8006d02 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	785b      	ldrb	r3, [r3, #1]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d177      	bne.n	8006624 <USB_EPStartXfer+0x650>
 8006534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654e:	b29b      	uxth	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006554:	4413      	add	r3, r2
 8006556:	64bb      	str	r3, [r7, #72]	; 0x48
 8006558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	011a      	lsls	r2, r3, #4
 8006566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006568:	4413      	add	r3, r2
 800656a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800656e:	647b      	str	r3, [r7, #68]	; 0x44
 8006570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800657a:	b29a      	uxth	r2, r3
 800657c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006584:	2b3e      	cmp	r3, #62	; 0x3e
 8006586:	d921      	bls.n	80065cc <USB_EPStartXfer+0x5f8>
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658c:	095b      	lsrs	r3, r3, #5
 800658e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006596:	f003 031f 	and.w	r3, r3, #31
 800659a:	2b00      	cmp	r3, #0
 800659c:	d104      	bne.n	80065a8 <USB_EPStartXfer+0x5d4>
 800659e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065a2:	3b01      	subs	r3, #1
 80065a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80065a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	029b      	lsls	r3, r3, #10
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	4313      	orrs	r3, r2
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	e056      	b.n	800667a <USB_EPStartXfer+0x6a6>
 80065cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10a      	bne.n	80065ea <USB_EPStartXfer+0x616>
 80065d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	e047      	b.n	800667a <USB_EPStartXfer+0x6a6>
 80065ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ee:	085b      	lsrs	r3, r3, #1
 80065f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d004      	beq.n	800660a <USB_EPStartXfer+0x636>
 8006600:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006604:	3301      	adds	r3, #1
 8006606:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800660a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29a      	uxth	r2, r3
 8006610:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006614:	b29b      	uxth	r3, r3
 8006616:	029b      	lsls	r3, r3, #10
 8006618:	b29b      	uxth	r3, r3
 800661a:	4313      	orrs	r3, r2
 800661c:	b29a      	uxth	r2, r3
 800661e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	e02a      	b.n	800667a <USB_EPStartXfer+0x6a6>
 8006624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d122      	bne.n	800667a <USB_EPStartXfer+0x6a6>
 8006634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	653b      	str	r3, [r7, #80]	; 0x50
 8006640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664e:	b29b      	uxth	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006654:	4413      	add	r3, r2
 8006656:	653b      	str	r3, [r7, #80]	; 0x50
 8006658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	011a      	lsls	r2, r3, #4
 8006666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006668:	4413      	add	r3, r2
 800666a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800666e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006674:	b29a      	uxth	r2, r3
 8006676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006678:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800667a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	891b      	ldrh	r3, [r3, #8]
 8006686:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800668a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6959      	ldr	r1, [r3, #20]
 8006696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669a:	b29b      	uxth	r3, r3
 800669c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066a8:	6800      	ldr	r0, [r0, #0]
 80066aa:	f001 f982 	bl	80079b2 <USB_WritePMA>
            ep->xfer_buff += len;
 80066ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066be:	441a      	add	r2, r3
 80066c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6a1a      	ldr	r2, [r3, #32]
 80066d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d90f      	bls.n	8006708 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80066e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6a1a      	ldr	r2, [r3, #32]
 80066f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f8:	1ad2      	subs	r2, r2, r3
 80066fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	621a      	str	r2, [r3, #32]
 8006706:	e00e      	b.n	8006726 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2200      	movs	r2, #0
 8006724:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	643b      	str	r3, [r7, #64]	; 0x40
 8006732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d177      	bne.n	8006832 <USB_EPStartXfer+0x85e>
 8006742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	63bb      	str	r3, [r7, #56]	; 0x38
 800674e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675c:	b29b      	uxth	r3, r3
 800675e:	461a      	mov	r2, r3
 8006760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006762:	4413      	add	r3, r2
 8006764:	63bb      	str	r3, [r7, #56]	; 0x38
 8006766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	011a      	lsls	r2, r3, #4
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	4413      	add	r3, r2
 8006778:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800677c:	637b      	str	r3, [r7, #52]	; 0x34
 800677e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006788:	b29a      	uxth	r2, r3
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678c:	801a      	strh	r2, [r3, #0]
 800678e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006792:	2b3e      	cmp	r3, #62	; 0x3e
 8006794:	d921      	bls.n	80067da <USB_EPStartXfer+0x806>
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679a:	095b      	lsrs	r3, r3, #5
 800679c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a4:	f003 031f 	and.w	r3, r3, #31
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d104      	bne.n	80067b6 <USB_EPStartXfer+0x7e2>
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b0:	3b01      	subs	r3, #1
 80067b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80067b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	029b      	lsls	r3, r3, #10
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	4313      	orrs	r3, r2
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d6:	801a      	strh	r2, [r3, #0]
 80067d8:	e050      	b.n	800687c <USB_EPStartXfer+0x8a8>
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <USB_EPStartXfer+0x824>
 80067e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f4:	801a      	strh	r2, [r3, #0]
 80067f6:	e041      	b.n	800687c <USB_EPStartXfer+0x8a8>
 80067f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d004      	beq.n	8006818 <USB_EPStartXfer+0x844>
 800680e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006812:	3301      	adds	r3, #1
 8006814:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29a      	uxth	r2, r3
 800681e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006822:	b29b      	uxth	r3, r3
 8006824:	029b      	lsls	r3, r3, #10
 8006826:	b29b      	uxth	r3, r3
 8006828:	4313      	orrs	r3, r2
 800682a:	b29a      	uxth	r2, r3
 800682c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682e:	801a      	strh	r2, [r3, #0]
 8006830:	e024      	b.n	800687c <USB_EPStartXfer+0x8a8>
 8006832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	785b      	ldrb	r3, [r3, #1]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d11c      	bne.n	800687c <USB_EPStartXfer+0x8a8>
 8006842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006850:	b29b      	uxth	r3, r3
 8006852:	461a      	mov	r2, r3
 8006854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006856:	4413      	add	r3, r2
 8006858:	643b      	str	r3, [r7, #64]	; 0x40
 800685a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	011a      	lsls	r2, r3, #4
 8006868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686a:	4413      	add	r3, r2
 800686c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006876:	b29a      	uxth	r2, r3
 8006878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800687c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	895b      	ldrh	r3, [r3, #10]
 8006888:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800688c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6959      	ldr	r1, [r3, #20]
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689c:	b29b      	uxth	r3, r3
 800689e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068aa:	6800      	ldr	r0, [r0, #0]
 80068ac:	f001 f881 	bl	80079b2 <USB_WritePMA>
 80068b0:	e227      	b.n	8006d02 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80068b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80068c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80068e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80068ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800690a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691a:	b29b      	uxth	r3, r3
 800691c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800691e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006922:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	65fb      	str	r3, [r7, #92]	; 0x5c
 800692a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006938:	b29b      	uxth	r3, r3
 800693a:	461a      	mov	r2, r3
 800693c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800693e:	4413      	add	r3, r2
 8006940:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	011a      	lsls	r2, r3, #4
 8006950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006952:	4413      	add	r3, r2
 8006954:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006958:	65bb      	str	r3, [r7, #88]	; 0x58
 800695a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695e:	b29a      	uxth	r2, r3
 8006960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006962:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	891b      	ldrh	r3, [r3, #8]
 8006970:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6959      	ldr	r1, [r3, #20]
 8006980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006984:	b29b      	uxth	r3, r3
 8006986:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800698a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800698e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006992:	6800      	ldr	r0, [r0, #0]
 8006994:	f001 f80d 	bl	80079b2 <USB_WritePMA>
 8006998:	e1b3      	b.n	8006d02 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800699a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6a1a      	ldr	r2, [r3, #32]
 80069a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069aa:	1ad2      	subs	r2, r2, r3
 80069ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 80c6 	beq.w	8006b6c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	673b      	str	r3, [r7, #112]	; 0x70
 80069ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d177      	bne.n	8006aec <USB_EPStartXfer+0xb18>
 80069fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a1c:	4413      	add	r3, r2
 8006a1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	011a      	lsls	r2, r3, #4
 8006a2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a30:	4413      	add	r3, r2
 8006a32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a36:	667b      	str	r3, [r7, #100]	; 0x64
 8006a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a4e:	d921      	bls.n	8006a94 <USB_EPStartXfer+0xac0>
 8006a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5e:	f003 031f 	and.w	r3, r3, #31
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <USB_EPStartXfer+0xa9c>
 8006a66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	029b      	lsls	r3, r3, #10
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	4313      	orrs	r3, r2
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	e050      	b.n	8006b36 <USB_EPStartXfer+0xb62>
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <USB_EPStartXfer+0xade>
 8006a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aae:	801a      	strh	r2, [r3, #0]
 8006ab0:	e041      	b.n	8006b36 <USB_EPStartXfer+0xb62>
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <USB_EPStartXfer+0xafe>
 8006ac8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006acc:	3301      	adds	r3, #1
 8006ace:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	029b      	lsls	r3, r3, #10
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ae8:	801a      	strh	r2, [r3, #0]
 8006aea:	e024      	b.n	8006b36 <USB_EPStartXfer+0xb62>
 8006aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	785b      	ldrb	r3, [r3, #1]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d11c      	bne.n	8006b36 <USB_EPStartXfer+0xb62>
 8006afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b10:	4413      	add	r3, r2
 8006b12:	673b      	str	r3, [r7, #112]	; 0x70
 8006b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	011a      	lsls	r2, r3, #4
 8006b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b24:	4413      	add	r3, r2
 8006b26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	895b      	ldrh	r3, [r3, #10]
 8006b42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6959      	ldr	r1, [r3, #20]
 8006b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b64:	6800      	ldr	r0, [r0, #0]
 8006b66:	f000 ff24 	bl	80079b2 <USB_WritePMA>
 8006b6a:	e0ca      	b.n	8006d02 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	785b      	ldrb	r3, [r3, #1]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d177      	bne.n	8006c6c <USB_EPStartXfer+0xc98>
 8006b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b9c:	4413      	add	r3, r2
 8006b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	011a      	lsls	r2, r3, #4
 8006bae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8006bce:	d921      	bls.n	8006c14 <USB_EPStartXfer+0xc40>
 8006bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <USB_EPStartXfer+0xc1c>
 8006be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006bea:	3b01      	subs	r3, #1
 8006bec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	029b      	lsls	r3, r3, #10
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	4313      	orrs	r3, r2
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e05c      	b.n	8006cce <USB_EPStartXfer+0xcfa>
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <USB_EPStartXfer+0xc5e>
 8006c1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c2e:	801a      	strh	r2, [r3, #0]
 8006c30:	e04d      	b.n	8006cce <USB_EPStartXfer+0xcfa>
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d004      	beq.n	8006c52 <USB_EPStartXfer+0xc7e>
 8006c48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	029b      	lsls	r3, r3, #10
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	4313      	orrs	r3, r2
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	e030      	b.n	8006cce <USB_EPStartXfer+0xcfa>
 8006c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	785b      	ldrb	r3, [r3, #1]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d128      	bne.n	8006cce <USB_EPStartXfer+0xcfa>
 8006c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	011a      	lsls	r2, r3, #4
 8006cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cb8:	4413      	add	r3, r2
 8006cba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ccc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	891b      	ldrh	r3, [r3, #8]
 8006cda:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6959      	ldr	r1, [r3, #20]
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cf4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006cf8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006cfc:	6800      	ldr	r0, [r0, #0]
 8006cfe:	f000 fe58 	bl	80079b2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d28:	817b      	strh	r3, [r7, #10]
 8006d2a:	897b      	ldrh	r3, [r7, #10]
 8006d2c:	f083 0310 	eor.w	r3, r3, #16
 8006d30:	817b      	strh	r3, [r7, #10]
 8006d32:	897b      	ldrh	r3, [r7, #10]
 8006d34:	f083 0320 	eor.w	r3, r3, #32
 8006d38:	817b      	strh	r3, [r7, #10]
 8006d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	441a      	add	r2, r3
 8006d54:	897b      	ldrh	r3, [r7, #10]
 8006d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	8013      	strh	r3, [r2, #0]
 8006d6a:	f000 bcde 	b.w	800772a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	7b1b      	ldrb	r3, [r3, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f040 80bb 	bne.w	8006ef6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699a      	ldr	r2, [r3, #24]
 8006d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d917      	bls.n	8006dcc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699a      	ldr	r2, [r3, #24]
 8006db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dbc:	1ad2      	subs	r2, r2, r3
 8006dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	619a      	str	r2, [r3, #24]
 8006dca:	e00e      	b.n	8006dea <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2200      	movs	r2, #0
 8006de8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e0e:	4413      	add	r3, r2
 8006e10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	011a      	lsls	r2, r3, #4
 8006e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e26:	4413      	add	r3, r2
 8006e28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e42:	801a      	strh	r2, [r3, #0]
 8006e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e48:	2b3e      	cmp	r3, #62	; 0x3e
 8006e4a:	d924      	bls.n	8006e96 <USB_EPStartXfer+0xec2>
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e50:	095b      	lsrs	r3, r3, #5
 8006e52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5a:	f003 031f 	and.w	r3, r3, #31
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d104      	bne.n	8006e6c <USB_EPStartXfer+0xe98>
 8006e62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e66:	3b01      	subs	r3, #1
 8006e68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	029b      	lsls	r3, r3, #10
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e90:	801a      	strh	r2, [r3, #0]
 8006e92:	f000 bc10 	b.w	80076b6 <USB_EPStartXfer+0x16e2>
 8006e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10c      	bne.n	8006eb8 <USB_EPStartXfer+0xee4>
 8006e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006eb4:	801a      	strh	r2, [r3, #0]
 8006eb6:	e3fe      	b.n	80076b6 <USB_EPStartXfer+0x16e2>
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d004      	beq.n	8006ed8 <USB_EPStartXfer+0xf04>
 8006ece:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	029b      	lsls	r3, r3, #10
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	4313      	orrs	r3, r2
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ef2:	801a      	strh	r2, [r3, #0]
 8006ef4:	e3df      	b.n	80076b6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	78db      	ldrb	r3, [r3, #3]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	f040 8218 	bne.w	8007338 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	785b      	ldrb	r3, [r3, #1]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f040 809d 	bne.w	8007054 <USB_EPStartXfer+0x1080>
 8006f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f3e:	4413      	add	r3, r2
 8006f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	011a      	lsls	r2, r3, #4
 8006f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f56:	4413      	add	r3, r2
 8006f58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f72:	801a      	strh	r2, [r3, #0]
 8006f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	2b3e      	cmp	r3, #62	; 0x3e
 8006f82:	d92b      	bls.n	8006fdc <USB_EPStartXfer+0x1008>
 8006f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	095b      	lsrs	r3, r3, #5
 8006f92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f003 031f 	and.w	r3, r3, #31
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <USB_EPStartXfer+0xfe0>
 8006faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	029b      	lsls	r3, r3, #10
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006fd8:	801a      	strh	r2, [r3, #0]
 8006fda:	e070      	b.n	80070be <USB_EPStartXfer+0x10ea>
 8006fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10c      	bne.n	8007006 <USB_EPStartXfer+0x1032>
 8006fec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007002:	801a      	strh	r2, [r3, #0]
 8007004:	e05b      	b.n	80070be <USB_EPStartXfer+0x10ea>
 8007006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	085b      	lsrs	r3, r3, #1
 8007014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <USB_EPStartXfer+0x1062>
 800702c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007030:	3301      	adds	r3, #1
 8007032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007036:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29a      	uxth	r2, r3
 800703e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007042:	b29b      	uxth	r3, r3
 8007044:	029b      	lsls	r3, r3, #10
 8007046:	b29b      	uxth	r3, r3
 8007048:	4313      	orrs	r3, r2
 800704a:	b29a      	uxth	r2, r3
 800704c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007050:	801a      	strh	r2, [r3, #0]
 8007052:	e034      	b.n	80070be <USB_EPStartXfer+0x10ea>
 8007054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	785b      	ldrb	r3, [r3, #1]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d12c      	bne.n	80070be <USB_EPStartXfer+0x10ea>
 8007064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007068:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007080:	b29b      	uxth	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007088:	4413      	add	r3, r2
 800708a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800708e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	011a      	lsls	r2, r3, #4
 800709c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070a0:	4413      	add	r3, r2
 80070a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80070cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	785b      	ldrb	r3, [r3, #1]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f040 809d 	bne.w	8007218 <USB_EPStartXfer+0x1244>
 80070de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	461a      	mov	r2, r3
 80070fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007102:	4413      	add	r3, r2
 8007104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	011a      	lsls	r2, r3, #4
 8007116:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800711a:	4413      	add	r3, r2
 800711c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
 800712c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007130:	b29a      	uxth	r2, r3
 8007132:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007136:	801a      	strh	r2, [r3, #0]
 8007138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b3e      	cmp	r3, #62	; 0x3e
 8007146:	d92b      	bls.n	80071a0 <USB_EPStartXfer+0x11cc>
 8007148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	095b      	lsrs	r3, r3, #5
 8007156:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800715a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	2b00      	cmp	r3, #0
 800716c:	d104      	bne.n	8007178 <USB_EPStartXfer+0x11a4>
 800716e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007172:	3b01      	subs	r3, #1
 8007174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	b29a      	uxth	r2, r3
 8007180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007184:	b29b      	uxth	r3, r3
 8007186:	029b      	lsls	r3, r3, #10
 8007188:	b29b      	uxth	r3, r3
 800718a:	4313      	orrs	r3, r2
 800718c:	b29b      	uxth	r3, r3
 800718e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007196:	b29a      	uxth	r2, r3
 8007198:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800719c:	801a      	strh	r2, [r3, #0]
 800719e:	e069      	b.n	8007274 <USB_EPStartXfer+0x12a0>
 80071a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10c      	bne.n	80071ca <USB_EPStartXfer+0x11f6>
 80071b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071c6:	801a      	strh	r2, [r3, #0]
 80071c8:	e054      	b.n	8007274 <USB_EPStartXfer+0x12a0>
 80071ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <USB_EPStartXfer+0x1226>
 80071f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f4:	3301      	adds	r3, #1
 80071f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	b29a      	uxth	r2, r3
 8007202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007206:	b29b      	uxth	r3, r3
 8007208:	029b      	lsls	r3, r3, #10
 800720a:	b29b      	uxth	r3, r3
 800720c:	4313      	orrs	r3, r2
 800720e:	b29a      	uxth	r2, r3
 8007210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007214:	801a      	strh	r2, [r3, #0]
 8007216:	e02d      	b.n	8007274 <USB_EPStartXfer+0x12a0>
 8007218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d125      	bne.n	8007274 <USB_EPStartXfer+0x12a0>
 8007228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007236:	b29b      	uxth	r3, r3
 8007238:	461a      	mov	r2, r3
 800723a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800723e:	4413      	add	r3, r2
 8007240:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	011a      	lsls	r2, r3, #4
 8007252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007256:	4413      	add	r3, r2
 8007258:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800725c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	b29a      	uxth	r2, r3
 800726e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007272:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 8218 	beq.w	80076b6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80072aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d005      	beq.n	80072be <USB_EPStartXfer+0x12ea>
 80072b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80072b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10d      	bne.n	80072da <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80072c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f040 81f5 	bne.w	80076b6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f040 81ee 	bne.w	80076b6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80072da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007300:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	441a      	add	r2, r3
 800731e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800732a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800732e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007332:	b29b      	uxth	r3, r3
 8007334:	8013      	strh	r3, [r2, #0]
 8007336:	e1be      	b.n	80076b6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800733c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	78db      	ldrb	r3, [r3, #3]
 8007344:	2b01      	cmp	r3, #1
 8007346:	f040 81b4 	bne.w	80076b2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800734a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	429a      	cmp	r2, r3
 8007364:	d917      	bls.n	8007396 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007386:	1ad2      	subs	r2, r2, r3
 8007388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	619a      	str	r2, [r3, #24]
 8007394:	e00e      	b.n	80073b4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800739a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80073a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2200      	movs	r2, #0
 80073b2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80073b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	785b      	ldrb	r3, [r3, #1]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f040 8085 	bne.w	80074d0 <USB_EPStartXfer+0x14fc>
 80073c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	461a      	mov	r2, r3
 80073e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073ea:	4413      	add	r3, r2
 80073ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	011a      	lsls	r2, r3, #4
 80073fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007402:	4413      	add	r3, r2
 8007404:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007408:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800740c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29b      	uxth	r3, r3
 8007414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007418:	b29a      	uxth	r2, r3
 800741a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800741e:	801a      	strh	r2, [r3, #0]
 8007420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007424:	2b3e      	cmp	r3, #62	; 0x3e
 8007426:	d923      	bls.n	8007470 <USB_EPStartXfer+0x149c>
 8007428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800742c:	095b      	lsrs	r3, r3, #5
 800742e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	2b00      	cmp	r3, #0
 800743c:	d104      	bne.n	8007448 <USB_EPStartXfer+0x1474>
 800743e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007442:	3b01      	subs	r3, #1
 8007444:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007448:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	b29a      	uxth	r2, r3
 8007450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007454:	b29b      	uxth	r3, r3
 8007456:	029b      	lsls	r3, r3, #10
 8007458:	b29b      	uxth	r3, r3
 800745a:	4313      	orrs	r3, r2
 800745c:	b29b      	uxth	r3, r3
 800745e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007466:	b29a      	uxth	r2, r3
 8007468:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800746c:	801a      	strh	r2, [r3, #0]
 800746e:	e060      	b.n	8007532 <USB_EPStartXfer+0x155e>
 8007470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10c      	bne.n	8007492 <USB_EPStartXfer+0x14be>
 8007478:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007488:	b29a      	uxth	r2, r3
 800748a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800748e:	801a      	strh	r2, [r3, #0]
 8007490:	e04f      	b.n	8007532 <USB_EPStartXfer+0x155e>
 8007492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007496:	085b      	lsrs	r3, r3, #1
 8007498:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800749c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d004      	beq.n	80074b2 <USB_EPStartXfer+0x14de>
 80074a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ac:	3301      	adds	r3, #1
 80074ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074be:	b29b      	uxth	r3, r3
 80074c0:	029b      	lsls	r3, r3, #10
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	4313      	orrs	r3, r2
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074cc:	801a      	strh	r2, [r3, #0]
 80074ce:	e030      	b.n	8007532 <USB_EPStartXfer+0x155e>
 80074d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d128      	bne.n	8007532 <USB_EPStartXfer+0x155e>
 80074e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80074ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	461a      	mov	r2, r3
 8007500:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007504:	4413      	add	r3, r2
 8007506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800750a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	011a      	lsls	r2, r3, #4
 8007518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800751c:	4413      	add	r3, r2
 800751e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007522:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800752a:	b29a      	uxth	r2, r3
 800752c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007530:	801a      	strh	r2, [r3, #0]
 8007532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f040 8085 	bne.w	800765c <USB_EPStartXfer+0x1688>
 8007552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800756e:	b29b      	uxth	r3, r3
 8007570:	461a      	mov	r2, r3
 8007572:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007576:	4413      	add	r3, r2
 8007578:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800757c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	011a      	lsls	r2, r3, #4
 800758a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800758e:	4413      	add	r3, r2
 8007590:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007598:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075aa:	801a      	strh	r2, [r3, #0]
 80075ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b0:	2b3e      	cmp	r3, #62	; 0x3e
 80075b2:	d923      	bls.n	80075fc <USB_EPStartXfer+0x1628>
 80075b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b8:	095b      	lsrs	r3, r3, #5
 80075ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075c2:	f003 031f 	and.w	r3, r3, #31
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d104      	bne.n	80075d4 <USB_EPStartXfer+0x1600>
 80075ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075ce:	3b01      	subs	r3, #1
 80075d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	b29a      	uxth	r2, r3
 80075dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	029b      	lsls	r3, r3, #10
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	4313      	orrs	r3, r2
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075f8:	801a      	strh	r2, [r3, #0]
 80075fa:	e05c      	b.n	80076b6 <USB_EPStartXfer+0x16e2>
 80075fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10c      	bne.n	800761e <USB_EPStartXfer+0x164a>
 8007604:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007614:	b29a      	uxth	r2, r3
 8007616:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800761a:	801a      	strh	r2, [r3, #0]
 800761c:	e04b      	b.n	80076b6 <USB_EPStartXfer+0x16e2>
 800761e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007622:	085b      	lsrs	r3, r3, #1
 8007624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	2b00      	cmp	r3, #0
 8007632:	d004      	beq.n	800763e <USB_EPStartXfer+0x166a>
 8007634:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007638:	3301      	adds	r3, #1
 800763a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800763e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29a      	uxth	r2, r3
 8007646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800764a:	b29b      	uxth	r3, r3
 800764c:	029b      	lsls	r3, r3, #10
 800764e:	b29b      	uxth	r3, r3
 8007650:	4313      	orrs	r3, r2
 8007652:	b29a      	uxth	r2, r3
 8007654:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007658:	801a      	strh	r2, [r3, #0]
 800765a:	e02c      	b.n	80076b6 <USB_EPStartXfer+0x16e2>
 800765c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	785b      	ldrb	r3, [r3, #1]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d124      	bne.n	80076b6 <USB_EPStartXfer+0x16e2>
 800766c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800767a:	b29b      	uxth	r3, r3
 800767c:	461a      	mov	r2, r3
 800767e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007682:	4413      	add	r3, r2
 8007684:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	011a      	lsls	r2, r3, #4
 8007696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800769a:	4413      	add	r3, r2
 800769c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076ae:	801a      	strh	r2, [r3, #0]
 80076b0:	e001      	b.n	80076b6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e03a      	b.n	800772c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076dc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80076e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80076e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076e8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80076ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80076f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80076f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800771a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007726:	b29b      	uxth	r3, r3
 8007728:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007736:	b480      	push	{r7}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	785b      	ldrb	r3, [r3, #1]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d020      	beq.n	800778a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800775a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800775e:	81bb      	strh	r3, [r7, #12]
 8007760:	89bb      	ldrh	r3, [r7, #12]
 8007762:	f083 0310 	eor.w	r3, r3, #16
 8007766:	81bb      	strh	r3, [r7, #12]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	441a      	add	r2, r3
 8007772:	89bb      	ldrh	r3, [r7, #12]
 8007774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800777c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007784:	b29b      	uxth	r3, r3
 8007786:	8013      	strh	r3, [r2, #0]
 8007788:	e01f      	b.n	80077ca <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	b29b      	uxth	r3, r3
 8007798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800779c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a0:	81fb      	strh	r3, [r7, #14]
 80077a2:	89fb      	ldrh	r3, [r7, #14]
 80077a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077a8:	81fb      	strh	r3, [r7, #14]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	441a      	add	r2, r3
 80077b4:	89fb      	ldrh	r3, [r7, #14]
 80077b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bc80      	pop	{r7}
 80077d4:	4770      	bx	lr

080077d6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b087      	sub	sp, #28
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	7b1b      	ldrb	r3, [r3, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f040 809d 	bne.w	8007924 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d04c      	beq.n	800788c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	823b      	strh	r3, [r7, #16]
 8007800:	8a3b      	ldrh	r3, [r7, #16]
 8007802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d01b      	beq.n	8007842 <USB_EPClearStall+0x6c>
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	b29b      	uxth	r3, r3
 8007818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007820:	81fb      	strh	r3, [r7, #14]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	441a      	add	r2, r3
 800782c:	89fb      	ldrh	r3, [r7, #14]
 800782e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800783a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800783e:	b29b      	uxth	r3, r3
 8007840:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	78db      	ldrb	r3, [r3, #3]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d06c      	beq.n	8007924 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800785c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007860:	81bb      	strh	r3, [r7, #12]
 8007862:	89bb      	ldrh	r3, [r7, #12]
 8007864:	f083 0320 	eor.w	r3, r3, #32
 8007868:	81bb      	strh	r3, [r7, #12]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	441a      	add	r2, r3
 8007874:	89bb      	ldrh	r3, [r7, #12]
 8007876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800787a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800787e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007886:	b29b      	uxth	r3, r3
 8007888:	8013      	strh	r3, [r2, #0]
 800788a:	e04b      	b.n	8007924 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	82fb      	strh	r3, [r7, #22]
 800789a:	8afb      	ldrh	r3, [r7, #22]
 800789c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01b      	beq.n	80078dc <USB_EPClearStall+0x106>
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ba:	82bb      	strh	r3, [r7, #20]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	441a      	add	r2, r3
 80078c6:	8abb      	ldrh	r3, [r7, #20]
 80078c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d8:	b29b      	uxth	r3, r3
 80078da:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f2:	827b      	strh	r3, [r7, #18]
 80078f4:	8a7b      	ldrh	r3, [r7, #18]
 80078f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078fa:	827b      	strh	r3, [r7, #18]
 80078fc:	8a7b      	ldrh	r3, [r7, #18]
 80078fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007902:	827b      	strh	r3, [r7, #18]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	441a      	add	r2, r3
 800790e:	8a7b      	ldrh	r3, [r7, #18]
 8007910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800791c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007920:	b29b      	uxth	r3, r3
 8007922:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	bc80      	pop	{r7}
 800792e:	4770      	bx	lr

08007930 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	460b      	mov	r3, r1
 800793a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800793c:	78fb      	ldrb	r3, [r7, #3]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d103      	bne.n	800794a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2280      	movs	r2, #128	; 0x80
 8007946:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	bc80      	pop	{r7}
 8007954:	4770      	bx	lr

08007956 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr

0800796a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	bc80      	pop	{r7}
 800797c:	4770      	bx	lr

0800797e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800797e:	b480      	push	{r7}
 8007980:	b085      	sub	sp, #20
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800798c:	b29b      	uxth	r3, r3
 800798e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007990:	68fb      	ldr	r3, [r7, #12]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	bc80      	pop	{r7}
 800799a:	4770      	bx	lr

0800799c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bc80      	pop	{r7}
 80079b0:	4770      	bx	lr

080079b2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b08b      	sub	sp, #44	; 0x2c
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	4611      	mov	r1, r2
 80079be:	461a      	mov	r2, r3
 80079c0:	460b      	mov	r3, r1
 80079c2:	80fb      	strh	r3, [r7, #6]
 80079c4:	4613      	mov	r3, r2
 80079c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80079c8:	88bb      	ldrh	r3, [r7, #4]
 80079ca:	3301      	adds	r3, #1
 80079cc:	085b      	lsrs	r3, r3, #1
 80079ce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079d8:	88fb      	ldrh	r3, [r7, #6]
 80079da:	005a      	lsls	r2, r3, #1
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079e4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
 80079ea:	e01e      	b.n	8007a2a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	3301      	adds	r3, #1
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	021b      	lsls	r3, r3, #8
 80079fa:	b21a      	sxth	r2, r3
 80079fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	b21b      	sxth	r3, r3
 8007a04:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	8a7a      	ldrh	r2, [r7, #18]
 8007a0a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	3302      	adds	r3, #2
 8007a10:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	3302      	adds	r3, #2
 8007a16:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	3301      	adds	r3, #1
 8007a22:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	3b01      	subs	r3, #1
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1dd      	bne.n	80079ec <USB_WritePMA+0x3a>
  }
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	372c      	adds	r7, #44	; 0x2c
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr

08007a3c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b08b      	sub	sp, #44	; 0x2c
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4611      	mov	r1, r2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	80fb      	strh	r3, [r7, #6]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007a52:	88bb      	ldrh	r3, [r7, #4]
 8007a54:	085b      	lsrs	r3, r3, #1
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	005a      	lsls	r2, r3, #1
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a6e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
 8007a74:	e01b      	b.n	8007aae <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	3302      	adds	r3, #2
 8007a82:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	0a1b      	lsrs	r3, r3, #8
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	3302      	adds	r3, #2
 8007aa6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e0      	bne.n	8007a76 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007ab4:	88bb      	ldrh	r3, [r7, #4]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d007      	beq.n	8007ad0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	701a      	strb	r2, [r3, #0]
  }
}
 8007ad0:	bf00      	nop
 8007ad2:	372c      	adds	r7, #44	; 0x2c
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr

08007ada <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	7c1b      	ldrb	r3, [r3, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d115      	bne.n	8007b1e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007af6:	2202      	movs	r2, #2
 8007af8:	2181      	movs	r1, #129	; 0x81
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 fe87 	bl	800980e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f001 fe7d 	bl	800980e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007b1c:	e012      	b.n	8007b44 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b1e:	2340      	movs	r3, #64	; 0x40
 8007b20:	2202      	movs	r2, #2
 8007b22:	2181      	movs	r1, #129	; 0x81
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 fe72 	bl	800980e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b30:	2340      	movs	r3, #64	; 0x40
 8007b32:	2202      	movs	r2, #2
 8007b34:	2101      	movs	r1, #1
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f001 fe69 	bl	800980e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b44:	2308      	movs	r3, #8
 8007b46:	2203      	movs	r2, #3
 8007b48:	2182      	movs	r1, #130	; 0x82
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 fe5f 	bl	800980e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b56:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007b5a:	f001 ff7f 	bl	8009a5c <USBD_static_malloc>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d102      	bne.n	8007b76 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007b70:	2301      	movs	r3, #1
 8007b72:	73fb      	strb	r3, [r7, #15]
 8007b74:	e026      	b.n	8007bc4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	7c1b      	ldrb	r3, [r3, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d109      	bne.n	8007bb4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007baa:	2101      	movs	r1, #1
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f001 ff1f 	bl	80099f0 <USBD_LL_PrepareReceive>
 8007bb2:	e007      	b.n	8007bc4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bba:	2340      	movs	r3, #64	; 0x40
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 ff16 	bl	80099f0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007bde:	2181      	movs	r1, #129	; 0x81
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 fe3a 	bl	800985a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007bec:	2101      	movs	r1, #1
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 fe33 	bl	800985a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007bfc:	2182      	movs	r1, #130	; 0x82
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 fe2b 	bl	800985a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00e      	beq.n	8007c32 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c24:	4618      	mov	r0, r3
 8007c26:	f001 ff25 	bl	8009a74 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d039      	beq.n	8007cda <USBD_CDC_Setup+0x9e>
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	d17f      	bne.n	8007d6a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	88db      	ldrh	r3, [r3, #6]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d029      	beq.n	8007cc6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	b25b      	sxtb	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	da11      	bge.n	8007ca0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007c88:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	88d2      	ldrh	r2, [r2, #6]
 8007c8e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007c90:	6939      	ldr	r1, [r7, #16]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	88db      	ldrh	r3, [r3, #6]
 8007c96:	461a      	mov	r2, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 fa0a 	bl	80090b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007c9e:	e06b      	b.n	8007d78 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	785a      	ldrb	r2, [r3, #1]
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	88db      	ldrh	r3, [r3, #6]
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007cb6:	6939      	ldr	r1, [r7, #16]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	88db      	ldrh	r3, [r3, #6]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fa25 	bl	800910e <USBD_CtlPrepareRx>
      break;
 8007cc4:	e058      	b.n	8007d78 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	7850      	ldrb	r0, [r2, #1]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	4798      	blx	r3
      break;
 8007cd8:	e04e      	b.n	8007d78 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	785b      	ldrb	r3, [r3, #1]
 8007cde:	2b0b      	cmp	r3, #11
 8007ce0:	d02e      	beq.n	8007d40 <USBD_CDC_Setup+0x104>
 8007ce2:	2b0b      	cmp	r3, #11
 8007ce4:	dc38      	bgt.n	8007d58 <USBD_CDC_Setup+0x11c>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <USBD_CDC_Setup+0xb4>
 8007cea:	2b0a      	cmp	r3, #10
 8007cec:	d014      	beq.n	8007d18 <USBD_CDC_Setup+0xdc>
 8007cee:	e033      	b.n	8007d58 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	d107      	bne.n	8007d0a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007cfa:	f107 030c 	add.w	r3, r7, #12
 8007cfe:	2202      	movs	r2, #2
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 f9d5 	bl	80090b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d08:	e02e      	b.n	8007d68 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f001 f966 	bl	8008fde <USBD_CtlError>
            ret = USBD_FAIL;
 8007d12:	2302      	movs	r3, #2
 8007d14:	75fb      	strb	r3, [r7, #23]
          break;
 8007d16:	e027      	b.n	8007d68 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d107      	bne.n	8007d32 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d22:	f107 030f 	add.w	r3, r7, #15
 8007d26:	2201      	movs	r2, #1
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 f9c1 	bl	80090b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d30:	e01a      	b.n	8007d68 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 f952 	bl	8008fde <USBD_CtlError>
            ret = USBD_FAIL;
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d3e:	e013      	b.n	8007d68 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d00d      	beq.n	8007d66 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 f946 	bl	8008fde <USBD_CtlError>
            ret = USBD_FAIL;
 8007d52:	2302      	movs	r3, #2
 8007d54:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d56:	e006      	b.n	8007d66 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 f93f 	bl	8008fde <USBD_CtlError>
          ret = USBD_FAIL;
 8007d60:	2302      	movs	r3, #2
 8007d62:	75fb      	strb	r3, [r7, #23]
          break;
 8007d64:	e000      	b.n	8007d68 <USBD_CDC_Setup+0x12c>
          break;
 8007d66:	bf00      	nop
      }
      break;
 8007d68:	e006      	b.n	8007d78 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 f936 	bl	8008fde <USBD_CtlError>
      ret = USBD_FAIL;
 8007d72:	2302      	movs	r3, #2
 8007d74:	75fb      	strb	r3, [r7, #23]
      break;
 8007d76:	bf00      	nop
  }

  return ret;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d94:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d9c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d03a      	beq.n	8007e1e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007da8:	78fa      	ldrb	r2, [r7, #3]
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	4613      	mov	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	331c      	adds	r3, #28
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d029      	beq.n	8007e12 <USBD_CDC_DataIn+0x90>
 8007dbe:	78fa      	ldrb	r2, [r7, #3]
 8007dc0:	6879      	ldr	r1, [r7, #4]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	440b      	add	r3, r1
 8007dcc:	331c      	adds	r3, #28
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	78f9      	ldrb	r1, [r7, #3]
 8007dd2:	68b8      	ldr	r0, [r7, #8]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	440b      	add	r3, r1
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	4403      	add	r3, r0
 8007dde:	3338      	adds	r3, #56	; 0x38
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	fbb2 f1f3 	udiv	r1, r2, r3
 8007de6:	fb01 f303 	mul.w	r3, r1, r3
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d110      	bne.n	8007e12 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007df0:	78fa      	ldrb	r2, [r7, #3]
 8007df2:	6879      	ldr	r1, [r7, #4]
 8007df4:	4613      	mov	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	331c      	adds	r3, #28
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e04:	78f9      	ldrb	r1, [r7, #3]
 8007e06:	2300      	movs	r3, #0
 8007e08:	2200      	movs	r2, #0
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f001 fdcd 	bl	80099aa <USBD_LL_Transmit>
 8007e10:	e003      	b.n	8007e1a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e000      	b.n	8007e20 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007e1e:	2302      	movs	r3, #2
  }
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 fdf8 	bl	8009a36 <USBD_LL_GetRxDataSize>
 8007e46:	4602      	mov	r2, r0
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00d      	beq.n	8007e74 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	4798      	blx	r3

    return USBD_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	e000      	b.n	8007e76 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007e74:	2302      	movs	r3, #2
  }
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e8c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d015      	beq.n	8007ec4 <USBD_CDC_EP0_RxReady+0x46>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e9e:	2bff      	cmp	r3, #255	; 0xff
 8007ea0:	d010      	beq.n	8007ec4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007eb0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007eb8:	b292      	uxth	r2, r2
 8007eba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	22ff      	movs	r2, #255	; 0xff
 8007ec0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2243      	movs	r2, #67	; 0x43
 8007edc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007ede:	4b03      	ldr	r3, [pc, #12]	; (8007eec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bc80      	pop	{r7}
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	200000a0 	.word	0x200000a0

08007ef0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2243      	movs	r2, #67	; 0x43
 8007efc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007efe:	4b03      	ldr	r3, [pc, #12]	; (8007f0c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc80      	pop	{r7}
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	2000005c 	.word	0x2000005c

08007f10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2243      	movs	r2, #67	; 0x43
 8007f1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007f1e:	4b03      	ldr	r3, [pc, #12]	; (8007f2c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bc80      	pop	{r7}
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	200000e4 	.word	0x200000e4

08007f30 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	220a      	movs	r2, #10
 8007f3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007f3e:	4b03      	ldr	r3, [pc, #12]	; (8007f4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bc80      	pop	{r7}
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20000018 	.word	0x20000018

08007f50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc80      	pop	{r7}
 8007f7a:	4770      	bx	lr

08007f7c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	4613      	mov	r3, r2
 8007f88:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f90:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f9a:	88fa      	ldrh	r2, [r7, #6]
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bc80      	pop	{r7}
 8007fac:	4770      	bx	lr

08007fae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b085      	sub	sp, #20
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fbe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bc80      	pop	{r7}
 8007fd2:	4770      	bx	lr

08007fd4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d01c      	beq.n	8008028 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d115      	bne.n	8008024 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008016:	b29b      	uxth	r3, r3
 8008018:	2181      	movs	r1, #129	; 0x81
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 fcc5 	bl	80099aa <USBD_LL_Transmit>

      return USBD_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	e002      	b.n	800802a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008024:	2301      	movs	r3, #1
 8008026:	e000      	b.n	800802a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008028:	2302      	movs	r3, #2
  }
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008040:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008048:	2b00      	cmp	r3, #0
 800804a:	d017      	beq.n	800807c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	7c1b      	ldrb	r3, [r3, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d109      	bne.n	8008068 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800805a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800805e:	2101      	movs	r1, #1
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 fcc5 	bl	80099f0 <USBD_LL_PrepareReceive>
 8008066:	e007      	b.n	8008078 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800806e:	2340      	movs	r3, #64	; 0x40
 8008070:	2101      	movs	r1, #1
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 fcbc 	bl	80099f0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	e000      	b.n	800807e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800807c:	2302      	movs	r3, #2
  }
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	4613      	mov	r3, r2
 8008092:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800809a:	2302      	movs	r3, #2
 800809c:	e01a      	b.n	80080d4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	79fa      	ldrb	r2, [r7, #7]
 80080ca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f001 fb29 	bl	8009724 <USBD_LL_Init>

  return USBD_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d006      	beq.n	80080fe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]
 80080fc:	e001      	b.n	8008102 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80080fe:	2302      	movs	r3, #2
 8008100:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008102:	7bfb      	ldrb	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	bc80      	pop	{r7}
 800810c:	4770      	bx	lr

0800810e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b082      	sub	sp, #8
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 fb5e 	bl	80097d8 <USBD_LL_Start>

  return USBD_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	bc80      	pop	{r7}
 8008138:	4770      	bx	lr

0800813a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	460b      	mov	r3, r1
 8008144:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008146:	2302      	movs	r3, #2
 8008148:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00c      	beq.n	800816e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	78fa      	ldrb	r2, [r7, #3]
 800815e:	4611      	mov	r1, r2
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	4798      	blx	r3
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	78fa      	ldrb	r2, [r7, #3]
 800818e:	4611      	mov	r1, r2
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	4798      	blx	r3

  return USBD_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 fed8 	bl	8008f66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80081c4:	461a      	mov	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80081d2:	f003 031f 	and.w	r3, r3, #31
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d016      	beq.n	8008208 <USBD_LL_SetupStage+0x6a>
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d81c      	bhi.n	8008218 <USBD_LL_SetupStage+0x7a>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <USBD_LL_SetupStage+0x4a>
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d008      	beq.n	80081f8 <USBD_LL_SetupStage+0x5a>
 80081e6:	e017      	b.n	8008218 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f9cb 	bl	800858c <USBD_StdDevReq>
      break;
 80081f6:	e01a      	b.n	800822e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fa2d 	bl	8008660 <USBD_StdItfReq>
      break;
 8008206:	e012      	b.n	800822e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fa6d 	bl	80086f0 <USBD_StdEPReq>
      break;
 8008216:	e00a      	b.n	800822e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800821e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008222:	b2db      	uxtb	r3, r3
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 fb36 	bl	8009898 <USBD_LL_StallEP>
      break;
 800822c:	bf00      	nop
  }

  return USBD_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	460b      	mov	r3, r1
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008246:	7afb      	ldrb	r3, [r7, #11]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d14b      	bne.n	80082e4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008252:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800825a:	2b03      	cmp	r3, #3
 800825c:	d134      	bne.n	80082c8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	68da      	ldr	r2, [r3, #12]
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	429a      	cmp	r2, r3
 8008268:	d919      	bls.n	800829e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	1ad2      	subs	r2, r2, r3
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	68da      	ldr	r2, [r3, #12]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008280:	429a      	cmp	r2, r3
 8008282:	d203      	bcs.n	800828c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008288:	b29b      	uxth	r3, r3
 800828a:	e002      	b.n	8008292 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008290:	b29b      	uxth	r3, r3
 8008292:	461a      	mov	r2, r3
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 ff57 	bl	800914a <USBD_CtlContinueRx>
 800829c:	e038      	b.n	8008310 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00a      	beq.n	80082c0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d105      	bne.n	80082c0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 ff54 	bl	800916e <USBD_CtlSendStatus>
 80082c6:	e023      	b.n	8008310 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082ce:	2b05      	cmp	r3, #5
 80082d0:	d11e      	bne.n	8008310 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80082da:	2100      	movs	r1, #0
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f001 fadb 	bl	8009898 <USBD_LL_StallEP>
 80082e2:	e015      	b.n	8008310 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00d      	beq.n	800830c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	d108      	bne.n	800830c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	7afa      	ldrb	r2, [r7, #11]
 8008304:	4611      	mov	r1, r2
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	4798      	blx	r3
 800830a:	e001      	b.n	8008310 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800830c:	2302      	movs	r3, #2
 800830e:	e000      	b.n	8008312 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b086      	sub	sp, #24
 800831e:	af00      	add	r7, sp, #0
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	460b      	mov	r3, r1
 8008324:	607a      	str	r2, [r7, #4]
 8008326:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008328:	7afb      	ldrb	r3, [r7, #11]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d17f      	bne.n	800842e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3314      	adds	r3, #20
 8008332:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800833a:	2b02      	cmp	r3, #2
 800833c:	d15c      	bne.n	80083f8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	429a      	cmp	r2, r3
 8008348:	d915      	bls.n	8008376 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	1ad2      	subs	r2, r2, r3
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	b29b      	uxth	r3, r3
 800835e:	461a      	mov	r2, r3
 8008360:	6879      	ldr	r1, [r7, #4]
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 fec1 	bl	80090ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008368:	2300      	movs	r3, #0
 800836a:	2200      	movs	r2, #0
 800836c:	2100      	movs	r1, #0
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f001 fb3e 	bl	80099f0 <USBD_LL_PrepareReceive>
 8008374:	e04e      	b.n	8008414 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	6912      	ldr	r2, [r2, #16]
 800837e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008382:	fb01 f202 	mul.w	r2, r1, r2
 8008386:	1a9b      	subs	r3, r3, r2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d11c      	bne.n	80083c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008394:	429a      	cmp	r2, r3
 8008396:	d316      	bcc.n	80083c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d20f      	bcs.n	80083c6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083a6:	2200      	movs	r2, #0
 80083a8:	2100      	movs	r1, #0
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 fe9d 	bl	80090ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083b8:	2300      	movs	r3, #0
 80083ba:	2200      	movs	r2, #0
 80083bc:	2100      	movs	r1, #0
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f001 fb16 	bl	80099f0 <USBD_LL_PrepareReceive>
 80083c4:	e026      	b.n	8008414 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00a      	beq.n	80083e8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d105      	bne.n	80083e8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80083e8:	2180      	movs	r1, #128	; 0x80
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f001 fa54 	bl	8009898 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 fecf 	bl	8009194 <USBD_CtlReceiveStatus>
 80083f6:	e00d      	b.n	8008414 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d004      	beq.n	800840c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008408:	2b00      	cmp	r3, #0
 800840a:	d103      	bne.n	8008414 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800840c:	2180      	movs	r1, #128	; 0x80
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f001 fa42 	bl	8009898 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800841a:	2b01      	cmp	r3, #1
 800841c:	d11d      	bne.n	800845a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff fe81 	bl	8008126 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800842c:	e015      	b.n	800845a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00d      	beq.n	8008456 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008440:	2b03      	cmp	r3, #3
 8008442:	d108      	bne.n	8008456 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	7afa      	ldrb	r2, [r7, #11]
 800844e:	4611      	mov	r1, r2
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	4798      	blx	r3
 8008454:	e001      	b.n	800845a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008456:	2302      	movs	r3, #2
 8008458:	e000      	b.n	800845c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800846c:	2340      	movs	r3, #64	; 0x40
 800846e:	2200      	movs	r2, #0
 8008470:	2100      	movs	r1, #0
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 f9cb 	bl	800980e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2240      	movs	r2, #64	; 0x40
 8008484:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008488:	2340      	movs	r3, #64	; 0x40
 800848a:	2200      	movs	r2, #0
 800848c:	2180      	movs	r1, #128	; 0x80
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 f9bd 	bl	800980e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2240      	movs	r2, #64	; 0x40
 800849e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d009      	beq.n	80084dc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	6852      	ldr	r2, [r2, #4]
 80084d4:	b2d2      	uxtb	r2, r2
 80084d6:	4611      	mov	r1, r2
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	4798      	blx	r3
  }

  return USBD_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	78fa      	ldrb	r2, [r7, #3]
 80084f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	bc80      	pop	{r7}
 8008502:	4770      	bx	lr

08008504 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2204      	movs	r2, #4
 800851c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr

0800852c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800853a:	2b04      	cmp	r3, #4
 800853c:	d105      	bne.n	800854a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	bc80      	pop	{r7}
 8008554:	4770      	bx	lr

08008556 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b082      	sub	sp, #8
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008564:	2b03      	cmp	r3, #3
 8008566:	d10b      	bne.n	8008580 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d005      	beq.n	8008580 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085a2:	2b40      	cmp	r3, #64	; 0x40
 80085a4:	d005      	beq.n	80085b2 <USBD_StdDevReq+0x26>
 80085a6:	2b40      	cmp	r3, #64	; 0x40
 80085a8:	d84f      	bhi.n	800864a <USBD_StdDevReq+0xbe>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d009      	beq.n	80085c2 <USBD_StdDevReq+0x36>
 80085ae:	2b20      	cmp	r3, #32
 80085b0:	d14b      	bne.n	800864a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	4798      	blx	r3
      break;
 80085c0:	e048      	b.n	8008654 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	785b      	ldrb	r3, [r3, #1]
 80085c6:	2b09      	cmp	r3, #9
 80085c8:	d839      	bhi.n	800863e <USBD_StdDevReq+0xb2>
 80085ca:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <USBD_StdDevReq+0x44>)
 80085cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d0:	08008621 	.word	0x08008621
 80085d4:	08008635 	.word	0x08008635
 80085d8:	0800863f 	.word	0x0800863f
 80085dc:	0800862b 	.word	0x0800862b
 80085e0:	0800863f 	.word	0x0800863f
 80085e4:	08008603 	.word	0x08008603
 80085e8:	080085f9 	.word	0x080085f9
 80085ec:	0800863f 	.word	0x0800863f
 80085f0:	08008617 	.word	0x08008617
 80085f4:	0800860d 	.word	0x0800860d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f9dc 	bl	80089b8 <USBD_GetDescriptor>
          break;
 8008600:	e022      	b.n	8008648 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fb3f 	bl	8008c88 <USBD_SetAddress>
          break;
 800860a:	e01d      	b.n	8008648 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fb7e 	bl	8008d10 <USBD_SetConfig>
          break;
 8008614:	e018      	b.n	8008648 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fc07 	bl	8008e2c <USBD_GetConfig>
          break;
 800861e:	e013      	b.n	8008648 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fc37 	bl	8008e96 <USBD_GetStatus>
          break;
 8008628:	e00e      	b.n	8008648 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fc65 	bl	8008efc <USBD_SetFeature>
          break;
 8008632:	e009      	b.n	8008648 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fc74 	bl	8008f24 <USBD_ClrFeature>
          break;
 800863c:	e004      	b.n	8008648 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fccc 	bl	8008fde <USBD_CtlError>
          break;
 8008646:	bf00      	nop
      }
      break;
 8008648:	e004      	b.n	8008654 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fcc6 	bl	8008fde <USBD_CtlError>
      break;
 8008652:	bf00      	nop
  }

  return ret;
 8008654:	7bfb      	ldrb	r3, [r7, #15]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop

08008660 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008676:	2b40      	cmp	r3, #64	; 0x40
 8008678:	d005      	beq.n	8008686 <USBD_StdItfReq+0x26>
 800867a:	2b40      	cmp	r3, #64	; 0x40
 800867c:	d82e      	bhi.n	80086dc <USBD_StdItfReq+0x7c>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <USBD_StdItfReq+0x26>
 8008682:	2b20      	cmp	r3, #32
 8008684:	d12a      	bne.n	80086dc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868c:	3b01      	subs	r3, #1
 800868e:	2b02      	cmp	r3, #2
 8008690:	d81d      	bhi.n	80086ce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	889b      	ldrh	r3, [r3, #4]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b01      	cmp	r3, #1
 800869a:	d813      	bhi.n	80086c4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	88db      	ldrh	r3, [r3, #6]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d110      	bne.n	80086d8 <USBD_StdItfReq+0x78>
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10d      	bne.n	80086d8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fd56 	bl	800916e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80086c2:	e009      	b.n	80086d8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fc89 	bl	8008fde <USBD_CtlError>
          break;
 80086cc:	e004      	b.n	80086d8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fc84 	bl	8008fde <USBD_CtlError>
          break;
 80086d6:	e000      	b.n	80086da <USBD_StdItfReq+0x7a>
          break;
 80086d8:	bf00      	nop
      }
      break;
 80086da:	e004      	b.n	80086e6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fc7d 	bl	8008fde <USBD_CtlError>
      break;
 80086e4:	bf00      	nop
  }

  return USBD_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	889b      	ldrh	r3, [r3, #4]
 8008702:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800870c:	2b40      	cmp	r3, #64	; 0x40
 800870e:	d007      	beq.n	8008720 <USBD_StdEPReq+0x30>
 8008710:	2b40      	cmp	r3, #64	; 0x40
 8008712:	f200 8146 	bhi.w	80089a2 <USBD_StdEPReq+0x2b2>
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <USBD_StdEPReq+0x40>
 800871a:	2b20      	cmp	r3, #32
 800871c:	f040 8141 	bne.w	80089a2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	4798      	blx	r3
      break;
 800872e:	e13d      	b.n	80089ac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008738:	2b20      	cmp	r3, #32
 800873a:	d10a      	bne.n	8008752 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	4798      	blx	r3
 800874a:	4603      	mov	r3, r0
 800874c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	e12d      	b.n	80089ae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	785b      	ldrb	r3, [r3, #1]
 8008756:	2b03      	cmp	r3, #3
 8008758:	d007      	beq.n	800876a <USBD_StdEPReq+0x7a>
 800875a:	2b03      	cmp	r3, #3
 800875c:	f300 811b 	bgt.w	8008996 <USBD_StdEPReq+0x2a6>
 8008760:	2b00      	cmp	r3, #0
 8008762:	d072      	beq.n	800884a <USBD_StdEPReq+0x15a>
 8008764:	2b01      	cmp	r3, #1
 8008766:	d03a      	beq.n	80087de <USBD_StdEPReq+0xee>
 8008768:	e115      	b.n	8008996 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008770:	2b02      	cmp	r3, #2
 8008772:	d002      	beq.n	800877a <USBD_StdEPReq+0x8a>
 8008774:	2b03      	cmp	r3, #3
 8008776:	d015      	beq.n	80087a4 <USBD_StdEPReq+0xb4>
 8008778:	e02b      	b.n	80087d2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800877a:	7bbb      	ldrb	r3, [r7, #14]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00c      	beq.n	800879a <USBD_StdEPReq+0xaa>
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	2b80      	cmp	r3, #128	; 0x80
 8008784:	d009      	beq.n	800879a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f001 f884 	bl	8009898 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008790:	2180      	movs	r1, #128	; 0x80
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f001 f880 	bl	8009898 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008798:	e020      	b.n	80087dc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fc1e 	bl	8008fde <USBD_CtlError>
              break;
 80087a2:	e01b      	b.n	80087dc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	885b      	ldrh	r3, [r3, #2]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10e      	bne.n	80087ca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00b      	beq.n	80087ca <USBD_StdEPReq+0xda>
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	2b80      	cmp	r3, #128	; 0x80
 80087b6:	d008      	beq.n	80087ca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	88db      	ldrh	r3, [r3, #6]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d104      	bne.n	80087ca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 f867 	bl	8009898 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fccf 	bl	800916e <USBD_CtlSendStatus>

              break;
 80087d0:	e004      	b.n	80087dc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fc02 	bl	8008fde <USBD_CtlError>
              break;
 80087da:	bf00      	nop
          }
          break;
 80087dc:	e0e0      	b.n	80089a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d002      	beq.n	80087ee <USBD_StdEPReq+0xfe>
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d015      	beq.n	8008818 <USBD_StdEPReq+0x128>
 80087ec:	e026      	b.n	800883c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087ee:	7bbb      	ldrb	r3, [r7, #14]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00c      	beq.n	800880e <USBD_StdEPReq+0x11e>
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
 80087f6:	2b80      	cmp	r3, #128	; 0x80
 80087f8:	d009      	beq.n	800880e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f001 f84a 	bl	8009898 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008804:	2180      	movs	r1, #128	; 0x80
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f001 f846 	bl	8009898 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800880c:	e01c      	b.n	8008848 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fbe4 	bl	8008fde <USBD_CtlError>
              break;
 8008816:	e017      	b.n	8008848 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	885b      	ldrh	r3, [r3, #2]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d112      	bne.n	8008846 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800882a:	7bbb      	ldrb	r3, [r7, #14]
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 f851 	bl	80098d6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fc9a 	bl	800916e <USBD_CtlSendStatus>
              }
              break;
 800883a:	e004      	b.n	8008846 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fbcd 	bl	8008fde <USBD_CtlError>
              break;
 8008844:	e000      	b.n	8008848 <USBD_StdEPReq+0x158>
              break;
 8008846:	bf00      	nop
          }
          break;
 8008848:	e0aa      	b.n	80089a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008850:	2b02      	cmp	r3, #2
 8008852:	d002      	beq.n	800885a <USBD_StdEPReq+0x16a>
 8008854:	2b03      	cmp	r3, #3
 8008856:	d032      	beq.n	80088be <USBD_StdEPReq+0x1ce>
 8008858:	e097      	b.n	800898a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800885a:	7bbb      	ldrb	r3, [r7, #14]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d007      	beq.n	8008870 <USBD_StdEPReq+0x180>
 8008860:	7bbb      	ldrb	r3, [r7, #14]
 8008862:	2b80      	cmp	r3, #128	; 0x80
 8008864:	d004      	beq.n	8008870 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fbb8 	bl	8008fde <USBD_CtlError>
                break;
 800886e:	e091      	b.n	8008994 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008874:	2b00      	cmp	r3, #0
 8008876:	da0b      	bge.n	8008890 <USBD_StdEPReq+0x1a0>
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	3310      	adds	r3, #16
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	4413      	add	r3, r2
 800888c:	3304      	adds	r3, #4
 800888e:	e00b      	b.n	80088a8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008890:	7bbb      	ldrb	r3, [r7, #14]
 8008892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008896:	4613      	mov	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	4413      	add	r3, r2
 80088a6:	3304      	adds	r3, #4
 80088a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2202      	movs	r2, #2
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fbfb 	bl	80090b2 <USBD_CtlSendData>
              break;
 80088bc:	e06a      	b.n	8008994 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80088be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	da11      	bge.n	80088ea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	f003 020f 	and.w	r2, r3, #15
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	440b      	add	r3, r1
 80088d8:	3318      	adds	r3, #24
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d117      	bne.n	8008910 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fb7b 	bl	8008fde <USBD_CtlError>
                  break;
 80088e8:	e054      	b.n	8008994 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088ea:	7bbb      	ldrb	r3, [r7, #14]
 80088ec:	f003 020f 	and.w	r2, r3, #15
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	440b      	add	r3, r1
 80088fc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d104      	bne.n	8008910 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fb68 	bl	8008fde <USBD_CtlError>
                  break;
 800890e:	e041      	b.n	8008994 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008914:	2b00      	cmp	r3, #0
 8008916:	da0b      	bge.n	8008930 <USBD_StdEPReq+0x240>
 8008918:	7bbb      	ldrb	r3, [r7, #14]
 800891a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800891e:	4613      	mov	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	3310      	adds	r3, #16
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	4413      	add	r3, r2
 800892c:	3304      	adds	r3, #4
 800892e:	e00b      	b.n	8008948 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008936:	4613      	mov	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	4413      	add	r3, r2
 8008946:	3304      	adds	r3, #4
 8008948:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d002      	beq.n	8008956 <USBD_StdEPReq+0x266>
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	2b80      	cmp	r3, #128	; 0x80
 8008954:	d103      	bne.n	800895e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	e00e      	b.n	800897c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800895e:	7bbb      	ldrb	r3, [r7, #14]
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 ffd6 	bl	8009914 <USBD_LL_IsStallEP>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	2201      	movs	r2, #1
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	e002      	b.n	800897c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2202      	movs	r2, #2
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fb95 	bl	80090b2 <USBD_CtlSendData>
              break;
 8008988:	e004      	b.n	8008994 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fb26 	bl	8008fde <USBD_CtlError>
              break;
 8008992:	bf00      	nop
          }
          break;
 8008994:	e004      	b.n	80089a0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fb20 	bl	8008fde <USBD_CtlError>
          break;
 800899e:	bf00      	nop
      }
      break;
 80089a0:	e004      	b.n	80089ac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fb1a 	bl	8008fde <USBD_CtlError>
      break;
 80089aa:	bf00      	nop
  }

  return ret;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	885b      	ldrh	r3, [r3, #2]
 80089d2:	0a1b      	lsrs	r3, r3, #8
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	3b01      	subs	r3, #1
 80089d8:	2b06      	cmp	r3, #6
 80089da:	f200 8128 	bhi.w	8008c2e <USBD_GetDescriptor+0x276>
 80089de:	a201      	add	r2, pc, #4	; (adr r2, 80089e4 <USBD_GetDescriptor+0x2c>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	08008a01 	.word	0x08008a01
 80089e8:	08008a19 	.word	0x08008a19
 80089ec:	08008a59 	.word	0x08008a59
 80089f0:	08008c2f 	.word	0x08008c2f
 80089f4:	08008c2f 	.word	0x08008c2f
 80089f8:	08008bcf 	.word	0x08008bcf
 80089fc:	08008bfb 	.word	0x08008bfb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	7c12      	ldrb	r2, [r2, #16]
 8008a0c:	f107 0108 	add.w	r1, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
      break;
 8008a16:	e112      	b.n	8008c3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	7c1b      	ldrb	r3, [r3, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10d      	bne.n	8008a3c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a28:	f107 0208 	add.w	r2, r7, #8
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	4798      	blx	r3
 8008a30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	3301      	adds	r3, #1
 8008a36:	2202      	movs	r2, #2
 8008a38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a3a:	e100      	b.n	8008c3e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a44:	f107 0208 	add.w	r2, r7, #8
 8008a48:	4610      	mov	r0, r2
 8008a4a:	4798      	blx	r3
 8008a4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3301      	adds	r3, #1
 8008a52:	2202      	movs	r2, #2
 8008a54:	701a      	strb	r2, [r3, #0]
      break;
 8008a56:	e0f2      	b.n	8008c3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	885b      	ldrh	r3, [r3, #2]
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b05      	cmp	r3, #5
 8008a60:	f200 80ac 	bhi.w	8008bbc <USBD_GetDescriptor+0x204>
 8008a64:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <USBD_GetDescriptor+0xb4>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008a85 	.word	0x08008a85
 8008a70:	08008ab9 	.word	0x08008ab9
 8008a74:	08008aed 	.word	0x08008aed
 8008a78:	08008b21 	.word	0x08008b21
 8008a7c:	08008b55 	.word	0x08008b55
 8008a80:	08008b89 	.word	0x08008b89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00b      	beq.n	8008aa8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	7c12      	ldrb	r2, [r2, #16]
 8008a9c:	f107 0108 	add.w	r1, r7, #8
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	4798      	blx	r3
 8008aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aa6:	e091      	b.n	8008bcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fa97 	bl	8008fde <USBD_CtlError>
            err++;
 8008ab0:	7afb      	ldrb	r3, [r7, #11]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ab6:	e089      	b.n	8008bcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00b      	beq.n	8008adc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	7c12      	ldrb	r2, [r2, #16]
 8008ad0:	f107 0108 	add.w	r1, r7, #8
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	4798      	blx	r3
 8008ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ada:	e077      	b.n	8008bcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fa7d 	bl	8008fde <USBD_CtlError>
            err++;
 8008ae4:	7afb      	ldrb	r3, [r7, #11]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8008aea:	e06f      	b.n	8008bcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00b      	beq.n	8008b10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	7c12      	ldrb	r2, [r2, #16]
 8008b04:	f107 0108 	add.w	r1, r7, #8
 8008b08:	4610      	mov	r0, r2
 8008b0a:	4798      	blx	r3
 8008b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b0e:	e05d      	b.n	8008bcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fa63 	bl	8008fde <USBD_CtlError>
            err++;
 8008b18:	7afb      	ldrb	r3, [r7, #11]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b1e:	e055      	b.n	8008bcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	7c12      	ldrb	r2, [r2, #16]
 8008b38:	f107 0108 	add.w	r1, r7, #8
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	4798      	blx	r3
 8008b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b42:	e043      	b.n	8008bcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fa49 	bl	8008fde <USBD_CtlError>
            err++;
 8008b4c:	7afb      	ldrb	r3, [r7, #11]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	72fb      	strb	r3, [r7, #11]
          break;
 8008b52:	e03b      	b.n	8008bcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	7c12      	ldrb	r2, [r2, #16]
 8008b6c:	f107 0108 	add.w	r1, r7, #8
 8008b70:	4610      	mov	r0, r2
 8008b72:	4798      	blx	r3
 8008b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b76:	e029      	b.n	8008bcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fa2f 	bl	8008fde <USBD_CtlError>
            err++;
 8008b80:	7afb      	ldrb	r3, [r7, #11]
 8008b82:	3301      	adds	r3, #1
 8008b84:	72fb      	strb	r3, [r7, #11]
          break;
 8008b86:	e021      	b.n	8008bcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	7c12      	ldrb	r2, [r2, #16]
 8008ba0:	f107 0108 	add.w	r1, r7, #8
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	4798      	blx	r3
 8008ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008baa:	e00f      	b.n	8008bcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa15 	bl	8008fde <USBD_CtlError>
            err++;
 8008bb4:	7afb      	ldrb	r3, [r7, #11]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008bba:	e007      	b.n	8008bcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fa0d 	bl	8008fde <USBD_CtlError>
          err++;
 8008bc4:	7afb      	ldrb	r3, [r7, #11]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008bca:	e038      	b.n	8008c3e <USBD_GetDescriptor+0x286>
 8008bcc:	e037      	b.n	8008c3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	7c1b      	ldrb	r3, [r3, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d109      	bne.n	8008bea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bde:	f107 0208 	add.w	r2, r7, #8
 8008be2:	4610      	mov	r0, r2
 8008be4:	4798      	blx	r3
 8008be6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008be8:	e029      	b.n	8008c3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f9f6 	bl	8008fde <USBD_CtlError>
        err++;
 8008bf2:	7afb      	ldrb	r3, [r7, #11]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	72fb      	strb	r3, [r7, #11]
      break;
 8008bf8:	e021      	b.n	8008c3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	7c1b      	ldrb	r3, [r3, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10d      	bne.n	8008c1e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0a:	f107 0208 	add.w	r2, r7, #8
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4798      	blx	r3
 8008c12:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3301      	adds	r3, #1
 8008c18:	2207      	movs	r2, #7
 8008c1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c1c:	e00f      	b.n	8008c3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f9dc 	bl	8008fde <USBD_CtlError>
        err++;
 8008c26:	7afb      	ldrb	r3, [r7, #11]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	72fb      	strb	r3, [r7, #11]
      break;
 8008c2c:	e007      	b.n	8008c3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f9d4 	bl	8008fde <USBD_CtlError>
      err++;
 8008c36:	7afb      	ldrb	r3, [r7, #11]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	72fb      	strb	r3, [r7, #11]
      break;
 8008c3c:	bf00      	nop
  }

  if (err != 0U)
 8008c3e:	7afb      	ldrb	r3, [r7, #11]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d11c      	bne.n	8008c7e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008c44:	893b      	ldrh	r3, [r7, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d011      	beq.n	8008c6e <USBD_GetDescriptor+0x2b6>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	88db      	ldrh	r3, [r3, #6]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00d      	beq.n	8008c6e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	88da      	ldrh	r2, [r3, #6]
 8008c56:	893b      	ldrh	r3, [r7, #8]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	bf28      	it	cs
 8008c5c:	4613      	movcs	r3, r2
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c62:	893b      	ldrh	r3, [r7, #8]
 8008c64:	461a      	mov	r2, r3
 8008c66:	68f9      	ldr	r1, [r7, #12]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fa22 	bl	80090b2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	88db      	ldrh	r3, [r3, #6]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d104      	bne.n	8008c80 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fa79 	bl	800916e <USBD_CtlSendStatus>
 8008c7c:	e000      	b.n	8008c80 <USBD_GetDescriptor+0x2c8>
    return;
 8008c7e:	bf00      	nop
    }
  }
}
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop

08008c88 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	889b      	ldrh	r3, [r3, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d130      	bne.n	8008cfc <USBD_SetAddress+0x74>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	88db      	ldrh	r3, [r3, #6]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d12c      	bne.n	8008cfc <USBD_SetAddress+0x74>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	885b      	ldrh	r3, [r3, #2]
 8008ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ca8:	d828      	bhi.n	8008cfc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	885b      	ldrh	r3, [r3, #2]
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d104      	bne.n	8008cca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f98b 	bl	8008fde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc8:	e01d      	b.n	8008d06 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	7bfa      	ldrb	r2, [r7, #15]
 8008cce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fe48 	bl	800996c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fa46 	bl	800916e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d004      	beq.n	8008cf2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf0:	e009      	b.n	8008d06 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cfa:	e004      	b.n	8008d06 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f96d 	bl	8008fde <USBD_CtlError>
  }
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
	...

08008d10 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	885b      	ldrh	r3, [r3, #2]
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	4b41      	ldr	r3, [pc, #260]	; (8008e28 <USBD_SetConfig+0x118>)
 8008d22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d24:	4b40      	ldr	r3, [pc, #256]	; (8008e28 <USBD_SetConfig+0x118>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d904      	bls.n	8008d36 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f955 	bl	8008fde <USBD_CtlError>
 8008d34:	e075      	b.n	8008e22 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d002      	beq.n	8008d46 <USBD_SetConfig+0x36>
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	d023      	beq.n	8008d8c <USBD_SetConfig+0x7c>
 8008d44:	e062      	b.n	8008e0c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008d46:	4b38      	ldr	r3, [pc, #224]	; (8008e28 <USBD_SetConfig+0x118>)
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d01a      	beq.n	8008d84 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008d4e:	4b36      	ldr	r3, [pc, #216]	; (8008e28 <USBD_SetConfig+0x118>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2203      	movs	r2, #3
 8008d5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d60:	4b31      	ldr	r3, [pc, #196]	; (8008e28 <USBD_SetConfig+0x118>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff f9e7 	bl	800813a <USBD_SetClassConfig>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d104      	bne.n	8008d7c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f932 	bl	8008fde <USBD_CtlError>
            return;
 8008d7a:	e052      	b.n	8008e22 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f9f6 	bl	800916e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008d82:	e04e      	b.n	8008e22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f9f2 	bl	800916e <USBD_CtlSendStatus>
        break;
 8008d8a:	e04a      	b.n	8008e22 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008d8c:	4b26      	ldr	r3, [pc, #152]	; (8008e28 <USBD_SetConfig+0x118>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d112      	bne.n	8008dba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008d9c:	4b22      	ldr	r3, [pc, #136]	; (8008e28 <USBD_SetConfig+0x118>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008da6:	4b20      	ldr	r3, [pc, #128]	; (8008e28 <USBD_SetConfig+0x118>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff f9e3 	bl	8008178 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f9db 	bl	800916e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008db8:	e033      	b.n	8008e22 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008dba:	4b1b      	ldr	r3, [pc, #108]	; (8008e28 <USBD_SetConfig+0x118>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d01d      	beq.n	8008e04 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7ff f9d1 	bl	8008178 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008dd6:	4b14      	ldr	r3, [pc, #80]	; (8008e28 <USBD_SetConfig+0x118>)
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008de0:	4b11      	ldr	r3, [pc, #68]	; (8008e28 <USBD_SetConfig+0x118>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff f9a7 	bl	800813a <USBD_SetClassConfig>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d104      	bne.n	8008dfc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f8f2 	bl	8008fde <USBD_CtlError>
            return;
 8008dfa:	e012      	b.n	8008e22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f9b6 	bl	800916e <USBD_CtlSendStatus>
        break;
 8008e02:	e00e      	b.n	8008e22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f9b2 	bl	800916e <USBD_CtlSendStatus>
        break;
 8008e0a:	e00a      	b.n	8008e22 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f8e5 	bl	8008fde <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008e14:	4b04      	ldr	r3, [pc, #16]	; (8008e28 <USBD_SetConfig+0x118>)
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff f9ac 	bl	8008178 <USBD_ClrClassConfig>
        break;
 8008e20:	bf00      	nop
    }
  }
}
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	200002d0 	.word	0x200002d0

08008e2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	88db      	ldrh	r3, [r3, #6]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d004      	beq.n	8008e48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f8cc 	bl	8008fde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e46:	e022      	b.n	8008e8e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	dc02      	bgt.n	8008e58 <USBD_GetConfig+0x2c>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	dc03      	bgt.n	8008e5e <USBD_GetConfig+0x32>
 8008e56:	e015      	b.n	8008e84 <USBD_GetConfig+0x58>
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d00b      	beq.n	8008e74 <USBD_GetConfig+0x48>
 8008e5c:	e012      	b.n	8008e84 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3308      	adds	r3, #8
 8008e68:	2201      	movs	r2, #1
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f920 	bl	80090b2 <USBD_CtlSendData>
        break;
 8008e72:	e00c      	b.n	8008e8e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3304      	adds	r3, #4
 8008e78:	2201      	movs	r2, #1
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f918 	bl	80090b2 <USBD_CtlSendData>
        break;
 8008e82:	e004      	b.n	8008e8e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f8a9 	bl	8008fde <USBD_CtlError>
        break;
 8008e8c:	bf00      	nop
}
 8008e8e:	bf00      	nop
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b082      	sub	sp, #8
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d81e      	bhi.n	8008eea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	88db      	ldrh	r3, [r3, #6]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d004      	beq.n	8008ebe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f891 	bl	8008fde <USBD_CtlError>
        break;
 8008ebc:	e01a      	b.n	8008ef4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d005      	beq.n	8008eda <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	f043 0202 	orr.w	r2, r3, #2
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	330c      	adds	r3, #12
 8008ede:	2202      	movs	r2, #2
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f8e5 	bl	80090b2 <USBD_CtlSendData>
      break;
 8008ee8:	e004      	b.n	8008ef4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f876 	bl	8008fde <USBD_CtlError>
      break;
 8008ef2:	bf00      	nop
  }
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	885b      	ldrh	r3, [r3, #2]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d106      	bne.n	8008f1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f929 	bl	800916e <USBD_CtlSendStatus>
  }
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f34:	3b01      	subs	r3, #1
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d80b      	bhi.n	8008f52 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	885b      	ldrh	r3, [r3, #2]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d10c      	bne.n	8008f5c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f90f 	bl	800916e <USBD_CtlSendStatus>
      }
      break;
 8008f50:	e004      	b.n	8008f5c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f842 	bl	8008fde <USBD_CtlError>
      break;
 8008f5a:	e000      	b.n	8008f5e <USBD_ClrFeature+0x3a>
      break;
 8008f5c:	bf00      	nop
  }
}
 8008f5e:	bf00      	nop
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b083      	sub	sp, #12
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	781a      	ldrb	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	785a      	ldrb	r2, [r3, #1]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	3302      	adds	r3, #2
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	3303      	adds	r3, #3
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	021b      	lsls	r3, r3, #8
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	4413      	add	r3, r2
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	3305      	adds	r3, #5
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	021b      	lsls	r3, r3, #8
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	4413      	add	r3, r2
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	3306      	adds	r3, #6
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	3307      	adds	r3, #7
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	021b      	lsls	r3, r3, #8
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	4413      	add	r3, r2
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	80da      	strh	r2, [r3, #6]

}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bc80      	pop	{r7}
 8008fdc:	4770      	bx	lr

08008fde <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008fe8:	2180      	movs	r1, #128	; 0x80
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fc54 	bl	8009898 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fc50 	bl	8009898 <USBD_LL_StallEP>
}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800900c:	2300      	movs	r3, #0
 800900e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d032      	beq.n	800907c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 f834 	bl	8009084 <USBD_GetLen>
 800901c:	4603      	mov	r3, r0
 800901e:	3301      	adds	r3, #1
 8009020:	b29b      	uxth	r3, r3
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	b29a      	uxth	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	1c5a      	adds	r2, r3, #1
 800902e:	75fa      	strb	r2, [r7, #23]
 8009030:	461a      	mov	r2, r3
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	4413      	add	r3, r2
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	7812      	ldrb	r2, [r2, #0]
 800903a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800903c:	7dfb      	ldrb	r3, [r7, #23]
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	75fa      	strb	r2, [r7, #23]
 8009042:	461a      	mov	r2, r3
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	4413      	add	r3, r2
 8009048:	2203      	movs	r2, #3
 800904a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800904c:	e012      	b.n	8009074 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	60fa      	str	r2, [r7, #12]
 8009054:	7dfa      	ldrb	r2, [r7, #23]
 8009056:	1c51      	adds	r1, r2, #1
 8009058:	75f9      	strb	r1, [r7, #23]
 800905a:	4611      	mov	r1, r2
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	440a      	add	r2, r1
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009064:	7dfb      	ldrb	r3, [r7, #23]
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	75fa      	strb	r2, [r7, #23]
 800906a:	461a      	mov	r2, r3
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	4413      	add	r3, r2
 8009070:	2200      	movs	r2, #0
 8009072:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1e8      	bne.n	800904e <USBD_GetString+0x4e>
    }
  }
}
 800907c:	bf00      	nop
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009090:	e005      	b.n	800909e <USBD_GetLen+0x1a>
  {
    len++;
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	3301      	adds	r3, #1
 8009096:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3301      	adds	r3, #1
 800909c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1f5      	bne.n	8009092 <USBD_GetLen+0xe>
  }

  return len;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bc80      	pop	{r7}
 80090b0:	4770      	bx	lr

080090b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	4613      	mov	r3, r2
 80090be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80090c8:	88fa      	ldrh	r2, [r7, #6]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80090ce:	88fa      	ldrh	r2, [r7, #6]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090d4:	88fb      	ldrh	r3, [r7, #6]
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	2100      	movs	r1, #0
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 fc65 	bl	80099aa <USBD_LL_Transmit>

  return USBD_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	60b9      	str	r1, [r7, #8]
 80090f4:	4613      	mov	r3, r2
 80090f6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	2100      	movs	r1, #0
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 fc53 	bl	80099aa <USBD_LL_Transmit>

  return USBD_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	60f8      	str	r0, [r7, #12]
 8009116:	60b9      	str	r1, [r7, #8]
 8009118:	4613      	mov	r3, r2
 800911a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2203      	movs	r2, #3
 8009120:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009124:	88fa      	ldrh	r2, [r7, #6]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800912c:	88fa      	ldrh	r2, [r7, #6]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009134:	88fb      	ldrh	r3, [r7, #6]
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	2100      	movs	r1, #0
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 fc58 	bl	80099f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	60f8      	str	r0, [r7, #12]
 8009152:	60b9      	str	r1, [r7, #8]
 8009154:	4613      	mov	r3, r2
 8009156:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009158:	88fb      	ldrh	r3, [r7, #6]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	2100      	movs	r1, #0
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 fc46 	bl	80099f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2204      	movs	r2, #4
 800917a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800917e:	2300      	movs	r3, #0
 8009180:	2200      	movs	r2, #0
 8009182:	2100      	movs	r1, #0
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fc10 	bl	80099aa <USBD_LL_Transmit>

  return USBD_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2205      	movs	r2, #5
 80091a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091a4:	2300      	movs	r3, #0
 80091a6:	2200      	movs	r2, #0
 80091a8:	2100      	movs	r1, #0
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fc20 	bl	80099f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80091c0:	2200      	movs	r2, #0
 80091c2:	4912      	ldr	r1, [pc, #72]	; (800920c <MX_USB_DEVICE_Init+0x50>)
 80091c4:	4812      	ldr	r0, [pc, #72]	; (8009210 <MX_USB_DEVICE_Init+0x54>)
 80091c6:	f7fe ff5e 	bl	8008086 <USBD_Init>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80091d0:	f7f8 fbfd 	bl	80019ce <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80091d4:	490f      	ldr	r1, [pc, #60]	; (8009214 <MX_USB_DEVICE_Init+0x58>)
 80091d6:	480e      	ldr	r0, [pc, #56]	; (8009210 <MX_USB_DEVICE_Init+0x54>)
 80091d8:	f7fe ff80 	bl	80080dc <USBD_RegisterClass>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80091e2:	f7f8 fbf4 	bl	80019ce <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80091e6:	490c      	ldr	r1, [pc, #48]	; (8009218 <MX_USB_DEVICE_Init+0x5c>)
 80091e8:	4809      	ldr	r0, [pc, #36]	; (8009210 <MX_USB_DEVICE_Init+0x54>)
 80091ea:	f7fe feb1 	bl	8007f50 <USBD_CDC_RegisterInterface>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80091f4:	f7f8 fbeb 	bl	80019ce <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091f8:	4805      	ldr	r0, [pc, #20]	; (8009210 <MX_USB_DEVICE_Init+0x54>)
 80091fa:	f7fe ff88 	bl	800810e <USBD_Start>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009204:	f7f8 fbe3 	bl	80019ce <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009208:	bf00      	nop
 800920a:	bd80      	pop	{r7, pc}
 800920c:	20000138 	.word	0x20000138
 8009210:	200002d4 	.word	0x200002d4
 8009214:	20000024 	.word	0x20000024
 8009218:	20000128 	.word	0x20000128

0800921c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009220:	2200      	movs	r2, #0
 8009222:	4905      	ldr	r1, [pc, #20]	; (8009238 <CDC_Init_FS+0x1c>)
 8009224:	4805      	ldr	r0, [pc, #20]	; (800923c <CDC_Init_FS+0x20>)
 8009226:	f7fe fea9 	bl	8007f7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800922a:	4905      	ldr	r1, [pc, #20]	; (8009240 <CDC_Init_FS+0x24>)
 800922c:	4803      	ldr	r0, [pc, #12]	; (800923c <CDC_Init_FS+0x20>)
 800922e:	f7fe febe 	bl	8007fae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009232:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009234:	4618      	mov	r0, r3
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20000998 	.word	0x20000998
 800923c:	200002d4 	.word	0x200002d4
 8009240:	20000598 	.word	0x20000598

08009244 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009248:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800924a:	4618      	mov	r0, r3
 800924c:	46bd      	mov	sp, r7
 800924e:	bc80      	pop	{r7}
 8009250:	4770      	bx	lr
	...

08009254 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	6039      	str	r1, [r7, #0]
 800925e:	71fb      	strb	r3, [r7, #7]
 8009260:	4613      	mov	r3, r2
 8009262:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009264:	79fb      	ldrb	r3, [r7, #7]
 8009266:	2b23      	cmp	r3, #35	; 0x23
 8009268:	d84a      	bhi.n	8009300 <CDC_Control_FS+0xac>
 800926a:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <CDC_Control_FS+0x1c>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	08009301 	.word	0x08009301
 8009274:	08009301 	.word	0x08009301
 8009278:	08009301 	.word	0x08009301
 800927c:	08009301 	.word	0x08009301
 8009280:	08009301 	.word	0x08009301
 8009284:	08009301 	.word	0x08009301
 8009288:	08009301 	.word	0x08009301
 800928c:	08009301 	.word	0x08009301
 8009290:	08009301 	.word	0x08009301
 8009294:	08009301 	.word	0x08009301
 8009298:	08009301 	.word	0x08009301
 800929c:	08009301 	.word	0x08009301
 80092a0:	08009301 	.word	0x08009301
 80092a4:	08009301 	.word	0x08009301
 80092a8:	08009301 	.word	0x08009301
 80092ac:	08009301 	.word	0x08009301
 80092b0:	08009301 	.word	0x08009301
 80092b4:	08009301 	.word	0x08009301
 80092b8:	08009301 	.word	0x08009301
 80092bc:	08009301 	.word	0x08009301
 80092c0:	08009301 	.word	0x08009301
 80092c4:	08009301 	.word	0x08009301
 80092c8:	08009301 	.word	0x08009301
 80092cc:	08009301 	.word	0x08009301
 80092d0:	08009301 	.word	0x08009301
 80092d4:	08009301 	.word	0x08009301
 80092d8:	08009301 	.word	0x08009301
 80092dc:	08009301 	.word	0x08009301
 80092e0:	08009301 	.word	0x08009301
 80092e4:	08009301 	.word	0x08009301
 80092e8:	08009301 	.word	0x08009301
 80092ec:	08009301 	.word	0x08009301
 80092f0:	08009301 	.word	0x08009301
 80092f4:	08009301 	.word	0x08009301
 80092f8:	08009301 	.word	0x08009301
 80092fc:	08009301 	.word	0x08009301
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009300:	bf00      	nop
  }

  return (USBD_OK);
 8009302:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009304:	4618      	mov	r0, r3
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	bc80      	pop	{r7}
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop

08009310 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	4805      	ldr	r0, [pc, #20]	; (8009334 <CDC_Receive_FS+0x24>)
 800931e:	f7fe fe46 	bl	8007fae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009322:	4804      	ldr	r0, [pc, #16]	; (8009334 <CDC_Receive_FS+0x24>)
 8009324:	f7fe fe85 	bl	8008032 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009328:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	200002d4 	.word	0x200002d4

08009338 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009348:	4b0d      	ldr	r3, [pc, #52]	; (8009380 <CDC_Transmit_FS+0x48>)
 800934a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800935a:	2301      	movs	r3, #1
 800935c:	e00b      	b.n	8009376 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800935e:	887b      	ldrh	r3, [r7, #2]
 8009360:	461a      	mov	r2, r3
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	4806      	ldr	r0, [pc, #24]	; (8009380 <CDC_Transmit_FS+0x48>)
 8009366:	f7fe fe09 	bl	8007f7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800936a:	4805      	ldr	r0, [pc, #20]	; (8009380 <CDC_Transmit_FS+0x48>)
 800936c:	f7fe fe32 	bl	8007fd4 <USBD_CDC_TransmitPacket>
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009374:	7bfb      	ldrb	r3, [r7, #15]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	200002d4 	.word	0x200002d4

08009384 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	6039      	str	r1, [r7, #0]
 800938e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	2212      	movs	r2, #18
 8009394:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009396:	4b03      	ldr	r3, [pc, #12]	; (80093a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	bc80      	pop	{r7}
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	20000154 	.word	0x20000154

080093a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	4603      	mov	r3, r0
 80093b0:	6039      	str	r1, [r7, #0]
 80093b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2204      	movs	r2, #4
 80093b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093ba:	4b03      	ldr	r3, [pc, #12]	; (80093c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bc80      	pop	{r7}
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	20000168 	.word	0x20000168

080093cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	4603      	mov	r3, r0
 80093d4:	6039      	str	r1, [r7, #0]
 80093d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d105      	bne.n	80093ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	4907      	ldr	r1, [pc, #28]	; (8009400 <USBD_FS_ProductStrDescriptor+0x34>)
 80093e2:	4808      	ldr	r0, [pc, #32]	; (8009404 <USBD_FS_ProductStrDescriptor+0x38>)
 80093e4:	f7ff fe0c 	bl	8009000 <USBD_GetString>
 80093e8:	e004      	b.n	80093f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	4904      	ldr	r1, [pc, #16]	; (8009400 <USBD_FS_ProductStrDescriptor+0x34>)
 80093ee:	4805      	ldr	r0, [pc, #20]	; (8009404 <USBD_FS_ProductStrDescriptor+0x38>)
 80093f0:	f7ff fe06 	bl	8009000 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093f4:	4b02      	ldr	r3, [pc, #8]	; (8009400 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	20000d98 	.word	0x20000d98
 8009404:	0800d11c 	.word	0x0800d11c

08009408 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	6039      	str	r1, [r7, #0]
 8009412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	4904      	ldr	r1, [pc, #16]	; (8009428 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009418:	4804      	ldr	r0, [pc, #16]	; (800942c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800941a:	f7ff fdf1 	bl	8009000 <USBD_GetString>
  return USBD_StrDesc;
 800941e:	4b02      	ldr	r3, [pc, #8]	; (8009428 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	20000d98 	.word	0x20000d98
 800942c:	0800d134 	.word	0x0800d134

08009430 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	4603      	mov	r3, r0
 8009438:	6039      	str	r1, [r7, #0]
 800943a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	221a      	movs	r2, #26
 8009440:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009442:	f000 f843 	bl	80094cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009446:	4b02      	ldr	r3, [pc, #8]	; (8009450 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009448:	4618      	mov	r0, r3
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	2000016c 	.word	0x2000016c

08009454 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	6039      	str	r1, [r7, #0]
 800945e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009460:	79fb      	ldrb	r3, [r7, #7]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d105      	bne.n	8009472 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	4907      	ldr	r1, [pc, #28]	; (8009488 <USBD_FS_ConfigStrDescriptor+0x34>)
 800946a:	4808      	ldr	r0, [pc, #32]	; (800948c <USBD_FS_ConfigStrDescriptor+0x38>)
 800946c:	f7ff fdc8 	bl	8009000 <USBD_GetString>
 8009470:	e004      	b.n	800947c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	4904      	ldr	r1, [pc, #16]	; (8009488 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009476:	4805      	ldr	r0, [pc, #20]	; (800948c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009478:	f7ff fdc2 	bl	8009000 <USBD_GetString>
  }
  return USBD_StrDesc;
 800947c:	4b02      	ldr	r3, [pc, #8]	; (8009488 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20000d98 	.word	0x20000d98
 800948c:	0800d148 	.word	0x0800d148

08009490 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	6039      	str	r1, [r7, #0]
 800949a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d105      	bne.n	80094ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	4907      	ldr	r1, [pc, #28]	; (80094c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094a6:	4808      	ldr	r0, [pc, #32]	; (80094c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094a8:	f7ff fdaa 	bl	8009000 <USBD_GetString>
 80094ac:	e004      	b.n	80094b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	4904      	ldr	r1, [pc, #16]	; (80094c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094b2:	4805      	ldr	r0, [pc, #20]	; (80094c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094b4:	f7ff fda4 	bl	8009000 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094b8:	4b02      	ldr	r3, [pc, #8]	; (80094c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20000d98 	.word	0x20000d98
 80094c8:	0800d154 	.word	0x0800d154

080094cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094d2:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <Get_SerialNum+0x44>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094d8:	4b0e      	ldr	r3, [pc, #56]	; (8009514 <Get_SerialNum+0x48>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094de:	4b0e      	ldr	r3, [pc, #56]	; (8009518 <Get_SerialNum+0x4c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4413      	add	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d009      	beq.n	8009506 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094f2:	2208      	movs	r2, #8
 80094f4:	4909      	ldr	r1, [pc, #36]	; (800951c <Get_SerialNum+0x50>)
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f000 f814 	bl	8009524 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094fc:	2204      	movs	r2, #4
 80094fe:	4908      	ldr	r1, [pc, #32]	; (8009520 <Get_SerialNum+0x54>)
 8009500:	68b8      	ldr	r0, [r7, #8]
 8009502:	f000 f80f 	bl	8009524 <IntToUnicode>
  }
}
 8009506:	bf00      	nop
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	1ffff7e8 	.word	0x1ffff7e8
 8009514:	1ffff7ec 	.word	0x1ffff7ec
 8009518:	1ffff7f0 	.word	0x1ffff7f0
 800951c:	2000016e 	.word	0x2000016e
 8009520:	2000017e 	.word	0x2000017e

08009524 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009524:	b480      	push	{r7}
 8009526:	b087      	sub	sp, #28
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	4613      	mov	r3, r2
 8009530:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009536:	2300      	movs	r3, #0
 8009538:	75fb      	strb	r3, [r7, #23]
 800953a:	e027      	b.n	800958c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	0f1b      	lsrs	r3, r3, #28
 8009540:	2b09      	cmp	r3, #9
 8009542:	d80b      	bhi.n	800955c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	0f1b      	lsrs	r3, r3, #28
 8009548:	b2da      	uxtb	r2, r3
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	005b      	lsls	r3, r3, #1
 800954e:	4619      	mov	r1, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	440b      	add	r3, r1
 8009554:	3230      	adds	r2, #48	; 0x30
 8009556:	b2d2      	uxtb	r2, r2
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	e00a      	b.n	8009572 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	0f1b      	lsrs	r3, r3, #28
 8009560:	b2da      	uxtb	r2, r3
 8009562:	7dfb      	ldrb	r3, [r7, #23]
 8009564:	005b      	lsls	r3, r3, #1
 8009566:	4619      	mov	r1, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	440b      	add	r3, r1
 800956c:	3237      	adds	r2, #55	; 0x37
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	011b      	lsls	r3, r3, #4
 8009576:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009578:	7dfb      	ldrb	r3, [r7, #23]
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	3301      	adds	r3, #1
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	4413      	add	r3, r2
 8009582:	2200      	movs	r2, #0
 8009584:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009586:	7dfb      	ldrb	r3, [r7, #23]
 8009588:	3301      	adds	r3, #1
 800958a:	75fb      	strb	r3, [r7, #23]
 800958c:	7dfa      	ldrb	r2, [r7, #23]
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	429a      	cmp	r2, r3
 8009592:	d3d3      	bcc.n	800953c <IntToUnicode+0x18>
  }
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop
 8009598:	371c      	adds	r7, #28
 800959a:	46bd      	mov	sp, r7
 800959c:	bc80      	pop	{r7}
 800959e:	4770      	bx	lr

080095a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a0d      	ldr	r2, [pc, #52]	; (80095e4 <HAL_PCD_MspInit+0x44>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d113      	bne.n	80095da <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80095b2:	4b0d      	ldr	r3, [pc, #52]	; (80095e8 <HAL_PCD_MspInit+0x48>)
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	4a0c      	ldr	r2, [pc, #48]	; (80095e8 <HAL_PCD_MspInit+0x48>)
 80095b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095bc:	61d3      	str	r3, [r2, #28]
 80095be:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <HAL_PCD_MspInit+0x48>)
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095c6:	60fb      	str	r3, [r7, #12]
 80095c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80095ca:	2200      	movs	r2, #0
 80095cc:	2100      	movs	r1, #0
 80095ce:	2014      	movs	r0, #20
 80095d0:	f7f8 fe1f 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80095d4:	2014      	movs	r0, #20
 80095d6:	f7f8 fe38 	bl	800224a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80095da:	bf00      	nop
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	40005c00 	.word	0x40005c00
 80095e8:	40021000 	.word	0x40021000

080095ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009600:	4619      	mov	r1, r3
 8009602:	4610      	mov	r0, r2
 8009604:	f7fe fdcb 	bl	800819e <USBD_LL_SetupStage>
}
 8009608:	bf00      	nop
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009622:	78fa      	ldrb	r2, [r7, #3]
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	4613      	mov	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4413      	add	r3, r2
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	440b      	add	r3, r1
 8009630:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	78fb      	ldrb	r3, [r7, #3]
 8009638:	4619      	mov	r1, r3
 800963a:	f7fe fdfd 	bl	8008238 <USBD_LL_DataOutStage>
}
 800963e:	bf00      	nop
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b082      	sub	sp, #8
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	460b      	mov	r3, r1
 8009650:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009658:	78fa      	ldrb	r2, [r7, #3]
 800965a:	6879      	ldr	r1, [r7, #4]
 800965c:	4613      	mov	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	00db      	lsls	r3, r3, #3
 8009664:	440b      	add	r3, r1
 8009666:	333c      	adds	r3, #60	; 0x3c
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	78fb      	ldrb	r3, [r7, #3]
 800966c:	4619      	mov	r1, r3
 800966e:	f7fe fe54 	bl	800831a <USBD_LL_DataInStage>
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009688:	4618      	mov	r0, r3
 800968a:	f7fe ff64 	bl	8008556 <USBD_LL_SOF>
}
 800968e:	bf00      	nop
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800969e:	2301      	movs	r3, #1
 80096a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d001      	beq.n	80096ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80096aa:	f7f8 f990 	bl	80019ce <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80096b4:	7bfa      	ldrb	r2, [r7, #15]
 80096b6:	4611      	mov	r1, r2
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fe ff14 	bl	80084e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fe fecd 	bl	8008464 <USBD_LL_Reset>
}
 80096ca:	bf00      	nop
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe ff0e 	bl	8008504 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d005      	beq.n	80096fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096f0:	4b04      	ldr	r3, [pc, #16]	; (8009704 <HAL_PCD_SuspendCallback+0x30>)
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	4a03      	ldr	r2, [pc, #12]	; (8009704 <HAL_PCD_SuspendCallback+0x30>)
 80096f6:	f043 0306 	orr.w	r3, r3, #6
 80096fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	e000ed00 	.word	0xe000ed00

08009708 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe ff08 	bl	800852c <USBD_LL_Resume>
}
 800971c:	bf00      	nop
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800972c:	4a28      	ldr	r2, [pc, #160]	; (80097d0 <USBD_LL_Init+0xac>)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a26      	ldr	r2, [pc, #152]	; (80097d0 <USBD_LL_Init+0xac>)
 8009738:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800973c:	4b24      	ldr	r3, [pc, #144]	; (80097d0 <USBD_LL_Init+0xac>)
 800973e:	4a25      	ldr	r2, [pc, #148]	; (80097d4 <USBD_LL_Init+0xb0>)
 8009740:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009742:	4b23      	ldr	r3, [pc, #140]	; (80097d0 <USBD_LL_Init+0xac>)
 8009744:	2208      	movs	r2, #8
 8009746:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009748:	4b21      	ldr	r3, [pc, #132]	; (80097d0 <USBD_LL_Init+0xac>)
 800974a:	2202      	movs	r2, #2
 800974c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800974e:	4b20      	ldr	r3, [pc, #128]	; (80097d0 <USBD_LL_Init+0xac>)
 8009750:	2200      	movs	r2, #0
 8009752:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009754:	4b1e      	ldr	r3, [pc, #120]	; (80097d0 <USBD_LL_Init+0xac>)
 8009756:	2200      	movs	r2, #0
 8009758:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800975a:	4b1d      	ldr	r3, [pc, #116]	; (80097d0 <USBD_LL_Init+0xac>)
 800975c:	2200      	movs	r2, #0
 800975e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009760:	481b      	ldr	r0, [pc, #108]	; (80097d0 <USBD_LL_Init+0xac>)
 8009762:	f7f8 ff28 	bl	80025b6 <HAL_PCD_Init>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800976c:	f7f8 f92f 	bl	80019ce <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009776:	2318      	movs	r3, #24
 8009778:	2200      	movs	r2, #0
 800977a:	2100      	movs	r1, #0
 800977c:	f7fa fc47 	bl	800400e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009786:	2358      	movs	r3, #88	; 0x58
 8009788:	2200      	movs	r2, #0
 800978a:	2180      	movs	r1, #128	; 0x80
 800978c:	f7fa fc3f 	bl	800400e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009796:	23c0      	movs	r3, #192	; 0xc0
 8009798:	2200      	movs	r2, #0
 800979a:	2181      	movs	r1, #129	; 0x81
 800979c:	f7fa fc37 	bl	800400e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097a6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80097aa:	2200      	movs	r2, #0
 80097ac:	2101      	movs	r1, #1
 80097ae:	f7fa fc2e 	bl	800400e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097bc:	2200      	movs	r2, #0
 80097be:	2182      	movs	r1, #130	; 0x82
 80097c0:	f7fa fc25 	bl	800400e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	20000f98 	.word	0x20000f98
 80097d4:	40005c00 	.word	0x40005c00

080097d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7f8 ffe0 	bl	80027b4 <HAL_PCD_Start>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 f94e 	bl	8009a9c <USBD_Get_USB_Status>
 8009800:	4603      	mov	r3, r0
 8009802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009804:	7bbb      	ldrb	r3, [r7, #14]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b084      	sub	sp, #16
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	4608      	mov	r0, r1
 8009818:	4611      	mov	r1, r2
 800981a:	461a      	mov	r2, r3
 800981c:	4603      	mov	r3, r0
 800981e:	70fb      	strb	r3, [r7, #3]
 8009820:	460b      	mov	r3, r1
 8009822:	70bb      	strb	r3, [r7, #2]
 8009824:	4613      	mov	r3, r2
 8009826:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009836:	78bb      	ldrb	r3, [r7, #2]
 8009838:	883a      	ldrh	r2, [r7, #0]
 800983a:	78f9      	ldrb	r1, [r7, #3]
 800983c:	f7f9 f935 	bl	8002aaa <HAL_PCD_EP_Open>
 8009840:	4603      	mov	r3, r0
 8009842:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	4618      	mov	r0, r3
 8009848:	f000 f928 	bl	8009a9c <USBD_Get_USB_Status>
 800984c:	4603      	mov	r3, r0
 800984e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009850:	7bbb      	ldrb	r3, [r7, #14]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	460b      	mov	r3, r1
 8009864:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	4611      	mov	r1, r2
 8009878:	4618      	mov	r0, r3
 800987a:	f7f9 f973 	bl	8002b64 <HAL_PCD_EP_Close>
 800987e:	4603      	mov	r3, r0
 8009880:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	4618      	mov	r0, r3
 8009886:	f000 f909 	bl	8009a9c <USBD_Get_USB_Status>
 800988a:	4603      	mov	r3, r0
 800988c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800988e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098b2:	78fa      	ldrb	r2, [r7, #3]
 80098b4:	4611      	mov	r1, r2
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7f9 fa1b 	bl	8002cf2 <HAL_PCD_EP_SetStall>
 80098bc:	4603      	mov	r3, r0
 80098be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 f8ea 	bl	8009a9c <USBD_Get_USB_Status>
 80098c8:	4603      	mov	r3, r0
 80098ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	460b      	mov	r3, r1
 80098e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	4611      	mov	r1, r2
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7f9 fa5c 	bl	8002db2 <HAL_PCD_EP_ClrStall>
 80098fa:	4603      	mov	r3, r0
 80098fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
 8009900:	4618      	mov	r0, r3
 8009902:	f000 f8cb 	bl	8009a9c <USBD_Get_USB_Status>
 8009906:	4603      	mov	r3, r0
 8009908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800990a:	7bbb      	ldrb	r3, [r7, #14]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009926:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800992c:	2b00      	cmp	r3, #0
 800992e:	da0c      	bge.n	800994a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009930:	78fb      	ldrb	r3, [r7, #3]
 8009932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009936:	68f9      	ldr	r1, [r7, #12]
 8009938:	1c5a      	adds	r2, r3, #1
 800993a:	4613      	mov	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	00db      	lsls	r3, r3, #3
 8009942:	440b      	add	r3, r1
 8009944:	3302      	adds	r3, #2
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	e00b      	b.n	8009962 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800994a:	78fb      	ldrb	r3, [r7, #3]
 800994c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009950:	68f9      	ldr	r1, [r7, #12]
 8009952:	4613      	mov	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	440b      	add	r3, r1
 800995c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009960:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	bc80      	pop	{r7}
 800996a:	4770      	bx	lr

0800996c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009986:	78fa      	ldrb	r2, [r7, #3]
 8009988:	4611      	mov	r1, r2
 800998a:	4618      	mov	r0, r3
 800998c:	f7f9 f868 	bl	8002a60 <HAL_PCD_SetAddress>
 8009990:	4603      	mov	r3, r0
 8009992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	4618      	mov	r0, r3
 8009998:	f000 f880 	bl	8009a9c <USBD_Get_USB_Status>
 800999c:	4603      	mov	r3, r0
 800999e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b086      	sub	sp, #24
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	60f8      	str	r0, [r7, #12]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	461a      	mov	r2, r3
 80099b6:	460b      	mov	r3, r1
 80099b8:	72fb      	strb	r3, [r7, #11]
 80099ba:	4613      	mov	r3, r2
 80099bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80099cc:	893b      	ldrh	r3, [r7, #8]
 80099ce:	7af9      	ldrb	r1, [r7, #11]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	f7f9 f957 	bl	8002c84 <HAL_PCD_EP_Transmit>
 80099d6:	4603      	mov	r3, r0
 80099d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099da:	7dfb      	ldrb	r3, [r7, #23]
 80099dc:	4618      	mov	r0, r3
 80099de:	f000 f85d 	bl	8009a9c <USBD_Get_USB_Status>
 80099e2:	4603      	mov	r3, r0
 80099e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3718      	adds	r7, #24
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	607a      	str	r2, [r7, #4]
 80099fa:	461a      	mov	r2, r3
 80099fc:	460b      	mov	r3, r1
 80099fe:	72fb      	strb	r3, [r7, #11]
 8009a00:	4613      	mov	r3, r2
 8009a02:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a12:	893b      	ldrh	r3, [r7, #8]
 8009a14:	7af9      	ldrb	r1, [r7, #11]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	f7f9 f8ec 	bl	8002bf4 <HAL_PCD_EP_Receive>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a20:	7dfb      	ldrb	r3, [r7, #23]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 f83a 	bl	8009a9c <USBD_Get_USB_Status>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a48:	78fa      	ldrb	r2, [r7, #3]
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7f9 f902 	bl	8002c56 <HAL_PCD_EP_GetRxCount>
 8009a52:	4603      	mov	r3, r0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a64:	4b02      	ldr	r3, [pc, #8]	; (8009a70 <USBD_static_malloc+0x14>)
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bc80      	pop	{r7}
 8009a6e:	4770      	bx	lr
 8009a70:	20001288 	.word	0x20001288

08009a74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]

}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bc80      	pop	{r7}
 8009a84:	4770      	bx	lr

08009a86 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a86:	b480      	push	{r7}
 8009a88:	b083      	sub	sp, #12
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	460b      	mov	r3, r1
 8009a90:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009a92:	bf00      	nop
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bc80      	pop	{r7}
 8009a9a:	4770      	bx	lr

08009a9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aaa:	79fb      	ldrb	r3, [r7, #7]
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	d817      	bhi.n	8009ae0 <USBD_Get_USB_Status+0x44>
 8009ab0:	a201      	add	r2, pc, #4	; (adr r2, 8009ab8 <USBD_Get_USB_Status+0x1c>)
 8009ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab6:	bf00      	nop
 8009ab8:	08009ac9 	.word	0x08009ac9
 8009abc:	08009acf 	.word	0x08009acf
 8009ac0:	08009ad5 	.word	0x08009ad5
 8009ac4:	08009adb 	.word	0x08009adb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
    break;
 8009acc:	e00b      	b.n	8009ae6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ace:	2302      	movs	r3, #2
 8009ad0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad2:	e008      	b.n	8009ae6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad8:	e005      	b.n	8009ae6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ada:	2302      	movs	r3, #2
 8009adc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ade:	e002      	b.n	8009ae6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae4:	bf00      	nop
  }
  return usb_status;
 8009ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bc80      	pop	{r7}
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop

08009af4 <__errno>:
 8009af4:	4b01      	ldr	r3, [pc, #4]	; (8009afc <__errno+0x8>)
 8009af6:	6818      	ldr	r0, [r3, #0]
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	20000188 	.word	0x20000188

08009b00 <__libc_init_array>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	2600      	movs	r6, #0
 8009b04:	4d0c      	ldr	r5, [pc, #48]	; (8009b38 <__libc_init_array+0x38>)
 8009b06:	4c0d      	ldr	r4, [pc, #52]	; (8009b3c <__libc_init_array+0x3c>)
 8009b08:	1b64      	subs	r4, r4, r5
 8009b0a:	10a4      	asrs	r4, r4, #2
 8009b0c:	42a6      	cmp	r6, r4
 8009b0e:	d109      	bne.n	8009b24 <__libc_init_array+0x24>
 8009b10:	f003 faf4 	bl	800d0fc <_init>
 8009b14:	2600      	movs	r6, #0
 8009b16:	4d0a      	ldr	r5, [pc, #40]	; (8009b40 <__libc_init_array+0x40>)
 8009b18:	4c0a      	ldr	r4, [pc, #40]	; (8009b44 <__libc_init_array+0x44>)
 8009b1a:	1b64      	subs	r4, r4, r5
 8009b1c:	10a4      	asrs	r4, r4, #2
 8009b1e:	42a6      	cmp	r6, r4
 8009b20:	d105      	bne.n	8009b2e <__libc_init_array+0x2e>
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b28:	4798      	blx	r3
 8009b2a:	3601      	adds	r6, #1
 8009b2c:	e7ee      	b.n	8009b0c <__libc_init_array+0xc>
 8009b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b32:	4798      	blx	r3
 8009b34:	3601      	adds	r6, #1
 8009b36:	e7f2      	b.n	8009b1e <__libc_init_array+0x1e>
 8009b38:	0800d508 	.word	0x0800d508
 8009b3c:	0800d508 	.word	0x0800d508
 8009b40:	0800d508 	.word	0x0800d508
 8009b44:	0800d50c 	.word	0x0800d50c

08009b48 <memset>:
 8009b48:	4603      	mov	r3, r0
 8009b4a:	4402      	add	r2, r0
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d100      	bne.n	8009b52 <memset+0xa>
 8009b50:	4770      	bx	lr
 8009b52:	f803 1b01 	strb.w	r1, [r3], #1
 8009b56:	e7f9      	b.n	8009b4c <memset+0x4>

08009b58 <rand>:
 8009b58:	4b16      	ldr	r3, [pc, #88]	; (8009bb4 <rand+0x5c>)
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	681c      	ldr	r4, [r3, #0]
 8009b5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b60:	b9b3      	cbnz	r3, 8009b90 <rand+0x38>
 8009b62:	2018      	movs	r0, #24
 8009b64:	f000 f886 	bl	8009c74 <malloc>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	63a0      	str	r0, [r4, #56]	; 0x38
 8009b6c:	b920      	cbnz	r0, 8009b78 <rand+0x20>
 8009b6e:	214e      	movs	r1, #78	; 0x4e
 8009b70:	4b11      	ldr	r3, [pc, #68]	; (8009bb8 <rand+0x60>)
 8009b72:	4812      	ldr	r0, [pc, #72]	; (8009bbc <rand+0x64>)
 8009b74:	f000 f84e 	bl	8009c14 <__assert_func>
 8009b78:	4911      	ldr	r1, [pc, #68]	; (8009bc0 <rand+0x68>)
 8009b7a:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <rand+0x6c>)
 8009b7c:	e9c0 1300 	strd	r1, r3, [r0]
 8009b80:	4b11      	ldr	r3, [pc, #68]	; (8009bc8 <rand+0x70>)
 8009b82:	2100      	movs	r1, #0
 8009b84:	6083      	str	r3, [r0, #8]
 8009b86:	230b      	movs	r3, #11
 8009b88:	8183      	strh	r3, [r0, #12]
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009b90:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009b92:	4a0e      	ldr	r2, [pc, #56]	; (8009bcc <rand+0x74>)
 8009b94:	6920      	ldr	r0, [r4, #16]
 8009b96:	6963      	ldr	r3, [r4, #20]
 8009b98:	4342      	muls	r2, r0
 8009b9a:	490d      	ldr	r1, [pc, #52]	; (8009bd0 <rand+0x78>)
 8009b9c:	fb01 2203 	mla	r2, r1, r3, r2
 8009ba0:	fba0 0101 	umull	r0, r1, r0, r1
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	eb42 0001 	adc.w	r0, r2, r1
 8009baa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009bae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009bb2:	bd10      	pop	{r4, pc}
 8009bb4:	20000188 	.word	0x20000188
 8009bb8:	0800d18c 	.word	0x0800d18c
 8009bbc:	0800d1a3 	.word	0x0800d1a3
 8009bc0:	abcd330e 	.word	0xabcd330e
 8009bc4:	e66d1234 	.word	0xe66d1234
 8009bc8:	0005deec 	.word	0x0005deec
 8009bcc:	5851f42d 	.word	0x5851f42d
 8009bd0:	4c957f2d 	.word	0x4c957f2d

08009bd4 <siprintf>:
 8009bd4:	b40e      	push	{r1, r2, r3}
 8009bd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bda:	b500      	push	{lr}
 8009bdc:	b09c      	sub	sp, #112	; 0x70
 8009bde:	ab1d      	add	r3, sp, #116	; 0x74
 8009be0:	9002      	str	r0, [sp, #8]
 8009be2:	9006      	str	r0, [sp, #24]
 8009be4:	9107      	str	r1, [sp, #28]
 8009be6:	9104      	str	r1, [sp, #16]
 8009be8:	4808      	ldr	r0, [pc, #32]	; (8009c0c <siprintf+0x38>)
 8009bea:	4909      	ldr	r1, [pc, #36]	; (8009c10 <siprintf+0x3c>)
 8009bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bf0:	9105      	str	r1, [sp, #20]
 8009bf2:	6800      	ldr	r0, [r0, #0]
 8009bf4:	a902      	add	r1, sp, #8
 8009bf6:	9301      	str	r3, [sp, #4]
 8009bf8:	f000 f97c 	bl	8009ef4 <_svfiprintf_r>
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	9b02      	ldr	r3, [sp, #8]
 8009c00:	701a      	strb	r2, [r3, #0]
 8009c02:	b01c      	add	sp, #112	; 0x70
 8009c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c08:	b003      	add	sp, #12
 8009c0a:	4770      	bx	lr
 8009c0c:	20000188 	.word	0x20000188
 8009c10:	ffff0208 	.word	0xffff0208

08009c14 <__assert_func>:
 8009c14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c16:	4614      	mov	r4, r2
 8009c18:	461a      	mov	r2, r3
 8009c1a:	4b09      	ldr	r3, [pc, #36]	; (8009c40 <__assert_func+0x2c>)
 8009c1c:	4605      	mov	r5, r0
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68d8      	ldr	r0, [r3, #12]
 8009c22:	b14c      	cbz	r4, 8009c38 <__assert_func+0x24>
 8009c24:	4b07      	ldr	r3, [pc, #28]	; (8009c44 <__assert_func+0x30>)
 8009c26:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c2a:	9100      	str	r1, [sp, #0]
 8009c2c:	462b      	mov	r3, r5
 8009c2e:	4906      	ldr	r1, [pc, #24]	; (8009c48 <__assert_func+0x34>)
 8009c30:	f000 f80e 	bl	8009c50 <fiprintf>
 8009c34:	f000 fe1c 	bl	800a870 <abort>
 8009c38:	4b04      	ldr	r3, [pc, #16]	; (8009c4c <__assert_func+0x38>)
 8009c3a:	461c      	mov	r4, r3
 8009c3c:	e7f3      	b.n	8009c26 <__assert_func+0x12>
 8009c3e:	bf00      	nop
 8009c40:	20000188 	.word	0x20000188
 8009c44:	0800d1fe 	.word	0x0800d1fe
 8009c48:	0800d20b 	.word	0x0800d20b
 8009c4c:	0800d239 	.word	0x0800d239

08009c50 <fiprintf>:
 8009c50:	b40e      	push	{r1, r2, r3}
 8009c52:	b503      	push	{r0, r1, lr}
 8009c54:	4601      	mov	r1, r0
 8009c56:	ab03      	add	r3, sp, #12
 8009c58:	4805      	ldr	r0, [pc, #20]	; (8009c70 <fiprintf+0x20>)
 8009c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c5e:	6800      	ldr	r0, [r0, #0]
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	f000 fa6f 	bl	800a144 <_vfiprintf_r>
 8009c66:	b002      	add	sp, #8
 8009c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c6c:	b003      	add	sp, #12
 8009c6e:	4770      	bx	lr
 8009c70:	20000188 	.word	0x20000188

08009c74 <malloc>:
 8009c74:	4b02      	ldr	r3, [pc, #8]	; (8009c80 <malloc+0xc>)
 8009c76:	4601      	mov	r1, r0
 8009c78:	6818      	ldr	r0, [r3, #0]
 8009c7a:	f000 b86b 	b.w	8009d54 <_malloc_r>
 8009c7e:	bf00      	nop
 8009c80:	20000188 	.word	0x20000188

08009c84 <_free_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	4605      	mov	r5, r0
 8009c88:	2900      	cmp	r1, #0
 8009c8a:	d040      	beq.n	8009d0e <_free_r+0x8a>
 8009c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c90:	1f0c      	subs	r4, r1, #4
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	bfb8      	it	lt
 8009c96:	18e4      	addlt	r4, r4, r3
 8009c98:	f001 f844 	bl	800ad24 <__malloc_lock>
 8009c9c:	4a1c      	ldr	r2, [pc, #112]	; (8009d10 <_free_r+0x8c>)
 8009c9e:	6813      	ldr	r3, [r2, #0]
 8009ca0:	b933      	cbnz	r3, 8009cb0 <_free_r+0x2c>
 8009ca2:	6063      	str	r3, [r4, #4]
 8009ca4:	6014      	str	r4, [r2, #0]
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cac:	f001 b840 	b.w	800ad30 <__malloc_unlock>
 8009cb0:	42a3      	cmp	r3, r4
 8009cb2:	d908      	bls.n	8009cc6 <_free_r+0x42>
 8009cb4:	6820      	ldr	r0, [r4, #0]
 8009cb6:	1821      	adds	r1, r4, r0
 8009cb8:	428b      	cmp	r3, r1
 8009cba:	bf01      	itttt	eq
 8009cbc:	6819      	ldreq	r1, [r3, #0]
 8009cbe:	685b      	ldreq	r3, [r3, #4]
 8009cc0:	1809      	addeq	r1, r1, r0
 8009cc2:	6021      	streq	r1, [r4, #0]
 8009cc4:	e7ed      	b.n	8009ca2 <_free_r+0x1e>
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	b10b      	cbz	r3, 8009cd0 <_free_r+0x4c>
 8009ccc:	42a3      	cmp	r3, r4
 8009cce:	d9fa      	bls.n	8009cc6 <_free_r+0x42>
 8009cd0:	6811      	ldr	r1, [r2, #0]
 8009cd2:	1850      	adds	r0, r2, r1
 8009cd4:	42a0      	cmp	r0, r4
 8009cd6:	d10b      	bne.n	8009cf0 <_free_r+0x6c>
 8009cd8:	6820      	ldr	r0, [r4, #0]
 8009cda:	4401      	add	r1, r0
 8009cdc:	1850      	adds	r0, r2, r1
 8009cde:	4283      	cmp	r3, r0
 8009ce0:	6011      	str	r1, [r2, #0]
 8009ce2:	d1e0      	bne.n	8009ca6 <_free_r+0x22>
 8009ce4:	6818      	ldr	r0, [r3, #0]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	4401      	add	r1, r0
 8009cea:	6011      	str	r1, [r2, #0]
 8009cec:	6053      	str	r3, [r2, #4]
 8009cee:	e7da      	b.n	8009ca6 <_free_r+0x22>
 8009cf0:	d902      	bls.n	8009cf8 <_free_r+0x74>
 8009cf2:	230c      	movs	r3, #12
 8009cf4:	602b      	str	r3, [r5, #0]
 8009cf6:	e7d6      	b.n	8009ca6 <_free_r+0x22>
 8009cf8:	6820      	ldr	r0, [r4, #0]
 8009cfa:	1821      	adds	r1, r4, r0
 8009cfc:	428b      	cmp	r3, r1
 8009cfe:	bf01      	itttt	eq
 8009d00:	6819      	ldreq	r1, [r3, #0]
 8009d02:	685b      	ldreq	r3, [r3, #4]
 8009d04:	1809      	addeq	r1, r1, r0
 8009d06:	6021      	streq	r1, [r4, #0]
 8009d08:	6063      	str	r3, [r4, #4]
 8009d0a:	6054      	str	r4, [r2, #4]
 8009d0c:	e7cb      	b.n	8009ca6 <_free_r+0x22>
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	200014a8 	.word	0x200014a8

08009d14 <sbrk_aligned>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	4e0e      	ldr	r6, [pc, #56]	; (8009d50 <sbrk_aligned+0x3c>)
 8009d18:	460c      	mov	r4, r1
 8009d1a:	6831      	ldr	r1, [r6, #0]
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	b911      	cbnz	r1, 8009d26 <sbrk_aligned+0x12>
 8009d20:	f000 fcd6 	bl	800a6d0 <_sbrk_r>
 8009d24:	6030      	str	r0, [r6, #0]
 8009d26:	4621      	mov	r1, r4
 8009d28:	4628      	mov	r0, r5
 8009d2a:	f000 fcd1 	bl	800a6d0 <_sbrk_r>
 8009d2e:	1c43      	adds	r3, r0, #1
 8009d30:	d00a      	beq.n	8009d48 <sbrk_aligned+0x34>
 8009d32:	1cc4      	adds	r4, r0, #3
 8009d34:	f024 0403 	bic.w	r4, r4, #3
 8009d38:	42a0      	cmp	r0, r4
 8009d3a:	d007      	beq.n	8009d4c <sbrk_aligned+0x38>
 8009d3c:	1a21      	subs	r1, r4, r0
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 fcc6 	bl	800a6d0 <_sbrk_r>
 8009d44:	3001      	adds	r0, #1
 8009d46:	d101      	bne.n	8009d4c <sbrk_aligned+0x38>
 8009d48:	f04f 34ff 	mov.w	r4, #4294967295
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}
 8009d50:	200014ac 	.word	0x200014ac

08009d54 <_malloc_r>:
 8009d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d58:	1ccd      	adds	r5, r1, #3
 8009d5a:	f025 0503 	bic.w	r5, r5, #3
 8009d5e:	3508      	adds	r5, #8
 8009d60:	2d0c      	cmp	r5, #12
 8009d62:	bf38      	it	cc
 8009d64:	250c      	movcc	r5, #12
 8009d66:	2d00      	cmp	r5, #0
 8009d68:	4607      	mov	r7, r0
 8009d6a:	db01      	blt.n	8009d70 <_malloc_r+0x1c>
 8009d6c:	42a9      	cmp	r1, r5
 8009d6e:	d905      	bls.n	8009d7c <_malloc_r+0x28>
 8009d70:	230c      	movs	r3, #12
 8009d72:	2600      	movs	r6, #0
 8009d74:	603b      	str	r3, [r7, #0]
 8009d76:	4630      	mov	r0, r6
 8009d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d7c:	4e2e      	ldr	r6, [pc, #184]	; (8009e38 <_malloc_r+0xe4>)
 8009d7e:	f000 ffd1 	bl	800ad24 <__malloc_lock>
 8009d82:	6833      	ldr	r3, [r6, #0]
 8009d84:	461c      	mov	r4, r3
 8009d86:	bb34      	cbnz	r4, 8009dd6 <_malloc_r+0x82>
 8009d88:	4629      	mov	r1, r5
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	f7ff ffc2 	bl	8009d14 <sbrk_aligned>
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	4604      	mov	r4, r0
 8009d94:	d14d      	bne.n	8009e32 <_malloc_r+0xde>
 8009d96:	6834      	ldr	r4, [r6, #0]
 8009d98:	4626      	mov	r6, r4
 8009d9a:	2e00      	cmp	r6, #0
 8009d9c:	d140      	bne.n	8009e20 <_malloc_r+0xcc>
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	4631      	mov	r1, r6
 8009da2:	4638      	mov	r0, r7
 8009da4:	eb04 0803 	add.w	r8, r4, r3
 8009da8:	f000 fc92 	bl	800a6d0 <_sbrk_r>
 8009dac:	4580      	cmp	r8, r0
 8009dae:	d13a      	bne.n	8009e26 <_malloc_r+0xd2>
 8009db0:	6821      	ldr	r1, [r4, #0]
 8009db2:	3503      	adds	r5, #3
 8009db4:	1a6d      	subs	r5, r5, r1
 8009db6:	f025 0503 	bic.w	r5, r5, #3
 8009dba:	3508      	adds	r5, #8
 8009dbc:	2d0c      	cmp	r5, #12
 8009dbe:	bf38      	it	cc
 8009dc0:	250c      	movcc	r5, #12
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	f7ff ffa5 	bl	8009d14 <sbrk_aligned>
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d02b      	beq.n	8009e26 <_malloc_r+0xd2>
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	442b      	add	r3, r5
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	e00e      	b.n	8009df4 <_malloc_r+0xa0>
 8009dd6:	6822      	ldr	r2, [r4, #0]
 8009dd8:	1b52      	subs	r2, r2, r5
 8009dda:	d41e      	bmi.n	8009e1a <_malloc_r+0xc6>
 8009ddc:	2a0b      	cmp	r2, #11
 8009dde:	d916      	bls.n	8009e0e <_malloc_r+0xba>
 8009de0:	1961      	adds	r1, r4, r5
 8009de2:	42a3      	cmp	r3, r4
 8009de4:	6025      	str	r5, [r4, #0]
 8009de6:	bf18      	it	ne
 8009de8:	6059      	strne	r1, [r3, #4]
 8009dea:	6863      	ldr	r3, [r4, #4]
 8009dec:	bf08      	it	eq
 8009dee:	6031      	streq	r1, [r6, #0]
 8009df0:	5162      	str	r2, [r4, r5]
 8009df2:	604b      	str	r3, [r1, #4]
 8009df4:	4638      	mov	r0, r7
 8009df6:	f104 060b 	add.w	r6, r4, #11
 8009dfa:	f000 ff99 	bl	800ad30 <__malloc_unlock>
 8009dfe:	f026 0607 	bic.w	r6, r6, #7
 8009e02:	1d23      	adds	r3, r4, #4
 8009e04:	1af2      	subs	r2, r6, r3
 8009e06:	d0b6      	beq.n	8009d76 <_malloc_r+0x22>
 8009e08:	1b9b      	subs	r3, r3, r6
 8009e0a:	50a3      	str	r3, [r4, r2]
 8009e0c:	e7b3      	b.n	8009d76 <_malloc_r+0x22>
 8009e0e:	6862      	ldr	r2, [r4, #4]
 8009e10:	42a3      	cmp	r3, r4
 8009e12:	bf0c      	ite	eq
 8009e14:	6032      	streq	r2, [r6, #0]
 8009e16:	605a      	strne	r2, [r3, #4]
 8009e18:	e7ec      	b.n	8009df4 <_malloc_r+0xa0>
 8009e1a:	4623      	mov	r3, r4
 8009e1c:	6864      	ldr	r4, [r4, #4]
 8009e1e:	e7b2      	b.n	8009d86 <_malloc_r+0x32>
 8009e20:	4634      	mov	r4, r6
 8009e22:	6876      	ldr	r6, [r6, #4]
 8009e24:	e7b9      	b.n	8009d9a <_malloc_r+0x46>
 8009e26:	230c      	movs	r3, #12
 8009e28:	4638      	mov	r0, r7
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	f000 ff80 	bl	800ad30 <__malloc_unlock>
 8009e30:	e7a1      	b.n	8009d76 <_malloc_r+0x22>
 8009e32:	6025      	str	r5, [r4, #0]
 8009e34:	e7de      	b.n	8009df4 <_malloc_r+0xa0>
 8009e36:	bf00      	nop
 8009e38:	200014a8 	.word	0x200014a8

08009e3c <__ssputs_r>:
 8009e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e40:	688e      	ldr	r6, [r1, #8]
 8009e42:	4682      	mov	sl, r0
 8009e44:	429e      	cmp	r6, r3
 8009e46:	460c      	mov	r4, r1
 8009e48:	4690      	mov	r8, r2
 8009e4a:	461f      	mov	r7, r3
 8009e4c:	d838      	bhi.n	8009ec0 <__ssputs_r+0x84>
 8009e4e:	898a      	ldrh	r2, [r1, #12]
 8009e50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e54:	d032      	beq.n	8009ebc <__ssputs_r+0x80>
 8009e56:	6825      	ldr	r5, [r4, #0]
 8009e58:	6909      	ldr	r1, [r1, #16]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	eba5 0901 	sub.w	r9, r5, r1
 8009e60:	6965      	ldr	r5, [r4, #20]
 8009e62:	444b      	add	r3, r9
 8009e64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e6c:	106d      	asrs	r5, r5, #1
 8009e6e:	429d      	cmp	r5, r3
 8009e70:	bf38      	it	cc
 8009e72:	461d      	movcc	r5, r3
 8009e74:	0553      	lsls	r3, r2, #21
 8009e76:	d531      	bpl.n	8009edc <__ssputs_r+0xa0>
 8009e78:	4629      	mov	r1, r5
 8009e7a:	f7ff ff6b 	bl	8009d54 <_malloc_r>
 8009e7e:	4606      	mov	r6, r0
 8009e80:	b950      	cbnz	r0, 8009e98 <__ssputs_r+0x5c>
 8009e82:	230c      	movs	r3, #12
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295
 8009e88:	f8ca 3000 	str.w	r3, [sl]
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e92:	81a3      	strh	r3, [r4, #12]
 8009e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e98:	464a      	mov	r2, r9
 8009e9a:	6921      	ldr	r1, [r4, #16]
 8009e9c:	f000 ff1a 	bl	800acd4 <memcpy>
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eaa:	81a3      	strh	r3, [r4, #12]
 8009eac:	6126      	str	r6, [r4, #16]
 8009eae:	444e      	add	r6, r9
 8009eb0:	6026      	str	r6, [r4, #0]
 8009eb2:	463e      	mov	r6, r7
 8009eb4:	6165      	str	r5, [r4, #20]
 8009eb6:	eba5 0509 	sub.w	r5, r5, r9
 8009eba:	60a5      	str	r5, [r4, #8]
 8009ebc:	42be      	cmp	r6, r7
 8009ebe:	d900      	bls.n	8009ec2 <__ssputs_r+0x86>
 8009ec0:	463e      	mov	r6, r7
 8009ec2:	4632      	mov	r2, r6
 8009ec4:	4641      	mov	r1, r8
 8009ec6:	6820      	ldr	r0, [r4, #0]
 8009ec8:	f000 ff12 	bl	800acf0 <memmove>
 8009ecc:	68a3      	ldr	r3, [r4, #8]
 8009ece:	2000      	movs	r0, #0
 8009ed0:	1b9b      	subs	r3, r3, r6
 8009ed2:	60a3      	str	r3, [r4, #8]
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	4433      	add	r3, r6
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	e7db      	b.n	8009e94 <__ssputs_r+0x58>
 8009edc:	462a      	mov	r2, r5
 8009ede:	f000 ff2d 	bl	800ad3c <_realloc_r>
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d1e1      	bne.n	8009eac <__ssputs_r+0x70>
 8009ee8:	4650      	mov	r0, sl
 8009eea:	6921      	ldr	r1, [r4, #16]
 8009eec:	f7ff feca 	bl	8009c84 <_free_r>
 8009ef0:	e7c7      	b.n	8009e82 <__ssputs_r+0x46>
	...

08009ef4 <_svfiprintf_r>:
 8009ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef8:	4698      	mov	r8, r3
 8009efa:	898b      	ldrh	r3, [r1, #12]
 8009efc:	4607      	mov	r7, r0
 8009efe:	061b      	lsls	r3, r3, #24
 8009f00:	460d      	mov	r5, r1
 8009f02:	4614      	mov	r4, r2
 8009f04:	b09d      	sub	sp, #116	; 0x74
 8009f06:	d50e      	bpl.n	8009f26 <_svfiprintf_r+0x32>
 8009f08:	690b      	ldr	r3, [r1, #16]
 8009f0a:	b963      	cbnz	r3, 8009f26 <_svfiprintf_r+0x32>
 8009f0c:	2140      	movs	r1, #64	; 0x40
 8009f0e:	f7ff ff21 	bl	8009d54 <_malloc_r>
 8009f12:	6028      	str	r0, [r5, #0]
 8009f14:	6128      	str	r0, [r5, #16]
 8009f16:	b920      	cbnz	r0, 8009f22 <_svfiprintf_r+0x2e>
 8009f18:	230c      	movs	r3, #12
 8009f1a:	603b      	str	r3, [r7, #0]
 8009f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f20:	e0d1      	b.n	800a0c6 <_svfiprintf_r+0x1d2>
 8009f22:	2340      	movs	r3, #64	; 0x40
 8009f24:	616b      	str	r3, [r5, #20]
 8009f26:	2300      	movs	r3, #0
 8009f28:	9309      	str	r3, [sp, #36]	; 0x24
 8009f2a:	2320      	movs	r3, #32
 8009f2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f30:	2330      	movs	r3, #48	; 0x30
 8009f32:	f04f 0901 	mov.w	r9, #1
 8009f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a0e0 <_svfiprintf_r+0x1ec>
 8009f3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f42:	4623      	mov	r3, r4
 8009f44:	469a      	mov	sl, r3
 8009f46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f4a:	b10a      	cbz	r2, 8009f50 <_svfiprintf_r+0x5c>
 8009f4c:	2a25      	cmp	r2, #37	; 0x25
 8009f4e:	d1f9      	bne.n	8009f44 <_svfiprintf_r+0x50>
 8009f50:	ebba 0b04 	subs.w	fp, sl, r4
 8009f54:	d00b      	beq.n	8009f6e <_svfiprintf_r+0x7a>
 8009f56:	465b      	mov	r3, fp
 8009f58:	4622      	mov	r2, r4
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f7ff ff6d 	bl	8009e3c <__ssputs_r>
 8009f62:	3001      	adds	r0, #1
 8009f64:	f000 80aa 	beq.w	800a0bc <_svfiprintf_r+0x1c8>
 8009f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f6a:	445a      	add	r2, fp
 8009f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f000 80a2 	beq.w	800a0bc <_svfiprintf_r+0x1c8>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f82:	f10a 0a01 	add.w	sl, sl, #1
 8009f86:	9304      	str	r3, [sp, #16]
 8009f88:	9307      	str	r3, [sp, #28]
 8009f8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f8e:	931a      	str	r3, [sp, #104]	; 0x68
 8009f90:	4654      	mov	r4, sl
 8009f92:	2205      	movs	r2, #5
 8009f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f98:	4851      	ldr	r0, [pc, #324]	; (800a0e0 <_svfiprintf_r+0x1ec>)
 8009f9a:	f000 fe8d 	bl	800acb8 <memchr>
 8009f9e:	9a04      	ldr	r2, [sp, #16]
 8009fa0:	b9d8      	cbnz	r0, 8009fda <_svfiprintf_r+0xe6>
 8009fa2:	06d0      	lsls	r0, r2, #27
 8009fa4:	bf44      	itt	mi
 8009fa6:	2320      	movmi	r3, #32
 8009fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fac:	0711      	lsls	r1, r2, #28
 8009fae:	bf44      	itt	mi
 8009fb0:	232b      	movmi	r3, #43	; 0x2b
 8009fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8009fba:	2b2a      	cmp	r3, #42	; 0x2a
 8009fbc:	d015      	beq.n	8009fea <_svfiprintf_r+0xf6>
 8009fbe:	4654      	mov	r4, sl
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	f04f 0c0a 	mov.w	ip, #10
 8009fc6:	9a07      	ldr	r2, [sp, #28]
 8009fc8:	4621      	mov	r1, r4
 8009fca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fce:	3b30      	subs	r3, #48	; 0x30
 8009fd0:	2b09      	cmp	r3, #9
 8009fd2:	d94e      	bls.n	800a072 <_svfiprintf_r+0x17e>
 8009fd4:	b1b0      	cbz	r0, 800a004 <_svfiprintf_r+0x110>
 8009fd6:	9207      	str	r2, [sp, #28]
 8009fd8:	e014      	b.n	800a004 <_svfiprintf_r+0x110>
 8009fda:	eba0 0308 	sub.w	r3, r0, r8
 8009fde:	fa09 f303 	lsl.w	r3, r9, r3
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	46a2      	mov	sl, r4
 8009fe6:	9304      	str	r3, [sp, #16]
 8009fe8:	e7d2      	b.n	8009f90 <_svfiprintf_r+0x9c>
 8009fea:	9b03      	ldr	r3, [sp, #12]
 8009fec:	1d19      	adds	r1, r3, #4
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	9103      	str	r1, [sp, #12]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	bfbb      	ittet	lt
 8009ff6:	425b      	neglt	r3, r3
 8009ff8:	f042 0202 	orrlt.w	r2, r2, #2
 8009ffc:	9307      	strge	r3, [sp, #28]
 8009ffe:	9307      	strlt	r3, [sp, #28]
 800a000:	bfb8      	it	lt
 800a002:	9204      	strlt	r2, [sp, #16]
 800a004:	7823      	ldrb	r3, [r4, #0]
 800a006:	2b2e      	cmp	r3, #46	; 0x2e
 800a008:	d10c      	bne.n	800a024 <_svfiprintf_r+0x130>
 800a00a:	7863      	ldrb	r3, [r4, #1]
 800a00c:	2b2a      	cmp	r3, #42	; 0x2a
 800a00e:	d135      	bne.n	800a07c <_svfiprintf_r+0x188>
 800a010:	9b03      	ldr	r3, [sp, #12]
 800a012:	3402      	adds	r4, #2
 800a014:	1d1a      	adds	r2, r3, #4
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	9203      	str	r2, [sp, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	bfb8      	it	lt
 800a01e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a022:	9305      	str	r3, [sp, #20]
 800a024:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a0e4 <_svfiprintf_r+0x1f0>
 800a028:	2203      	movs	r2, #3
 800a02a:	4650      	mov	r0, sl
 800a02c:	7821      	ldrb	r1, [r4, #0]
 800a02e:	f000 fe43 	bl	800acb8 <memchr>
 800a032:	b140      	cbz	r0, 800a046 <_svfiprintf_r+0x152>
 800a034:	2340      	movs	r3, #64	; 0x40
 800a036:	eba0 000a 	sub.w	r0, r0, sl
 800a03a:	fa03 f000 	lsl.w	r0, r3, r0
 800a03e:	9b04      	ldr	r3, [sp, #16]
 800a040:	3401      	adds	r4, #1
 800a042:	4303      	orrs	r3, r0
 800a044:	9304      	str	r3, [sp, #16]
 800a046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a04a:	2206      	movs	r2, #6
 800a04c:	4826      	ldr	r0, [pc, #152]	; (800a0e8 <_svfiprintf_r+0x1f4>)
 800a04e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a052:	f000 fe31 	bl	800acb8 <memchr>
 800a056:	2800      	cmp	r0, #0
 800a058:	d038      	beq.n	800a0cc <_svfiprintf_r+0x1d8>
 800a05a:	4b24      	ldr	r3, [pc, #144]	; (800a0ec <_svfiprintf_r+0x1f8>)
 800a05c:	bb1b      	cbnz	r3, 800a0a6 <_svfiprintf_r+0x1b2>
 800a05e:	9b03      	ldr	r3, [sp, #12]
 800a060:	3307      	adds	r3, #7
 800a062:	f023 0307 	bic.w	r3, r3, #7
 800a066:	3308      	adds	r3, #8
 800a068:	9303      	str	r3, [sp, #12]
 800a06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06c:	4433      	add	r3, r6
 800a06e:	9309      	str	r3, [sp, #36]	; 0x24
 800a070:	e767      	b.n	8009f42 <_svfiprintf_r+0x4e>
 800a072:	460c      	mov	r4, r1
 800a074:	2001      	movs	r0, #1
 800a076:	fb0c 3202 	mla	r2, ip, r2, r3
 800a07a:	e7a5      	b.n	8009fc8 <_svfiprintf_r+0xd4>
 800a07c:	2300      	movs	r3, #0
 800a07e:	f04f 0c0a 	mov.w	ip, #10
 800a082:	4619      	mov	r1, r3
 800a084:	3401      	adds	r4, #1
 800a086:	9305      	str	r3, [sp, #20]
 800a088:	4620      	mov	r0, r4
 800a08a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a08e:	3a30      	subs	r2, #48	; 0x30
 800a090:	2a09      	cmp	r2, #9
 800a092:	d903      	bls.n	800a09c <_svfiprintf_r+0x1a8>
 800a094:	2b00      	cmp	r3, #0
 800a096:	d0c5      	beq.n	800a024 <_svfiprintf_r+0x130>
 800a098:	9105      	str	r1, [sp, #20]
 800a09a:	e7c3      	b.n	800a024 <_svfiprintf_r+0x130>
 800a09c:	4604      	mov	r4, r0
 800a09e:	2301      	movs	r3, #1
 800a0a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0a4:	e7f0      	b.n	800a088 <_svfiprintf_r+0x194>
 800a0a6:	ab03      	add	r3, sp, #12
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	462a      	mov	r2, r5
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	4b10      	ldr	r3, [pc, #64]	; (800a0f0 <_svfiprintf_r+0x1fc>)
 800a0b0:	a904      	add	r1, sp, #16
 800a0b2:	f3af 8000 	nop.w
 800a0b6:	1c42      	adds	r2, r0, #1
 800a0b8:	4606      	mov	r6, r0
 800a0ba:	d1d6      	bne.n	800a06a <_svfiprintf_r+0x176>
 800a0bc:	89ab      	ldrh	r3, [r5, #12]
 800a0be:	065b      	lsls	r3, r3, #25
 800a0c0:	f53f af2c 	bmi.w	8009f1c <_svfiprintf_r+0x28>
 800a0c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0c6:	b01d      	add	sp, #116	; 0x74
 800a0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0cc:	ab03      	add	r3, sp, #12
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	462a      	mov	r2, r5
 800a0d2:	4638      	mov	r0, r7
 800a0d4:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <_svfiprintf_r+0x1fc>)
 800a0d6:	a904      	add	r1, sp, #16
 800a0d8:	f000 f9d4 	bl	800a484 <_printf_i>
 800a0dc:	e7eb      	b.n	800a0b6 <_svfiprintf_r+0x1c2>
 800a0de:	bf00      	nop
 800a0e0:	0800d23a 	.word	0x0800d23a
 800a0e4:	0800d240 	.word	0x0800d240
 800a0e8:	0800d244 	.word	0x0800d244
 800a0ec:	00000000 	.word	0x00000000
 800a0f0:	08009e3d 	.word	0x08009e3d

0800a0f4 <__sfputc_r>:
 800a0f4:	6893      	ldr	r3, [r2, #8]
 800a0f6:	b410      	push	{r4}
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	6093      	str	r3, [r2, #8]
 800a0fe:	da07      	bge.n	800a110 <__sfputc_r+0x1c>
 800a100:	6994      	ldr	r4, [r2, #24]
 800a102:	42a3      	cmp	r3, r4
 800a104:	db01      	blt.n	800a10a <__sfputc_r+0x16>
 800a106:	290a      	cmp	r1, #10
 800a108:	d102      	bne.n	800a110 <__sfputc_r+0x1c>
 800a10a:	bc10      	pop	{r4}
 800a10c:	f000 baf0 	b.w	800a6f0 <__swbuf_r>
 800a110:	6813      	ldr	r3, [r2, #0]
 800a112:	1c58      	adds	r0, r3, #1
 800a114:	6010      	str	r0, [r2, #0]
 800a116:	7019      	strb	r1, [r3, #0]
 800a118:	4608      	mov	r0, r1
 800a11a:	bc10      	pop	{r4}
 800a11c:	4770      	bx	lr

0800a11e <__sfputs_r>:
 800a11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a120:	4606      	mov	r6, r0
 800a122:	460f      	mov	r7, r1
 800a124:	4614      	mov	r4, r2
 800a126:	18d5      	adds	r5, r2, r3
 800a128:	42ac      	cmp	r4, r5
 800a12a:	d101      	bne.n	800a130 <__sfputs_r+0x12>
 800a12c:	2000      	movs	r0, #0
 800a12e:	e007      	b.n	800a140 <__sfputs_r+0x22>
 800a130:	463a      	mov	r2, r7
 800a132:	4630      	mov	r0, r6
 800a134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a138:	f7ff ffdc 	bl	800a0f4 <__sfputc_r>
 800a13c:	1c43      	adds	r3, r0, #1
 800a13e:	d1f3      	bne.n	800a128 <__sfputs_r+0xa>
 800a140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a144 <_vfiprintf_r>:
 800a144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a148:	460d      	mov	r5, r1
 800a14a:	4614      	mov	r4, r2
 800a14c:	4698      	mov	r8, r3
 800a14e:	4606      	mov	r6, r0
 800a150:	b09d      	sub	sp, #116	; 0x74
 800a152:	b118      	cbz	r0, 800a15c <_vfiprintf_r+0x18>
 800a154:	6983      	ldr	r3, [r0, #24]
 800a156:	b90b      	cbnz	r3, 800a15c <_vfiprintf_r+0x18>
 800a158:	f000 fca8 	bl	800aaac <__sinit>
 800a15c:	4b89      	ldr	r3, [pc, #548]	; (800a384 <_vfiprintf_r+0x240>)
 800a15e:	429d      	cmp	r5, r3
 800a160:	d11b      	bne.n	800a19a <_vfiprintf_r+0x56>
 800a162:	6875      	ldr	r5, [r6, #4]
 800a164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a166:	07d9      	lsls	r1, r3, #31
 800a168:	d405      	bmi.n	800a176 <_vfiprintf_r+0x32>
 800a16a:	89ab      	ldrh	r3, [r5, #12]
 800a16c:	059a      	lsls	r2, r3, #22
 800a16e:	d402      	bmi.n	800a176 <_vfiprintf_r+0x32>
 800a170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a172:	f000 fd39 	bl	800abe8 <__retarget_lock_acquire_recursive>
 800a176:	89ab      	ldrh	r3, [r5, #12]
 800a178:	071b      	lsls	r3, r3, #28
 800a17a:	d501      	bpl.n	800a180 <_vfiprintf_r+0x3c>
 800a17c:	692b      	ldr	r3, [r5, #16]
 800a17e:	b9eb      	cbnz	r3, 800a1bc <_vfiprintf_r+0x78>
 800a180:	4629      	mov	r1, r5
 800a182:	4630      	mov	r0, r6
 800a184:	f000 fb06 	bl	800a794 <__swsetup_r>
 800a188:	b1c0      	cbz	r0, 800a1bc <_vfiprintf_r+0x78>
 800a18a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a18c:	07dc      	lsls	r4, r3, #31
 800a18e:	d50e      	bpl.n	800a1ae <_vfiprintf_r+0x6a>
 800a190:	f04f 30ff 	mov.w	r0, #4294967295
 800a194:	b01d      	add	sp, #116	; 0x74
 800a196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a19a:	4b7b      	ldr	r3, [pc, #492]	; (800a388 <_vfiprintf_r+0x244>)
 800a19c:	429d      	cmp	r5, r3
 800a19e:	d101      	bne.n	800a1a4 <_vfiprintf_r+0x60>
 800a1a0:	68b5      	ldr	r5, [r6, #8]
 800a1a2:	e7df      	b.n	800a164 <_vfiprintf_r+0x20>
 800a1a4:	4b79      	ldr	r3, [pc, #484]	; (800a38c <_vfiprintf_r+0x248>)
 800a1a6:	429d      	cmp	r5, r3
 800a1a8:	bf08      	it	eq
 800a1aa:	68f5      	ldreq	r5, [r6, #12]
 800a1ac:	e7da      	b.n	800a164 <_vfiprintf_r+0x20>
 800a1ae:	89ab      	ldrh	r3, [r5, #12]
 800a1b0:	0598      	lsls	r0, r3, #22
 800a1b2:	d4ed      	bmi.n	800a190 <_vfiprintf_r+0x4c>
 800a1b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1b6:	f000 fd18 	bl	800abea <__retarget_lock_release_recursive>
 800a1ba:	e7e9      	b.n	800a190 <_vfiprintf_r+0x4c>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c0:	2320      	movs	r3, #32
 800a1c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1c6:	2330      	movs	r3, #48	; 0x30
 800a1c8:	f04f 0901 	mov.w	r9, #1
 800a1cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a390 <_vfiprintf_r+0x24c>
 800a1d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1d8:	4623      	mov	r3, r4
 800a1da:	469a      	mov	sl, r3
 800a1dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1e0:	b10a      	cbz	r2, 800a1e6 <_vfiprintf_r+0xa2>
 800a1e2:	2a25      	cmp	r2, #37	; 0x25
 800a1e4:	d1f9      	bne.n	800a1da <_vfiprintf_r+0x96>
 800a1e6:	ebba 0b04 	subs.w	fp, sl, r4
 800a1ea:	d00b      	beq.n	800a204 <_vfiprintf_r+0xc0>
 800a1ec:	465b      	mov	r3, fp
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	f7ff ff93 	bl	800a11e <__sfputs_r>
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	f000 80aa 	beq.w	800a352 <_vfiprintf_r+0x20e>
 800a1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a200:	445a      	add	r2, fp
 800a202:	9209      	str	r2, [sp, #36]	; 0x24
 800a204:	f89a 3000 	ldrb.w	r3, [sl]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 80a2 	beq.w	800a352 <_vfiprintf_r+0x20e>
 800a20e:	2300      	movs	r3, #0
 800a210:	f04f 32ff 	mov.w	r2, #4294967295
 800a214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a218:	f10a 0a01 	add.w	sl, sl, #1
 800a21c:	9304      	str	r3, [sp, #16]
 800a21e:	9307      	str	r3, [sp, #28]
 800a220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a224:	931a      	str	r3, [sp, #104]	; 0x68
 800a226:	4654      	mov	r4, sl
 800a228:	2205      	movs	r2, #5
 800a22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a22e:	4858      	ldr	r0, [pc, #352]	; (800a390 <_vfiprintf_r+0x24c>)
 800a230:	f000 fd42 	bl	800acb8 <memchr>
 800a234:	9a04      	ldr	r2, [sp, #16]
 800a236:	b9d8      	cbnz	r0, 800a270 <_vfiprintf_r+0x12c>
 800a238:	06d1      	lsls	r1, r2, #27
 800a23a:	bf44      	itt	mi
 800a23c:	2320      	movmi	r3, #32
 800a23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a242:	0713      	lsls	r3, r2, #28
 800a244:	bf44      	itt	mi
 800a246:	232b      	movmi	r3, #43	; 0x2b
 800a248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a24c:	f89a 3000 	ldrb.w	r3, [sl]
 800a250:	2b2a      	cmp	r3, #42	; 0x2a
 800a252:	d015      	beq.n	800a280 <_vfiprintf_r+0x13c>
 800a254:	4654      	mov	r4, sl
 800a256:	2000      	movs	r0, #0
 800a258:	f04f 0c0a 	mov.w	ip, #10
 800a25c:	9a07      	ldr	r2, [sp, #28]
 800a25e:	4621      	mov	r1, r4
 800a260:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a264:	3b30      	subs	r3, #48	; 0x30
 800a266:	2b09      	cmp	r3, #9
 800a268:	d94e      	bls.n	800a308 <_vfiprintf_r+0x1c4>
 800a26a:	b1b0      	cbz	r0, 800a29a <_vfiprintf_r+0x156>
 800a26c:	9207      	str	r2, [sp, #28]
 800a26e:	e014      	b.n	800a29a <_vfiprintf_r+0x156>
 800a270:	eba0 0308 	sub.w	r3, r0, r8
 800a274:	fa09 f303 	lsl.w	r3, r9, r3
 800a278:	4313      	orrs	r3, r2
 800a27a:	46a2      	mov	sl, r4
 800a27c:	9304      	str	r3, [sp, #16]
 800a27e:	e7d2      	b.n	800a226 <_vfiprintf_r+0xe2>
 800a280:	9b03      	ldr	r3, [sp, #12]
 800a282:	1d19      	adds	r1, r3, #4
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	9103      	str	r1, [sp, #12]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	bfbb      	ittet	lt
 800a28c:	425b      	neglt	r3, r3
 800a28e:	f042 0202 	orrlt.w	r2, r2, #2
 800a292:	9307      	strge	r3, [sp, #28]
 800a294:	9307      	strlt	r3, [sp, #28]
 800a296:	bfb8      	it	lt
 800a298:	9204      	strlt	r2, [sp, #16]
 800a29a:	7823      	ldrb	r3, [r4, #0]
 800a29c:	2b2e      	cmp	r3, #46	; 0x2e
 800a29e:	d10c      	bne.n	800a2ba <_vfiprintf_r+0x176>
 800a2a0:	7863      	ldrb	r3, [r4, #1]
 800a2a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2a4:	d135      	bne.n	800a312 <_vfiprintf_r+0x1ce>
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	3402      	adds	r4, #2
 800a2aa:	1d1a      	adds	r2, r3, #4
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	9203      	str	r2, [sp, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	bfb8      	it	lt
 800a2b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2b8:	9305      	str	r3, [sp, #20]
 800a2ba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a394 <_vfiprintf_r+0x250>
 800a2be:	2203      	movs	r2, #3
 800a2c0:	4650      	mov	r0, sl
 800a2c2:	7821      	ldrb	r1, [r4, #0]
 800a2c4:	f000 fcf8 	bl	800acb8 <memchr>
 800a2c8:	b140      	cbz	r0, 800a2dc <_vfiprintf_r+0x198>
 800a2ca:	2340      	movs	r3, #64	; 0x40
 800a2cc:	eba0 000a 	sub.w	r0, r0, sl
 800a2d0:	fa03 f000 	lsl.w	r0, r3, r0
 800a2d4:	9b04      	ldr	r3, [sp, #16]
 800a2d6:	3401      	adds	r4, #1
 800a2d8:	4303      	orrs	r3, r0
 800a2da:	9304      	str	r3, [sp, #16]
 800a2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2e0:	2206      	movs	r2, #6
 800a2e2:	482d      	ldr	r0, [pc, #180]	; (800a398 <_vfiprintf_r+0x254>)
 800a2e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2e8:	f000 fce6 	bl	800acb8 <memchr>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d03f      	beq.n	800a370 <_vfiprintf_r+0x22c>
 800a2f0:	4b2a      	ldr	r3, [pc, #168]	; (800a39c <_vfiprintf_r+0x258>)
 800a2f2:	bb1b      	cbnz	r3, 800a33c <_vfiprintf_r+0x1f8>
 800a2f4:	9b03      	ldr	r3, [sp, #12]
 800a2f6:	3307      	adds	r3, #7
 800a2f8:	f023 0307 	bic.w	r3, r3, #7
 800a2fc:	3308      	adds	r3, #8
 800a2fe:	9303      	str	r3, [sp, #12]
 800a300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a302:	443b      	add	r3, r7
 800a304:	9309      	str	r3, [sp, #36]	; 0x24
 800a306:	e767      	b.n	800a1d8 <_vfiprintf_r+0x94>
 800a308:	460c      	mov	r4, r1
 800a30a:	2001      	movs	r0, #1
 800a30c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a310:	e7a5      	b.n	800a25e <_vfiprintf_r+0x11a>
 800a312:	2300      	movs	r3, #0
 800a314:	f04f 0c0a 	mov.w	ip, #10
 800a318:	4619      	mov	r1, r3
 800a31a:	3401      	adds	r4, #1
 800a31c:	9305      	str	r3, [sp, #20]
 800a31e:	4620      	mov	r0, r4
 800a320:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a324:	3a30      	subs	r2, #48	; 0x30
 800a326:	2a09      	cmp	r2, #9
 800a328:	d903      	bls.n	800a332 <_vfiprintf_r+0x1ee>
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0c5      	beq.n	800a2ba <_vfiprintf_r+0x176>
 800a32e:	9105      	str	r1, [sp, #20]
 800a330:	e7c3      	b.n	800a2ba <_vfiprintf_r+0x176>
 800a332:	4604      	mov	r4, r0
 800a334:	2301      	movs	r3, #1
 800a336:	fb0c 2101 	mla	r1, ip, r1, r2
 800a33a:	e7f0      	b.n	800a31e <_vfiprintf_r+0x1da>
 800a33c:	ab03      	add	r3, sp, #12
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	462a      	mov	r2, r5
 800a342:	4630      	mov	r0, r6
 800a344:	4b16      	ldr	r3, [pc, #88]	; (800a3a0 <_vfiprintf_r+0x25c>)
 800a346:	a904      	add	r1, sp, #16
 800a348:	f3af 8000 	nop.w
 800a34c:	4607      	mov	r7, r0
 800a34e:	1c78      	adds	r0, r7, #1
 800a350:	d1d6      	bne.n	800a300 <_vfiprintf_r+0x1bc>
 800a352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a354:	07d9      	lsls	r1, r3, #31
 800a356:	d405      	bmi.n	800a364 <_vfiprintf_r+0x220>
 800a358:	89ab      	ldrh	r3, [r5, #12]
 800a35a:	059a      	lsls	r2, r3, #22
 800a35c:	d402      	bmi.n	800a364 <_vfiprintf_r+0x220>
 800a35e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a360:	f000 fc43 	bl	800abea <__retarget_lock_release_recursive>
 800a364:	89ab      	ldrh	r3, [r5, #12]
 800a366:	065b      	lsls	r3, r3, #25
 800a368:	f53f af12 	bmi.w	800a190 <_vfiprintf_r+0x4c>
 800a36c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a36e:	e711      	b.n	800a194 <_vfiprintf_r+0x50>
 800a370:	ab03      	add	r3, sp, #12
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	462a      	mov	r2, r5
 800a376:	4630      	mov	r0, r6
 800a378:	4b09      	ldr	r3, [pc, #36]	; (800a3a0 <_vfiprintf_r+0x25c>)
 800a37a:	a904      	add	r1, sp, #16
 800a37c:	f000 f882 	bl	800a484 <_printf_i>
 800a380:	e7e4      	b.n	800a34c <_vfiprintf_r+0x208>
 800a382:	bf00      	nop
 800a384:	0800d290 	.word	0x0800d290
 800a388:	0800d2b0 	.word	0x0800d2b0
 800a38c:	0800d270 	.word	0x0800d270
 800a390:	0800d23a 	.word	0x0800d23a
 800a394:	0800d240 	.word	0x0800d240
 800a398:	0800d244 	.word	0x0800d244
 800a39c:	00000000 	.word	0x00000000
 800a3a0:	0800a11f 	.word	0x0800a11f

0800a3a4 <_printf_common>:
 800a3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a8:	4616      	mov	r6, r2
 800a3aa:	4699      	mov	r9, r3
 800a3ac:	688a      	ldr	r2, [r1, #8]
 800a3ae:	690b      	ldr	r3, [r1, #16]
 800a3b0:	4607      	mov	r7, r0
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	bfb8      	it	lt
 800a3b6:	4613      	movlt	r3, r2
 800a3b8:	6033      	str	r3, [r6, #0]
 800a3ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3be:	460c      	mov	r4, r1
 800a3c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3c4:	b10a      	cbz	r2, 800a3ca <_printf_common+0x26>
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	6033      	str	r3, [r6, #0]
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	0699      	lsls	r1, r3, #26
 800a3ce:	bf42      	ittt	mi
 800a3d0:	6833      	ldrmi	r3, [r6, #0]
 800a3d2:	3302      	addmi	r3, #2
 800a3d4:	6033      	strmi	r3, [r6, #0]
 800a3d6:	6825      	ldr	r5, [r4, #0]
 800a3d8:	f015 0506 	ands.w	r5, r5, #6
 800a3dc:	d106      	bne.n	800a3ec <_printf_common+0x48>
 800a3de:	f104 0a19 	add.w	sl, r4, #25
 800a3e2:	68e3      	ldr	r3, [r4, #12]
 800a3e4:	6832      	ldr	r2, [r6, #0]
 800a3e6:	1a9b      	subs	r3, r3, r2
 800a3e8:	42ab      	cmp	r3, r5
 800a3ea:	dc28      	bgt.n	800a43e <_printf_common+0x9a>
 800a3ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3f0:	1e13      	subs	r3, r2, #0
 800a3f2:	6822      	ldr	r2, [r4, #0]
 800a3f4:	bf18      	it	ne
 800a3f6:	2301      	movne	r3, #1
 800a3f8:	0692      	lsls	r2, r2, #26
 800a3fa:	d42d      	bmi.n	800a458 <_printf_common+0xb4>
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	4638      	mov	r0, r7
 800a400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a404:	47c0      	blx	r8
 800a406:	3001      	adds	r0, #1
 800a408:	d020      	beq.n	800a44c <_printf_common+0xa8>
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	68e5      	ldr	r5, [r4, #12]
 800a40e:	f003 0306 	and.w	r3, r3, #6
 800a412:	2b04      	cmp	r3, #4
 800a414:	bf18      	it	ne
 800a416:	2500      	movne	r5, #0
 800a418:	6832      	ldr	r2, [r6, #0]
 800a41a:	f04f 0600 	mov.w	r6, #0
 800a41e:	68a3      	ldr	r3, [r4, #8]
 800a420:	bf08      	it	eq
 800a422:	1aad      	subeq	r5, r5, r2
 800a424:	6922      	ldr	r2, [r4, #16]
 800a426:	bf08      	it	eq
 800a428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a42c:	4293      	cmp	r3, r2
 800a42e:	bfc4      	itt	gt
 800a430:	1a9b      	subgt	r3, r3, r2
 800a432:	18ed      	addgt	r5, r5, r3
 800a434:	341a      	adds	r4, #26
 800a436:	42b5      	cmp	r5, r6
 800a438:	d11a      	bne.n	800a470 <_printf_common+0xcc>
 800a43a:	2000      	movs	r0, #0
 800a43c:	e008      	b.n	800a450 <_printf_common+0xac>
 800a43e:	2301      	movs	r3, #1
 800a440:	4652      	mov	r2, sl
 800a442:	4649      	mov	r1, r9
 800a444:	4638      	mov	r0, r7
 800a446:	47c0      	blx	r8
 800a448:	3001      	adds	r0, #1
 800a44a:	d103      	bne.n	800a454 <_printf_common+0xb0>
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a454:	3501      	adds	r5, #1
 800a456:	e7c4      	b.n	800a3e2 <_printf_common+0x3e>
 800a458:	2030      	movs	r0, #48	; 0x30
 800a45a:	18e1      	adds	r1, r4, r3
 800a45c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a460:	1c5a      	adds	r2, r3, #1
 800a462:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a466:	4422      	add	r2, r4
 800a468:	3302      	adds	r3, #2
 800a46a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a46e:	e7c5      	b.n	800a3fc <_printf_common+0x58>
 800a470:	2301      	movs	r3, #1
 800a472:	4622      	mov	r2, r4
 800a474:	4649      	mov	r1, r9
 800a476:	4638      	mov	r0, r7
 800a478:	47c0      	blx	r8
 800a47a:	3001      	adds	r0, #1
 800a47c:	d0e6      	beq.n	800a44c <_printf_common+0xa8>
 800a47e:	3601      	adds	r6, #1
 800a480:	e7d9      	b.n	800a436 <_printf_common+0x92>
	...

0800a484 <_printf_i>:
 800a484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a488:	7e0f      	ldrb	r7, [r1, #24]
 800a48a:	4691      	mov	r9, r2
 800a48c:	2f78      	cmp	r7, #120	; 0x78
 800a48e:	4680      	mov	r8, r0
 800a490:	460c      	mov	r4, r1
 800a492:	469a      	mov	sl, r3
 800a494:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a496:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a49a:	d807      	bhi.n	800a4ac <_printf_i+0x28>
 800a49c:	2f62      	cmp	r7, #98	; 0x62
 800a49e:	d80a      	bhi.n	800a4b6 <_printf_i+0x32>
 800a4a0:	2f00      	cmp	r7, #0
 800a4a2:	f000 80d9 	beq.w	800a658 <_printf_i+0x1d4>
 800a4a6:	2f58      	cmp	r7, #88	; 0x58
 800a4a8:	f000 80a4 	beq.w	800a5f4 <_printf_i+0x170>
 800a4ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4b4:	e03a      	b.n	800a52c <_printf_i+0xa8>
 800a4b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4ba:	2b15      	cmp	r3, #21
 800a4bc:	d8f6      	bhi.n	800a4ac <_printf_i+0x28>
 800a4be:	a101      	add	r1, pc, #4	; (adr r1, 800a4c4 <_printf_i+0x40>)
 800a4c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4c4:	0800a51d 	.word	0x0800a51d
 800a4c8:	0800a531 	.word	0x0800a531
 800a4cc:	0800a4ad 	.word	0x0800a4ad
 800a4d0:	0800a4ad 	.word	0x0800a4ad
 800a4d4:	0800a4ad 	.word	0x0800a4ad
 800a4d8:	0800a4ad 	.word	0x0800a4ad
 800a4dc:	0800a531 	.word	0x0800a531
 800a4e0:	0800a4ad 	.word	0x0800a4ad
 800a4e4:	0800a4ad 	.word	0x0800a4ad
 800a4e8:	0800a4ad 	.word	0x0800a4ad
 800a4ec:	0800a4ad 	.word	0x0800a4ad
 800a4f0:	0800a63f 	.word	0x0800a63f
 800a4f4:	0800a561 	.word	0x0800a561
 800a4f8:	0800a621 	.word	0x0800a621
 800a4fc:	0800a4ad 	.word	0x0800a4ad
 800a500:	0800a4ad 	.word	0x0800a4ad
 800a504:	0800a661 	.word	0x0800a661
 800a508:	0800a4ad 	.word	0x0800a4ad
 800a50c:	0800a561 	.word	0x0800a561
 800a510:	0800a4ad 	.word	0x0800a4ad
 800a514:	0800a4ad 	.word	0x0800a4ad
 800a518:	0800a629 	.word	0x0800a629
 800a51c:	682b      	ldr	r3, [r5, #0]
 800a51e:	1d1a      	adds	r2, r3, #4
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	602a      	str	r2, [r5, #0]
 800a524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a52c:	2301      	movs	r3, #1
 800a52e:	e0a4      	b.n	800a67a <_printf_i+0x1f6>
 800a530:	6820      	ldr	r0, [r4, #0]
 800a532:	6829      	ldr	r1, [r5, #0]
 800a534:	0606      	lsls	r6, r0, #24
 800a536:	f101 0304 	add.w	r3, r1, #4
 800a53a:	d50a      	bpl.n	800a552 <_printf_i+0xce>
 800a53c:	680e      	ldr	r6, [r1, #0]
 800a53e:	602b      	str	r3, [r5, #0]
 800a540:	2e00      	cmp	r6, #0
 800a542:	da03      	bge.n	800a54c <_printf_i+0xc8>
 800a544:	232d      	movs	r3, #45	; 0x2d
 800a546:	4276      	negs	r6, r6
 800a548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a54c:	230a      	movs	r3, #10
 800a54e:	485e      	ldr	r0, [pc, #376]	; (800a6c8 <_printf_i+0x244>)
 800a550:	e019      	b.n	800a586 <_printf_i+0x102>
 800a552:	680e      	ldr	r6, [r1, #0]
 800a554:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a558:	602b      	str	r3, [r5, #0]
 800a55a:	bf18      	it	ne
 800a55c:	b236      	sxthne	r6, r6
 800a55e:	e7ef      	b.n	800a540 <_printf_i+0xbc>
 800a560:	682b      	ldr	r3, [r5, #0]
 800a562:	6820      	ldr	r0, [r4, #0]
 800a564:	1d19      	adds	r1, r3, #4
 800a566:	6029      	str	r1, [r5, #0]
 800a568:	0601      	lsls	r1, r0, #24
 800a56a:	d501      	bpl.n	800a570 <_printf_i+0xec>
 800a56c:	681e      	ldr	r6, [r3, #0]
 800a56e:	e002      	b.n	800a576 <_printf_i+0xf2>
 800a570:	0646      	lsls	r6, r0, #25
 800a572:	d5fb      	bpl.n	800a56c <_printf_i+0xe8>
 800a574:	881e      	ldrh	r6, [r3, #0]
 800a576:	2f6f      	cmp	r7, #111	; 0x6f
 800a578:	bf0c      	ite	eq
 800a57a:	2308      	moveq	r3, #8
 800a57c:	230a      	movne	r3, #10
 800a57e:	4852      	ldr	r0, [pc, #328]	; (800a6c8 <_printf_i+0x244>)
 800a580:	2100      	movs	r1, #0
 800a582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a586:	6865      	ldr	r5, [r4, #4]
 800a588:	2d00      	cmp	r5, #0
 800a58a:	bfa8      	it	ge
 800a58c:	6821      	ldrge	r1, [r4, #0]
 800a58e:	60a5      	str	r5, [r4, #8]
 800a590:	bfa4      	itt	ge
 800a592:	f021 0104 	bicge.w	r1, r1, #4
 800a596:	6021      	strge	r1, [r4, #0]
 800a598:	b90e      	cbnz	r6, 800a59e <_printf_i+0x11a>
 800a59a:	2d00      	cmp	r5, #0
 800a59c:	d04d      	beq.n	800a63a <_printf_i+0x1b6>
 800a59e:	4615      	mov	r5, r2
 800a5a0:	fbb6 f1f3 	udiv	r1, r6, r3
 800a5a4:	fb03 6711 	mls	r7, r3, r1, r6
 800a5a8:	5dc7      	ldrb	r7, [r0, r7]
 800a5aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a5ae:	4637      	mov	r7, r6
 800a5b0:	42bb      	cmp	r3, r7
 800a5b2:	460e      	mov	r6, r1
 800a5b4:	d9f4      	bls.n	800a5a0 <_printf_i+0x11c>
 800a5b6:	2b08      	cmp	r3, #8
 800a5b8:	d10b      	bne.n	800a5d2 <_printf_i+0x14e>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	07de      	lsls	r6, r3, #31
 800a5be:	d508      	bpl.n	800a5d2 <_printf_i+0x14e>
 800a5c0:	6923      	ldr	r3, [r4, #16]
 800a5c2:	6861      	ldr	r1, [r4, #4]
 800a5c4:	4299      	cmp	r1, r3
 800a5c6:	bfde      	ittt	le
 800a5c8:	2330      	movle	r3, #48	; 0x30
 800a5ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5d2:	1b52      	subs	r2, r2, r5
 800a5d4:	6122      	str	r2, [r4, #16]
 800a5d6:	464b      	mov	r3, r9
 800a5d8:	4621      	mov	r1, r4
 800a5da:	4640      	mov	r0, r8
 800a5dc:	f8cd a000 	str.w	sl, [sp]
 800a5e0:	aa03      	add	r2, sp, #12
 800a5e2:	f7ff fedf 	bl	800a3a4 <_printf_common>
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	d14c      	bne.n	800a684 <_printf_i+0x200>
 800a5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ee:	b004      	add	sp, #16
 800a5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f4:	4834      	ldr	r0, [pc, #208]	; (800a6c8 <_printf_i+0x244>)
 800a5f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a5fa:	6829      	ldr	r1, [r5, #0]
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	f851 6b04 	ldr.w	r6, [r1], #4
 800a602:	6029      	str	r1, [r5, #0]
 800a604:	061d      	lsls	r5, r3, #24
 800a606:	d514      	bpl.n	800a632 <_printf_i+0x1ae>
 800a608:	07df      	lsls	r7, r3, #31
 800a60a:	bf44      	itt	mi
 800a60c:	f043 0320 	orrmi.w	r3, r3, #32
 800a610:	6023      	strmi	r3, [r4, #0]
 800a612:	b91e      	cbnz	r6, 800a61c <_printf_i+0x198>
 800a614:	6823      	ldr	r3, [r4, #0]
 800a616:	f023 0320 	bic.w	r3, r3, #32
 800a61a:	6023      	str	r3, [r4, #0]
 800a61c:	2310      	movs	r3, #16
 800a61e:	e7af      	b.n	800a580 <_printf_i+0xfc>
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	f043 0320 	orr.w	r3, r3, #32
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	2378      	movs	r3, #120	; 0x78
 800a62a:	4828      	ldr	r0, [pc, #160]	; (800a6cc <_printf_i+0x248>)
 800a62c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a630:	e7e3      	b.n	800a5fa <_printf_i+0x176>
 800a632:	0659      	lsls	r1, r3, #25
 800a634:	bf48      	it	mi
 800a636:	b2b6      	uxthmi	r6, r6
 800a638:	e7e6      	b.n	800a608 <_printf_i+0x184>
 800a63a:	4615      	mov	r5, r2
 800a63c:	e7bb      	b.n	800a5b6 <_printf_i+0x132>
 800a63e:	682b      	ldr	r3, [r5, #0]
 800a640:	6826      	ldr	r6, [r4, #0]
 800a642:	1d18      	adds	r0, r3, #4
 800a644:	6961      	ldr	r1, [r4, #20]
 800a646:	6028      	str	r0, [r5, #0]
 800a648:	0635      	lsls	r5, r6, #24
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	d501      	bpl.n	800a652 <_printf_i+0x1ce>
 800a64e:	6019      	str	r1, [r3, #0]
 800a650:	e002      	b.n	800a658 <_printf_i+0x1d4>
 800a652:	0670      	lsls	r0, r6, #25
 800a654:	d5fb      	bpl.n	800a64e <_printf_i+0x1ca>
 800a656:	8019      	strh	r1, [r3, #0]
 800a658:	2300      	movs	r3, #0
 800a65a:	4615      	mov	r5, r2
 800a65c:	6123      	str	r3, [r4, #16]
 800a65e:	e7ba      	b.n	800a5d6 <_printf_i+0x152>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	2100      	movs	r1, #0
 800a664:	1d1a      	adds	r2, r3, #4
 800a666:	602a      	str	r2, [r5, #0]
 800a668:	681d      	ldr	r5, [r3, #0]
 800a66a:	6862      	ldr	r2, [r4, #4]
 800a66c:	4628      	mov	r0, r5
 800a66e:	f000 fb23 	bl	800acb8 <memchr>
 800a672:	b108      	cbz	r0, 800a678 <_printf_i+0x1f4>
 800a674:	1b40      	subs	r0, r0, r5
 800a676:	6060      	str	r0, [r4, #4]
 800a678:	6863      	ldr	r3, [r4, #4]
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	2300      	movs	r3, #0
 800a67e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a682:	e7a8      	b.n	800a5d6 <_printf_i+0x152>
 800a684:	462a      	mov	r2, r5
 800a686:	4649      	mov	r1, r9
 800a688:	4640      	mov	r0, r8
 800a68a:	6923      	ldr	r3, [r4, #16]
 800a68c:	47d0      	blx	sl
 800a68e:	3001      	adds	r0, #1
 800a690:	d0ab      	beq.n	800a5ea <_printf_i+0x166>
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	079b      	lsls	r3, r3, #30
 800a696:	d413      	bmi.n	800a6c0 <_printf_i+0x23c>
 800a698:	68e0      	ldr	r0, [r4, #12]
 800a69a:	9b03      	ldr	r3, [sp, #12]
 800a69c:	4298      	cmp	r0, r3
 800a69e:	bfb8      	it	lt
 800a6a0:	4618      	movlt	r0, r3
 800a6a2:	e7a4      	b.n	800a5ee <_printf_i+0x16a>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	4632      	mov	r2, r6
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	4640      	mov	r0, r8
 800a6ac:	47d0      	blx	sl
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	d09b      	beq.n	800a5ea <_printf_i+0x166>
 800a6b2:	3501      	adds	r5, #1
 800a6b4:	68e3      	ldr	r3, [r4, #12]
 800a6b6:	9903      	ldr	r1, [sp, #12]
 800a6b8:	1a5b      	subs	r3, r3, r1
 800a6ba:	42ab      	cmp	r3, r5
 800a6bc:	dcf2      	bgt.n	800a6a4 <_printf_i+0x220>
 800a6be:	e7eb      	b.n	800a698 <_printf_i+0x214>
 800a6c0:	2500      	movs	r5, #0
 800a6c2:	f104 0619 	add.w	r6, r4, #25
 800a6c6:	e7f5      	b.n	800a6b4 <_printf_i+0x230>
 800a6c8:	0800d24b 	.word	0x0800d24b
 800a6cc:	0800d25c 	.word	0x0800d25c

0800a6d0 <_sbrk_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	4d05      	ldr	r5, [pc, #20]	; (800a6ec <_sbrk_r+0x1c>)
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	4608      	mov	r0, r1
 800a6da:	602b      	str	r3, [r5, #0]
 800a6dc:	f7f7 faee 	bl	8001cbc <_sbrk>
 800a6e0:	1c43      	adds	r3, r0, #1
 800a6e2:	d102      	bne.n	800a6ea <_sbrk_r+0x1a>
 800a6e4:	682b      	ldr	r3, [r5, #0]
 800a6e6:	b103      	cbz	r3, 800a6ea <_sbrk_r+0x1a>
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	200014b4 	.word	0x200014b4

0800a6f0 <__swbuf_r>:
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f2:	460e      	mov	r6, r1
 800a6f4:	4614      	mov	r4, r2
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	b118      	cbz	r0, 800a702 <__swbuf_r+0x12>
 800a6fa:	6983      	ldr	r3, [r0, #24]
 800a6fc:	b90b      	cbnz	r3, 800a702 <__swbuf_r+0x12>
 800a6fe:	f000 f9d5 	bl	800aaac <__sinit>
 800a702:	4b21      	ldr	r3, [pc, #132]	; (800a788 <__swbuf_r+0x98>)
 800a704:	429c      	cmp	r4, r3
 800a706:	d12b      	bne.n	800a760 <__swbuf_r+0x70>
 800a708:	686c      	ldr	r4, [r5, #4]
 800a70a:	69a3      	ldr	r3, [r4, #24]
 800a70c:	60a3      	str	r3, [r4, #8]
 800a70e:	89a3      	ldrh	r3, [r4, #12]
 800a710:	071a      	lsls	r2, r3, #28
 800a712:	d52f      	bpl.n	800a774 <__swbuf_r+0x84>
 800a714:	6923      	ldr	r3, [r4, #16]
 800a716:	b36b      	cbz	r3, 800a774 <__swbuf_r+0x84>
 800a718:	6923      	ldr	r3, [r4, #16]
 800a71a:	6820      	ldr	r0, [r4, #0]
 800a71c:	b2f6      	uxtb	r6, r6
 800a71e:	1ac0      	subs	r0, r0, r3
 800a720:	6963      	ldr	r3, [r4, #20]
 800a722:	4637      	mov	r7, r6
 800a724:	4283      	cmp	r3, r0
 800a726:	dc04      	bgt.n	800a732 <__swbuf_r+0x42>
 800a728:	4621      	mov	r1, r4
 800a72a:	4628      	mov	r0, r5
 800a72c:	f000 f92a 	bl	800a984 <_fflush_r>
 800a730:	bb30      	cbnz	r0, 800a780 <__swbuf_r+0x90>
 800a732:	68a3      	ldr	r3, [r4, #8]
 800a734:	3001      	adds	r0, #1
 800a736:	3b01      	subs	r3, #1
 800a738:	60a3      	str	r3, [r4, #8]
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	6022      	str	r2, [r4, #0]
 800a740:	701e      	strb	r6, [r3, #0]
 800a742:	6963      	ldr	r3, [r4, #20]
 800a744:	4283      	cmp	r3, r0
 800a746:	d004      	beq.n	800a752 <__swbuf_r+0x62>
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	07db      	lsls	r3, r3, #31
 800a74c:	d506      	bpl.n	800a75c <__swbuf_r+0x6c>
 800a74e:	2e0a      	cmp	r6, #10
 800a750:	d104      	bne.n	800a75c <__swbuf_r+0x6c>
 800a752:	4621      	mov	r1, r4
 800a754:	4628      	mov	r0, r5
 800a756:	f000 f915 	bl	800a984 <_fflush_r>
 800a75a:	b988      	cbnz	r0, 800a780 <__swbuf_r+0x90>
 800a75c:	4638      	mov	r0, r7
 800a75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a760:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <__swbuf_r+0x9c>)
 800a762:	429c      	cmp	r4, r3
 800a764:	d101      	bne.n	800a76a <__swbuf_r+0x7a>
 800a766:	68ac      	ldr	r4, [r5, #8]
 800a768:	e7cf      	b.n	800a70a <__swbuf_r+0x1a>
 800a76a:	4b09      	ldr	r3, [pc, #36]	; (800a790 <__swbuf_r+0xa0>)
 800a76c:	429c      	cmp	r4, r3
 800a76e:	bf08      	it	eq
 800a770:	68ec      	ldreq	r4, [r5, #12]
 800a772:	e7ca      	b.n	800a70a <__swbuf_r+0x1a>
 800a774:	4621      	mov	r1, r4
 800a776:	4628      	mov	r0, r5
 800a778:	f000 f80c 	bl	800a794 <__swsetup_r>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d0cb      	beq.n	800a718 <__swbuf_r+0x28>
 800a780:	f04f 37ff 	mov.w	r7, #4294967295
 800a784:	e7ea      	b.n	800a75c <__swbuf_r+0x6c>
 800a786:	bf00      	nop
 800a788:	0800d290 	.word	0x0800d290
 800a78c:	0800d2b0 	.word	0x0800d2b0
 800a790:	0800d270 	.word	0x0800d270

0800a794 <__swsetup_r>:
 800a794:	4b32      	ldr	r3, [pc, #200]	; (800a860 <__swsetup_r+0xcc>)
 800a796:	b570      	push	{r4, r5, r6, lr}
 800a798:	681d      	ldr	r5, [r3, #0]
 800a79a:	4606      	mov	r6, r0
 800a79c:	460c      	mov	r4, r1
 800a79e:	b125      	cbz	r5, 800a7aa <__swsetup_r+0x16>
 800a7a0:	69ab      	ldr	r3, [r5, #24]
 800a7a2:	b913      	cbnz	r3, 800a7aa <__swsetup_r+0x16>
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f000 f981 	bl	800aaac <__sinit>
 800a7aa:	4b2e      	ldr	r3, [pc, #184]	; (800a864 <__swsetup_r+0xd0>)
 800a7ac:	429c      	cmp	r4, r3
 800a7ae:	d10f      	bne.n	800a7d0 <__swsetup_r+0x3c>
 800a7b0:	686c      	ldr	r4, [r5, #4]
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7b8:	0719      	lsls	r1, r3, #28
 800a7ba:	d42c      	bmi.n	800a816 <__swsetup_r+0x82>
 800a7bc:	06dd      	lsls	r5, r3, #27
 800a7be:	d411      	bmi.n	800a7e4 <__swsetup_r+0x50>
 800a7c0:	2309      	movs	r3, #9
 800a7c2:	6033      	str	r3, [r6, #0]
 800a7c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7cc:	81a3      	strh	r3, [r4, #12]
 800a7ce:	e03e      	b.n	800a84e <__swsetup_r+0xba>
 800a7d0:	4b25      	ldr	r3, [pc, #148]	; (800a868 <__swsetup_r+0xd4>)
 800a7d2:	429c      	cmp	r4, r3
 800a7d4:	d101      	bne.n	800a7da <__swsetup_r+0x46>
 800a7d6:	68ac      	ldr	r4, [r5, #8]
 800a7d8:	e7eb      	b.n	800a7b2 <__swsetup_r+0x1e>
 800a7da:	4b24      	ldr	r3, [pc, #144]	; (800a86c <__swsetup_r+0xd8>)
 800a7dc:	429c      	cmp	r4, r3
 800a7de:	bf08      	it	eq
 800a7e0:	68ec      	ldreq	r4, [r5, #12]
 800a7e2:	e7e6      	b.n	800a7b2 <__swsetup_r+0x1e>
 800a7e4:	0758      	lsls	r0, r3, #29
 800a7e6:	d512      	bpl.n	800a80e <__swsetup_r+0x7a>
 800a7e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7ea:	b141      	cbz	r1, 800a7fe <__swsetup_r+0x6a>
 800a7ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7f0:	4299      	cmp	r1, r3
 800a7f2:	d002      	beq.n	800a7fa <__swsetup_r+0x66>
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f7ff fa45 	bl	8009c84 <_free_r>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	6363      	str	r3, [r4, #52]	; 0x34
 800a7fe:	89a3      	ldrh	r3, [r4, #12]
 800a800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a804:	81a3      	strh	r3, [r4, #12]
 800a806:	2300      	movs	r3, #0
 800a808:	6063      	str	r3, [r4, #4]
 800a80a:	6923      	ldr	r3, [r4, #16]
 800a80c:	6023      	str	r3, [r4, #0]
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	f043 0308 	orr.w	r3, r3, #8
 800a814:	81a3      	strh	r3, [r4, #12]
 800a816:	6923      	ldr	r3, [r4, #16]
 800a818:	b94b      	cbnz	r3, 800a82e <__swsetup_r+0x9a>
 800a81a:	89a3      	ldrh	r3, [r4, #12]
 800a81c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a824:	d003      	beq.n	800a82e <__swsetup_r+0x9a>
 800a826:	4621      	mov	r1, r4
 800a828:	4630      	mov	r0, r6
 800a82a:	f000 fa05 	bl	800ac38 <__smakebuf_r>
 800a82e:	89a0      	ldrh	r0, [r4, #12]
 800a830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a834:	f010 0301 	ands.w	r3, r0, #1
 800a838:	d00a      	beq.n	800a850 <__swsetup_r+0xbc>
 800a83a:	2300      	movs	r3, #0
 800a83c:	60a3      	str	r3, [r4, #8]
 800a83e:	6963      	ldr	r3, [r4, #20]
 800a840:	425b      	negs	r3, r3
 800a842:	61a3      	str	r3, [r4, #24]
 800a844:	6923      	ldr	r3, [r4, #16]
 800a846:	b943      	cbnz	r3, 800a85a <__swsetup_r+0xc6>
 800a848:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a84c:	d1ba      	bne.n	800a7c4 <__swsetup_r+0x30>
 800a84e:	bd70      	pop	{r4, r5, r6, pc}
 800a850:	0781      	lsls	r1, r0, #30
 800a852:	bf58      	it	pl
 800a854:	6963      	ldrpl	r3, [r4, #20]
 800a856:	60a3      	str	r3, [r4, #8]
 800a858:	e7f4      	b.n	800a844 <__swsetup_r+0xb0>
 800a85a:	2000      	movs	r0, #0
 800a85c:	e7f7      	b.n	800a84e <__swsetup_r+0xba>
 800a85e:	bf00      	nop
 800a860:	20000188 	.word	0x20000188
 800a864:	0800d290 	.word	0x0800d290
 800a868:	0800d2b0 	.word	0x0800d2b0
 800a86c:	0800d270 	.word	0x0800d270

0800a870 <abort>:
 800a870:	2006      	movs	r0, #6
 800a872:	b508      	push	{r3, lr}
 800a874:	f000 faba 	bl	800adec <raise>
 800a878:	2001      	movs	r0, #1
 800a87a:	f7f7 f9ac 	bl	8001bd6 <_exit>
	...

0800a880 <__sflush_r>:
 800a880:	898a      	ldrh	r2, [r1, #12]
 800a882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a884:	4605      	mov	r5, r0
 800a886:	0710      	lsls	r0, r2, #28
 800a888:	460c      	mov	r4, r1
 800a88a:	d457      	bmi.n	800a93c <__sflush_r+0xbc>
 800a88c:	684b      	ldr	r3, [r1, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	dc04      	bgt.n	800a89c <__sflush_r+0x1c>
 800a892:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a894:	2b00      	cmp	r3, #0
 800a896:	dc01      	bgt.n	800a89c <__sflush_r+0x1c>
 800a898:	2000      	movs	r0, #0
 800a89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a89c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a89e:	2e00      	cmp	r6, #0
 800a8a0:	d0fa      	beq.n	800a898 <__sflush_r+0x18>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8a8:	682f      	ldr	r7, [r5, #0]
 800a8aa:	602b      	str	r3, [r5, #0]
 800a8ac:	d032      	beq.n	800a914 <__sflush_r+0x94>
 800a8ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	075a      	lsls	r2, r3, #29
 800a8b4:	d505      	bpl.n	800a8c2 <__sflush_r+0x42>
 800a8b6:	6863      	ldr	r3, [r4, #4]
 800a8b8:	1ac0      	subs	r0, r0, r3
 800a8ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8bc:	b10b      	cbz	r3, 800a8c2 <__sflush_r+0x42>
 800a8be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8c0:	1ac0      	subs	r0, r0, r3
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	6a21      	ldr	r1, [r4, #32]
 800a8cc:	47b0      	blx	r6
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	d106      	bne.n	800a8e2 <__sflush_r+0x62>
 800a8d4:	6829      	ldr	r1, [r5, #0]
 800a8d6:	291d      	cmp	r1, #29
 800a8d8:	d82c      	bhi.n	800a934 <__sflush_r+0xb4>
 800a8da:	4a29      	ldr	r2, [pc, #164]	; (800a980 <__sflush_r+0x100>)
 800a8dc:	40ca      	lsrs	r2, r1
 800a8de:	07d6      	lsls	r6, r2, #31
 800a8e0:	d528      	bpl.n	800a934 <__sflush_r+0xb4>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	6062      	str	r2, [r4, #4]
 800a8e6:	6922      	ldr	r2, [r4, #16]
 800a8e8:	04d9      	lsls	r1, r3, #19
 800a8ea:	6022      	str	r2, [r4, #0]
 800a8ec:	d504      	bpl.n	800a8f8 <__sflush_r+0x78>
 800a8ee:	1c42      	adds	r2, r0, #1
 800a8f0:	d101      	bne.n	800a8f6 <__sflush_r+0x76>
 800a8f2:	682b      	ldr	r3, [r5, #0]
 800a8f4:	b903      	cbnz	r3, 800a8f8 <__sflush_r+0x78>
 800a8f6:	6560      	str	r0, [r4, #84]	; 0x54
 800a8f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8fa:	602f      	str	r7, [r5, #0]
 800a8fc:	2900      	cmp	r1, #0
 800a8fe:	d0cb      	beq.n	800a898 <__sflush_r+0x18>
 800a900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a904:	4299      	cmp	r1, r3
 800a906:	d002      	beq.n	800a90e <__sflush_r+0x8e>
 800a908:	4628      	mov	r0, r5
 800a90a:	f7ff f9bb 	bl	8009c84 <_free_r>
 800a90e:	2000      	movs	r0, #0
 800a910:	6360      	str	r0, [r4, #52]	; 0x34
 800a912:	e7c2      	b.n	800a89a <__sflush_r+0x1a>
 800a914:	6a21      	ldr	r1, [r4, #32]
 800a916:	2301      	movs	r3, #1
 800a918:	4628      	mov	r0, r5
 800a91a:	47b0      	blx	r6
 800a91c:	1c41      	adds	r1, r0, #1
 800a91e:	d1c7      	bne.n	800a8b0 <__sflush_r+0x30>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d0c4      	beq.n	800a8b0 <__sflush_r+0x30>
 800a926:	2b1d      	cmp	r3, #29
 800a928:	d001      	beq.n	800a92e <__sflush_r+0xae>
 800a92a:	2b16      	cmp	r3, #22
 800a92c:	d101      	bne.n	800a932 <__sflush_r+0xb2>
 800a92e:	602f      	str	r7, [r5, #0]
 800a930:	e7b2      	b.n	800a898 <__sflush_r+0x18>
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a938:	81a3      	strh	r3, [r4, #12]
 800a93a:	e7ae      	b.n	800a89a <__sflush_r+0x1a>
 800a93c:	690f      	ldr	r7, [r1, #16]
 800a93e:	2f00      	cmp	r7, #0
 800a940:	d0aa      	beq.n	800a898 <__sflush_r+0x18>
 800a942:	0793      	lsls	r3, r2, #30
 800a944:	bf18      	it	ne
 800a946:	2300      	movne	r3, #0
 800a948:	680e      	ldr	r6, [r1, #0]
 800a94a:	bf08      	it	eq
 800a94c:	694b      	ldreq	r3, [r1, #20]
 800a94e:	1bf6      	subs	r6, r6, r7
 800a950:	600f      	str	r7, [r1, #0]
 800a952:	608b      	str	r3, [r1, #8]
 800a954:	2e00      	cmp	r6, #0
 800a956:	dd9f      	ble.n	800a898 <__sflush_r+0x18>
 800a958:	4633      	mov	r3, r6
 800a95a:	463a      	mov	r2, r7
 800a95c:	4628      	mov	r0, r5
 800a95e:	6a21      	ldr	r1, [r4, #32]
 800a960:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a964:	47e0      	blx	ip
 800a966:	2800      	cmp	r0, #0
 800a968:	dc06      	bgt.n	800a978 <__sflush_r+0xf8>
 800a96a:	89a3      	ldrh	r3, [r4, #12]
 800a96c:	f04f 30ff 	mov.w	r0, #4294967295
 800a970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	e790      	b.n	800a89a <__sflush_r+0x1a>
 800a978:	4407      	add	r7, r0
 800a97a:	1a36      	subs	r6, r6, r0
 800a97c:	e7ea      	b.n	800a954 <__sflush_r+0xd4>
 800a97e:	bf00      	nop
 800a980:	20400001 	.word	0x20400001

0800a984 <_fflush_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	690b      	ldr	r3, [r1, #16]
 800a988:	4605      	mov	r5, r0
 800a98a:	460c      	mov	r4, r1
 800a98c:	b913      	cbnz	r3, 800a994 <_fflush_r+0x10>
 800a98e:	2500      	movs	r5, #0
 800a990:	4628      	mov	r0, r5
 800a992:	bd38      	pop	{r3, r4, r5, pc}
 800a994:	b118      	cbz	r0, 800a99e <_fflush_r+0x1a>
 800a996:	6983      	ldr	r3, [r0, #24]
 800a998:	b90b      	cbnz	r3, 800a99e <_fflush_r+0x1a>
 800a99a:	f000 f887 	bl	800aaac <__sinit>
 800a99e:	4b14      	ldr	r3, [pc, #80]	; (800a9f0 <_fflush_r+0x6c>)
 800a9a0:	429c      	cmp	r4, r3
 800a9a2:	d11b      	bne.n	800a9dc <_fflush_r+0x58>
 800a9a4:	686c      	ldr	r4, [r5, #4]
 800a9a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d0ef      	beq.n	800a98e <_fflush_r+0xa>
 800a9ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9b0:	07d0      	lsls	r0, r2, #31
 800a9b2:	d404      	bmi.n	800a9be <_fflush_r+0x3a>
 800a9b4:	0599      	lsls	r1, r3, #22
 800a9b6:	d402      	bmi.n	800a9be <_fflush_r+0x3a>
 800a9b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ba:	f000 f915 	bl	800abe8 <__retarget_lock_acquire_recursive>
 800a9be:	4628      	mov	r0, r5
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	f7ff ff5d 	bl	800a880 <__sflush_r>
 800a9c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	07da      	lsls	r2, r3, #31
 800a9cc:	d4e0      	bmi.n	800a990 <_fflush_r+0xc>
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	059b      	lsls	r3, r3, #22
 800a9d2:	d4dd      	bmi.n	800a990 <_fflush_r+0xc>
 800a9d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9d6:	f000 f908 	bl	800abea <__retarget_lock_release_recursive>
 800a9da:	e7d9      	b.n	800a990 <_fflush_r+0xc>
 800a9dc:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <_fflush_r+0x70>)
 800a9de:	429c      	cmp	r4, r3
 800a9e0:	d101      	bne.n	800a9e6 <_fflush_r+0x62>
 800a9e2:	68ac      	ldr	r4, [r5, #8]
 800a9e4:	e7df      	b.n	800a9a6 <_fflush_r+0x22>
 800a9e6:	4b04      	ldr	r3, [pc, #16]	; (800a9f8 <_fflush_r+0x74>)
 800a9e8:	429c      	cmp	r4, r3
 800a9ea:	bf08      	it	eq
 800a9ec:	68ec      	ldreq	r4, [r5, #12]
 800a9ee:	e7da      	b.n	800a9a6 <_fflush_r+0x22>
 800a9f0:	0800d290 	.word	0x0800d290
 800a9f4:	0800d2b0 	.word	0x0800d2b0
 800a9f8:	0800d270 	.word	0x0800d270

0800a9fc <std>:
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	b510      	push	{r4, lr}
 800aa00:	4604      	mov	r4, r0
 800aa02:	e9c0 3300 	strd	r3, r3, [r0]
 800aa06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa0a:	6083      	str	r3, [r0, #8]
 800aa0c:	8181      	strh	r1, [r0, #12]
 800aa0e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa10:	81c2      	strh	r2, [r0, #14]
 800aa12:	6183      	str	r3, [r0, #24]
 800aa14:	4619      	mov	r1, r3
 800aa16:	2208      	movs	r2, #8
 800aa18:	305c      	adds	r0, #92	; 0x5c
 800aa1a:	f7ff f895 	bl	8009b48 <memset>
 800aa1e:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <std+0x38>)
 800aa20:	6224      	str	r4, [r4, #32]
 800aa22:	6263      	str	r3, [r4, #36]	; 0x24
 800aa24:	4b04      	ldr	r3, [pc, #16]	; (800aa38 <std+0x3c>)
 800aa26:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa28:	4b04      	ldr	r3, [pc, #16]	; (800aa3c <std+0x40>)
 800aa2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa2c:	4b04      	ldr	r3, [pc, #16]	; (800aa40 <std+0x44>)
 800aa2e:	6323      	str	r3, [r4, #48]	; 0x30
 800aa30:	bd10      	pop	{r4, pc}
 800aa32:	bf00      	nop
 800aa34:	0800ae25 	.word	0x0800ae25
 800aa38:	0800ae47 	.word	0x0800ae47
 800aa3c:	0800ae7f 	.word	0x0800ae7f
 800aa40:	0800aea3 	.word	0x0800aea3

0800aa44 <_cleanup_r>:
 800aa44:	4901      	ldr	r1, [pc, #4]	; (800aa4c <_cleanup_r+0x8>)
 800aa46:	f000 b8af 	b.w	800aba8 <_fwalk_reent>
 800aa4a:	bf00      	nop
 800aa4c:	0800a985 	.word	0x0800a985

0800aa50 <__sfmoreglue>:
 800aa50:	2268      	movs	r2, #104	; 0x68
 800aa52:	b570      	push	{r4, r5, r6, lr}
 800aa54:	1e4d      	subs	r5, r1, #1
 800aa56:	4355      	muls	r5, r2
 800aa58:	460e      	mov	r6, r1
 800aa5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa5e:	f7ff f979 	bl	8009d54 <_malloc_r>
 800aa62:	4604      	mov	r4, r0
 800aa64:	b140      	cbz	r0, 800aa78 <__sfmoreglue+0x28>
 800aa66:	2100      	movs	r1, #0
 800aa68:	e9c0 1600 	strd	r1, r6, [r0]
 800aa6c:	300c      	adds	r0, #12
 800aa6e:	60a0      	str	r0, [r4, #8]
 800aa70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa74:	f7ff f868 	bl	8009b48 <memset>
 800aa78:	4620      	mov	r0, r4
 800aa7a:	bd70      	pop	{r4, r5, r6, pc}

0800aa7c <__sfp_lock_acquire>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	; (800aa84 <__sfp_lock_acquire+0x8>)
 800aa7e:	f000 b8b3 	b.w	800abe8 <__retarget_lock_acquire_recursive>
 800aa82:	bf00      	nop
 800aa84:	200014b1 	.word	0x200014b1

0800aa88 <__sfp_lock_release>:
 800aa88:	4801      	ldr	r0, [pc, #4]	; (800aa90 <__sfp_lock_release+0x8>)
 800aa8a:	f000 b8ae 	b.w	800abea <__retarget_lock_release_recursive>
 800aa8e:	bf00      	nop
 800aa90:	200014b1 	.word	0x200014b1

0800aa94 <__sinit_lock_acquire>:
 800aa94:	4801      	ldr	r0, [pc, #4]	; (800aa9c <__sinit_lock_acquire+0x8>)
 800aa96:	f000 b8a7 	b.w	800abe8 <__retarget_lock_acquire_recursive>
 800aa9a:	bf00      	nop
 800aa9c:	200014b2 	.word	0x200014b2

0800aaa0 <__sinit_lock_release>:
 800aaa0:	4801      	ldr	r0, [pc, #4]	; (800aaa8 <__sinit_lock_release+0x8>)
 800aaa2:	f000 b8a2 	b.w	800abea <__retarget_lock_release_recursive>
 800aaa6:	bf00      	nop
 800aaa8:	200014b2 	.word	0x200014b2

0800aaac <__sinit>:
 800aaac:	b510      	push	{r4, lr}
 800aaae:	4604      	mov	r4, r0
 800aab0:	f7ff fff0 	bl	800aa94 <__sinit_lock_acquire>
 800aab4:	69a3      	ldr	r3, [r4, #24]
 800aab6:	b11b      	cbz	r3, 800aac0 <__sinit+0x14>
 800aab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aabc:	f7ff bff0 	b.w	800aaa0 <__sinit_lock_release>
 800aac0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aac4:	6523      	str	r3, [r4, #80]	; 0x50
 800aac6:	4b13      	ldr	r3, [pc, #76]	; (800ab14 <__sinit+0x68>)
 800aac8:	4a13      	ldr	r2, [pc, #76]	; (800ab18 <__sinit+0x6c>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	62a2      	str	r2, [r4, #40]	; 0x28
 800aace:	42a3      	cmp	r3, r4
 800aad0:	bf08      	it	eq
 800aad2:	2301      	moveq	r3, #1
 800aad4:	4620      	mov	r0, r4
 800aad6:	bf08      	it	eq
 800aad8:	61a3      	streq	r3, [r4, #24]
 800aada:	f000 f81f 	bl	800ab1c <__sfp>
 800aade:	6060      	str	r0, [r4, #4]
 800aae0:	4620      	mov	r0, r4
 800aae2:	f000 f81b 	bl	800ab1c <__sfp>
 800aae6:	60a0      	str	r0, [r4, #8]
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 f817 	bl	800ab1c <__sfp>
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2104      	movs	r1, #4
 800aaf2:	60e0      	str	r0, [r4, #12]
 800aaf4:	6860      	ldr	r0, [r4, #4]
 800aaf6:	f7ff ff81 	bl	800a9fc <std>
 800aafa:	2201      	movs	r2, #1
 800aafc:	2109      	movs	r1, #9
 800aafe:	68a0      	ldr	r0, [r4, #8]
 800ab00:	f7ff ff7c 	bl	800a9fc <std>
 800ab04:	2202      	movs	r2, #2
 800ab06:	2112      	movs	r1, #18
 800ab08:	68e0      	ldr	r0, [r4, #12]
 800ab0a:	f7ff ff77 	bl	800a9fc <std>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	61a3      	str	r3, [r4, #24]
 800ab12:	e7d1      	b.n	800aab8 <__sinit+0xc>
 800ab14:	0800d188 	.word	0x0800d188
 800ab18:	0800aa45 	.word	0x0800aa45

0800ab1c <__sfp>:
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1e:	4607      	mov	r7, r0
 800ab20:	f7ff ffac 	bl	800aa7c <__sfp_lock_acquire>
 800ab24:	4b1e      	ldr	r3, [pc, #120]	; (800aba0 <__sfp+0x84>)
 800ab26:	681e      	ldr	r6, [r3, #0]
 800ab28:	69b3      	ldr	r3, [r6, #24]
 800ab2a:	b913      	cbnz	r3, 800ab32 <__sfp+0x16>
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	f7ff ffbd 	bl	800aaac <__sinit>
 800ab32:	3648      	adds	r6, #72	; 0x48
 800ab34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	d503      	bpl.n	800ab44 <__sfp+0x28>
 800ab3c:	6833      	ldr	r3, [r6, #0]
 800ab3e:	b30b      	cbz	r3, 800ab84 <__sfp+0x68>
 800ab40:	6836      	ldr	r6, [r6, #0]
 800ab42:	e7f7      	b.n	800ab34 <__sfp+0x18>
 800ab44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab48:	b9d5      	cbnz	r5, 800ab80 <__sfp+0x64>
 800ab4a:	4b16      	ldr	r3, [pc, #88]	; (800aba4 <__sfp+0x88>)
 800ab4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab50:	60e3      	str	r3, [r4, #12]
 800ab52:	6665      	str	r5, [r4, #100]	; 0x64
 800ab54:	f000 f847 	bl	800abe6 <__retarget_lock_init_recursive>
 800ab58:	f7ff ff96 	bl	800aa88 <__sfp_lock_release>
 800ab5c:	2208      	movs	r2, #8
 800ab5e:	4629      	mov	r1, r5
 800ab60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab68:	6025      	str	r5, [r4, #0]
 800ab6a:	61a5      	str	r5, [r4, #24]
 800ab6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab70:	f7fe ffea 	bl	8009b48 <memset>
 800ab74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab80:	3468      	adds	r4, #104	; 0x68
 800ab82:	e7d9      	b.n	800ab38 <__sfp+0x1c>
 800ab84:	2104      	movs	r1, #4
 800ab86:	4638      	mov	r0, r7
 800ab88:	f7ff ff62 	bl	800aa50 <__sfmoreglue>
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	6030      	str	r0, [r6, #0]
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d1d5      	bne.n	800ab40 <__sfp+0x24>
 800ab94:	f7ff ff78 	bl	800aa88 <__sfp_lock_release>
 800ab98:	230c      	movs	r3, #12
 800ab9a:	603b      	str	r3, [r7, #0]
 800ab9c:	e7ee      	b.n	800ab7c <__sfp+0x60>
 800ab9e:	bf00      	nop
 800aba0:	0800d188 	.word	0x0800d188
 800aba4:	ffff0001 	.word	0xffff0001

0800aba8 <_fwalk_reent>:
 800aba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abac:	4606      	mov	r6, r0
 800abae:	4688      	mov	r8, r1
 800abb0:	2700      	movs	r7, #0
 800abb2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800abb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abba:	f1b9 0901 	subs.w	r9, r9, #1
 800abbe:	d505      	bpl.n	800abcc <_fwalk_reent+0x24>
 800abc0:	6824      	ldr	r4, [r4, #0]
 800abc2:	2c00      	cmp	r4, #0
 800abc4:	d1f7      	bne.n	800abb6 <_fwalk_reent+0xe>
 800abc6:	4638      	mov	r0, r7
 800abc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abcc:	89ab      	ldrh	r3, [r5, #12]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d907      	bls.n	800abe2 <_fwalk_reent+0x3a>
 800abd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abd6:	3301      	adds	r3, #1
 800abd8:	d003      	beq.n	800abe2 <_fwalk_reent+0x3a>
 800abda:	4629      	mov	r1, r5
 800abdc:	4630      	mov	r0, r6
 800abde:	47c0      	blx	r8
 800abe0:	4307      	orrs	r7, r0
 800abe2:	3568      	adds	r5, #104	; 0x68
 800abe4:	e7e9      	b.n	800abba <_fwalk_reent+0x12>

0800abe6 <__retarget_lock_init_recursive>:
 800abe6:	4770      	bx	lr

0800abe8 <__retarget_lock_acquire_recursive>:
 800abe8:	4770      	bx	lr

0800abea <__retarget_lock_release_recursive>:
 800abea:	4770      	bx	lr

0800abec <__swhatbuf_r>:
 800abec:	b570      	push	{r4, r5, r6, lr}
 800abee:	460e      	mov	r6, r1
 800abf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf4:	4614      	mov	r4, r2
 800abf6:	2900      	cmp	r1, #0
 800abf8:	461d      	mov	r5, r3
 800abfa:	b096      	sub	sp, #88	; 0x58
 800abfc:	da08      	bge.n	800ac10 <__swhatbuf_r+0x24>
 800abfe:	2200      	movs	r2, #0
 800ac00:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac04:	602a      	str	r2, [r5, #0]
 800ac06:	061a      	lsls	r2, r3, #24
 800ac08:	d410      	bmi.n	800ac2c <__swhatbuf_r+0x40>
 800ac0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac0e:	e00e      	b.n	800ac2e <__swhatbuf_r+0x42>
 800ac10:	466a      	mov	r2, sp
 800ac12:	f000 f96d 	bl	800aef0 <_fstat_r>
 800ac16:	2800      	cmp	r0, #0
 800ac18:	dbf1      	blt.n	800abfe <__swhatbuf_r+0x12>
 800ac1a:	9a01      	ldr	r2, [sp, #4]
 800ac1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac24:	425a      	negs	r2, r3
 800ac26:	415a      	adcs	r2, r3
 800ac28:	602a      	str	r2, [r5, #0]
 800ac2a:	e7ee      	b.n	800ac0a <__swhatbuf_r+0x1e>
 800ac2c:	2340      	movs	r3, #64	; 0x40
 800ac2e:	2000      	movs	r0, #0
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	b016      	add	sp, #88	; 0x58
 800ac34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac38 <__smakebuf_r>:
 800ac38:	898b      	ldrh	r3, [r1, #12]
 800ac3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac3c:	079d      	lsls	r5, r3, #30
 800ac3e:	4606      	mov	r6, r0
 800ac40:	460c      	mov	r4, r1
 800ac42:	d507      	bpl.n	800ac54 <__smakebuf_r+0x1c>
 800ac44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	6123      	str	r3, [r4, #16]
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	6163      	str	r3, [r4, #20]
 800ac50:	b002      	add	sp, #8
 800ac52:	bd70      	pop	{r4, r5, r6, pc}
 800ac54:	466a      	mov	r2, sp
 800ac56:	ab01      	add	r3, sp, #4
 800ac58:	f7ff ffc8 	bl	800abec <__swhatbuf_r>
 800ac5c:	9900      	ldr	r1, [sp, #0]
 800ac5e:	4605      	mov	r5, r0
 800ac60:	4630      	mov	r0, r6
 800ac62:	f7ff f877 	bl	8009d54 <_malloc_r>
 800ac66:	b948      	cbnz	r0, 800ac7c <__smakebuf_r+0x44>
 800ac68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac6c:	059a      	lsls	r2, r3, #22
 800ac6e:	d4ef      	bmi.n	800ac50 <__smakebuf_r+0x18>
 800ac70:	f023 0303 	bic.w	r3, r3, #3
 800ac74:	f043 0302 	orr.w	r3, r3, #2
 800ac78:	81a3      	strh	r3, [r4, #12]
 800ac7a:	e7e3      	b.n	800ac44 <__smakebuf_r+0xc>
 800ac7c:	4b0d      	ldr	r3, [pc, #52]	; (800acb4 <__smakebuf_r+0x7c>)
 800ac7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac80:	89a3      	ldrh	r3, [r4, #12]
 800ac82:	6020      	str	r0, [r4, #0]
 800ac84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	9b00      	ldr	r3, [sp, #0]
 800ac8c:	6120      	str	r0, [r4, #16]
 800ac8e:	6163      	str	r3, [r4, #20]
 800ac90:	9b01      	ldr	r3, [sp, #4]
 800ac92:	b15b      	cbz	r3, 800acac <__smakebuf_r+0x74>
 800ac94:	4630      	mov	r0, r6
 800ac96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac9a:	f000 f93b 	bl	800af14 <_isatty_r>
 800ac9e:	b128      	cbz	r0, 800acac <__smakebuf_r+0x74>
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	f023 0303 	bic.w	r3, r3, #3
 800aca6:	f043 0301 	orr.w	r3, r3, #1
 800acaa:	81a3      	strh	r3, [r4, #12]
 800acac:	89a0      	ldrh	r0, [r4, #12]
 800acae:	4305      	orrs	r5, r0
 800acb0:	81a5      	strh	r5, [r4, #12]
 800acb2:	e7cd      	b.n	800ac50 <__smakebuf_r+0x18>
 800acb4:	0800aa45 	.word	0x0800aa45

0800acb8 <memchr>:
 800acb8:	4603      	mov	r3, r0
 800acba:	b510      	push	{r4, lr}
 800acbc:	b2c9      	uxtb	r1, r1
 800acbe:	4402      	add	r2, r0
 800acc0:	4293      	cmp	r3, r2
 800acc2:	4618      	mov	r0, r3
 800acc4:	d101      	bne.n	800acca <memchr+0x12>
 800acc6:	2000      	movs	r0, #0
 800acc8:	e003      	b.n	800acd2 <memchr+0x1a>
 800acca:	7804      	ldrb	r4, [r0, #0]
 800accc:	3301      	adds	r3, #1
 800acce:	428c      	cmp	r4, r1
 800acd0:	d1f6      	bne.n	800acc0 <memchr+0x8>
 800acd2:	bd10      	pop	{r4, pc}

0800acd4 <memcpy>:
 800acd4:	440a      	add	r2, r1
 800acd6:	4291      	cmp	r1, r2
 800acd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800acdc:	d100      	bne.n	800ace0 <memcpy+0xc>
 800acde:	4770      	bx	lr
 800ace0:	b510      	push	{r4, lr}
 800ace2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ace6:	4291      	cmp	r1, r2
 800ace8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acec:	d1f9      	bne.n	800ace2 <memcpy+0xe>
 800acee:	bd10      	pop	{r4, pc}

0800acf0 <memmove>:
 800acf0:	4288      	cmp	r0, r1
 800acf2:	b510      	push	{r4, lr}
 800acf4:	eb01 0402 	add.w	r4, r1, r2
 800acf8:	d902      	bls.n	800ad00 <memmove+0x10>
 800acfa:	4284      	cmp	r4, r0
 800acfc:	4623      	mov	r3, r4
 800acfe:	d807      	bhi.n	800ad10 <memmove+0x20>
 800ad00:	1e43      	subs	r3, r0, #1
 800ad02:	42a1      	cmp	r1, r4
 800ad04:	d008      	beq.n	800ad18 <memmove+0x28>
 800ad06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad0e:	e7f8      	b.n	800ad02 <memmove+0x12>
 800ad10:	4601      	mov	r1, r0
 800ad12:	4402      	add	r2, r0
 800ad14:	428a      	cmp	r2, r1
 800ad16:	d100      	bne.n	800ad1a <memmove+0x2a>
 800ad18:	bd10      	pop	{r4, pc}
 800ad1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad22:	e7f7      	b.n	800ad14 <memmove+0x24>

0800ad24 <__malloc_lock>:
 800ad24:	4801      	ldr	r0, [pc, #4]	; (800ad2c <__malloc_lock+0x8>)
 800ad26:	f7ff bf5f 	b.w	800abe8 <__retarget_lock_acquire_recursive>
 800ad2a:	bf00      	nop
 800ad2c:	200014b0 	.word	0x200014b0

0800ad30 <__malloc_unlock>:
 800ad30:	4801      	ldr	r0, [pc, #4]	; (800ad38 <__malloc_unlock+0x8>)
 800ad32:	f7ff bf5a 	b.w	800abea <__retarget_lock_release_recursive>
 800ad36:	bf00      	nop
 800ad38:	200014b0 	.word	0x200014b0

0800ad3c <_realloc_r>:
 800ad3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad40:	4680      	mov	r8, r0
 800ad42:	4614      	mov	r4, r2
 800ad44:	460e      	mov	r6, r1
 800ad46:	b921      	cbnz	r1, 800ad52 <_realloc_r+0x16>
 800ad48:	4611      	mov	r1, r2
 800ad4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4e:	f7ff b801 	b.w	8009d54 <_malloc_r>
 800ad52:	b92a      	cbnz	r2, 800ad60 <_realloc_r+0x24>
 800ad54:	f7fe ff96 	bl	8009c84 <_free_r>
 800ad58:	4625      	mov	r5, r4
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad60:	f000 f8fa 	bl	800af58 <_malloc_usable_size_r>
 800ad64:	4284      	cmp	r4, r0
 800ad66:	4607      	mov	r7, r0
 800ad68:	d802      	bhi.n	800ad70 <_realloc_r+0x34>
 800ad6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad6e:	d812      	bhi.n	800ad96 <_realloc_r+0x5a>
 800ad70:	4621      	mov	r1, r4
 800ad72:	4640      	mov	r0, r8
 800ad74:	f7fe ffee 	bl	8009d54 <_malloc_r>
 800ad78:	4605      	mov	r5, r0
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d0ed      	beq.n	800ad5a <_realloc_r+0x1e>
 800ad7e:	42bc      	cmp	r4, r7
 800ad80:	4622      	mov	r2, r4
 800ad82:	4631      	mov	r1, r6
 800ad84:	bf28      	it	cs
 800ad86:	463a      	movcs	r2, r7
 800ad88:	f7ff ffa4 	bl	800acd4 <memcpy>
 800ad8c:	4631      	mov	r1, r6
 800ad8e:	4640      	mov	r0, r8
 800ad90:	f7fe ff78 	bl	8009c84 <_free_r>
 800ad94:	e7e1      	b.n	800ad5a <_realloc_r+0x1e>
 800ad96:	4635      	mov	r5, r6
 800ad98:	e7df      	b.n	800ad5a <_realloc_r+0x1e>

0800ad9a <_raise_r>:
 800ad9a:	291f      	cmp	r1, #31
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	4604      	mov	r4, r0
 800ada0:	460d      	mov	r5, r1
 800ada2:	d904      	bls.n	800adae <_raise_r+0x14>
 800ada4:	2316      	movs	r3, #22
 800ada6:	6003      	str	r3, [r0, #0]
 800ada8:	f04f 30ff 	mov.w	r0, #4294967295
 800adac:	bd38      	pop	{r3, r4, r5, pc}
 800adae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800adb0:	b112      	cbz	r2, 800adb8 <_raise_r+0x1e>
 800adb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adb6:	b94b      	cbnz	r3, 800adcc <_raise_r+0x32>
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 f831 	bl	800ae20 <_getpid_r>
 800adbe:	462a      	mov	r2, r5
 800adc0:	4601      	mov	r1, r0
 800adc2:	4620      	mov	r0, r4
 800adc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adc8:	f000 b818 	b.w	800adfc <_kill_r>
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d00a      	beq.n	800ade6 <_raise_r+0x4c>
 800add0:	1c59      	adds	r1, r3, #1
 800add2:	d103      	bne.n	800addc <_raise_r+0x42>
 800add4:	2316      	movs	r3, #22
 800add6:	6003      	str	r3, [r0, #0]
 800add8:	2001      	movs	r0, #1
 800adda:	e7e7      	b.n	800adac <_raise_r+0x12>
 800addc:	2400      	movs	r4, #0
 800adde:	4628      	mov	r0, r5
 800ade0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ade4:	4798      	blx	r3
 800ade6:	2000      	movs	r0, #0
 800ade8:	e7e0      	b.n	800adac <_raise_r+0x12>
	...

0800adec <raise>:
 800adec:	4b02      	ldr	r3, [pc, #8]	; (800adf8 <raise+0xc>)
 800adee:	4601      	mov	r1, r0
 800adf0:	6818      	ldr	r0, [r3, #0]
 800adf2:	f7ff bfd2 	b.w	800ad9a <_raise_r>
 800adf6:	bf00      	nop
 800adf8:	20000188 	.word	0x20000188

0800adfc <_kill_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	2300      	movs	r3, #0
 800ae00:	4d06      	ldr	r5, [pc, #24]	; (800ae1c <_kill_r+0x20>)
 800ae02:	4604      	mov	r4, r0
 800ae04:	4608      	mov	r0, r1
 800ae06:	4611      	mov	r1, r2
 800ae08:	602b      	str	r3, [r5, #0]
 800ae0a:	f7f6 fed4 	bl	8001bb6 <_kill>
 800ae0e:	1c43      	adds	r3, r0, #1
 800ae10:	d102      	bne.n	800ae18 <_kill_r+0x1c>
 800ae12:	682b      	ldr	r3, [r5, #0]
 800ae14:	b103      	cbz	r3, 800ae18 <_kill_r+0x1c>
 800ae16:	6023      	str	r3, [r4, #0]
 800ae18:	bd38      	pop	{r3, r4, r5, pc}
 800ae1a:	bf00      	nop
 800ae1c:	200014b4 	.word	0x200014b4

0800ae20 <_getpid_r>:
 800ae20:	f7f6 bec2 	b.w	8001ba8 <_getpid>

0800ae24 <__sread>:
 800ae24:	b510      	push	{r4, lr}
 800ae26:	460c      	mov	r4, r1
 800ae28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2c:	f000 f89c 	bl	800af68 <_read_r>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	bfab      	itete	ge
 800ae34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae36:	89a3      	ldrhlt	r3, [r4, #12]
 800ae38:	181b      	addge	r3, r3, r0
 800ae3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae3e:	bfac      	ite	ge
 800ae40:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae42:	81a3      	strhlt	r3, [r4, #12]
 800ae44:	bd10      	pop	{r4, pc}

0800ae46 <__swrite>:
 800ae46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4a:	461f      	mov	r7, r3
 800ae4c:	898b      	ldrh	r3, [r1, #12]
 800ae4e:	4605      	mov	r5, r0
 800ae50:	05db      	lsls	r3, r3, #23
 800ae52:	460c      	mov	r4, r1
 800ae54:	4616      	mov	r6, r2
 800ae56:	d505      	bpl.n	800ae64 <__swrite+0x1e>
 800ae58:	2302      	movs	r3, #2
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae60:	f000 f868 	bl	800af34 <_lseek_r>
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	4632      	mov	r2, r6
 800ae68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae6c:	81a3      	strh	r3, [r4, #12]
 800ae6e:	4628      	mov	r0, r5
 800ae70:	463b      	mov	r3, r7
 800ae72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7a:	f000 b817 	b.w	800aeac <_write_r>

0800ae7e <__sseek>:
 800ae7e:	b510      	push	{r4, lr}
 800ae80:	460c      	mov	r4, r1
 800ae82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae86:	f000 f855 	bl	800af34 <_lseek_r>
 800ae8a:	1c43      	adds	r3, r0, #1
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	bf15      	itete	ne
 800ae90:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae9a:	81a3      	strheq	r3, [r4, #12]
 800ae9c:	bf18      	it	ne
 800ae9e:	81a3      	strhne	r3, [r4, #12]
 800aea0:	bd10      	pop	{r4, pc}

0800aea2 <__sclose>:
 800aea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea6:	f000 b813 	b.w	800aed0 <_close_r>
	...

0800aeac <_write_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4604      	mov	r4, r0
 800aeb0:	4608      	mov	r0, r1
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	4d05      	ldr	r5, [pc, #20]	; (800aecc <_write_r+0x20>)
 800aeb8:	602a      	str	r2, [r5, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	f7f6 feb2 	bl	8001c24 <_write>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_write_r+0x1e>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_write_r+0x1e>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	200014b4 	.word	0x200014b4

0800aed0 <_close_r>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	2300      	movs	r3, #0
 800aed4:	4d05      	ldr	r5, [pc, #20]	; (800aeec <_close_r+0x1c>)
 800aed6:	4604      	mov	r4, r0
 800aed8:	4608      	mov	r0, r1
 800aeda:	602b      	str	r3, [r5, #0]
 800aedc:	f7f6 febe 	bl	8001c5c <_close>
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	d102      	bne.n	800aeea <_close_r+0x1a>
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	b103      	cbz	r3, 800aeea <_close_r+0x1a>
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
 800aeec:	200014b4 	.word	0x200014b4

0800aef0 <_fstat_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	2300      	movs	r3, #0
 800aef4:	4d06      	ldr	r5, [pc, #24]	; (800af10 <_fstat_r+0x20>)
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	4611      	mov	r1, r2
 800aefc:	602b      	str	r3, [r5, #0]
 800aefe:	f7f6 feb8 	bl	8001c72 <_fstat>
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	d102      	bne.n	800af0c <_fstat_r+0x1c>
 800af06:	682b      	ldr	r3, [r5, #0]
 800af08:	b103      	cbz	r3, 800af0c <_fstat_r+0x1c>
 800af0a:	6023      	str	r3, [r4, #0]
 800af0c:	bd38      	pop	{r3, r4, r5, pc}
 800af0e:	bf00      	nop
 800af10:	200014b4 	.word	0x200014b4

0800af14 <_isatty_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	2300      	movs	r3, #0
 800af18:	4d05      	ldr	r5, [pc, #20]	; (800af30 <_isatty_r+0x1c>)
 800af1a:	4604      	mov	r4, r0
 800af1c:	4608      	mov	r0, r1
 800af1e:	602b      	str	r3, [r5, #0]
 800af20:	f7f6 feb6 	bl	8001c90 <_isatty>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d102      	bne.n	800af2e <_isatty_r+0x1a>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	b103      	cbz	r3, 800af2e <_isatty_r+0x1a>
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	bd38      	pop	{r3, r4, r5, pc}
 800af30:	200014b4 	.word	0x200014b4

0800af34 <_lseek_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4604      	mov	r4, r0
 800af38:	4608      	mov	r0, r1
 800af3a:	4611      	mov	r1, r2
 800af3c:	2200      	movs	r2, #0
 800af3e:	4d05      	ldr	r5, [pc, #20]	; (800af54 <_lseek_r+0x20>)
 800af40:	602a      	str	r2, [r5, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	f7f6 feae 	bl	8001ca4 <_lseek>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d102      	bne.n	800af52 <_lseek_r+0x1e>
 800af4c:	682b      	ldr	r3, [r5, #0]
 800af4e:	b103      	cbz	r3, 800af52 <_lseek_r+0x1e>
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	200014b4 	.word	0x200014b4

0800af58 <_malloc_usable_size_r>:
 800af58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af5c:	1f18      	subs	r0, r3, #4
 800af5e:	2b00      	cmp	r3, #0
 800af60:	bfbc      	itt	lt
 800af62:	580b      	ldrlt	r3, [r1, r0]
 800af64:	18c0      	addlt	r0, r0, r3
 800af66:	4770      	bx	lr

0800af68 <_read_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4604      	mov	r4, r0
 800af6c:	4608      	mov	r0, r1
 800af6e:	4611      	mov	r1, r2
 800af70:	2200      	movs	r2, #0
 800af72:	4d05      	ldr	r5, [pc, #20]	; (800af88 <_read_r+0x20>)
 800af74:	602a      	str	r2, [r5, #0]
 800af76:	461a      	mov	r2, r3
 800af78:	f7f6 fe37 	bl	8001bea <_read>
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	d102      	bne.n	800af86 <_read_r+0x1e>
 800af80:	682b      	ldr	r3, [r5, #0]
 800af82:	b103      	cbz	r3, 800af86 <_read_r+0x1e>
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	bd38      	pop	{r3, r4, r5, pc}
 800af88:	200014b4 	.word	0x200014b4

0800af8c <cos>:
 800af8c:	b530      	push	{r4, r5, lr}
 800af8e:	4a20      	ldr	r2, [pc, #128]	; (800b010 <cos+0x84>)
 800af90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af94:	4293      	cmp	r3, r2
 800af96:	b087      	sub	sp, #28
 800af98:	dc06      	bgt.n	800afa8 <cos+0x1c>
 800af9a:	2200      	movs	r2, #0
 800af9c:	2300      	movs	r3, #0
 800af9e:	b007      	add	sp, #28
 800afa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afa4:	f001 bac0 	b.w	800c528 <__kernel_cos>
 800afa8:	4a1a      	ldr	r2, [pc, #104]	; (800b014 <cos+0x88>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	dd05      	ble.n	800afba <cos+0x2e>
 800afae:	4602      	mov	r2, r0
 800afb0:	460b      	mov	r3, r1
 800afb2:	f7f5 f8d1 	bl	8000158 <__aeabi_dsub>
 800afb6:	b007      	add	sp, #28
 800afb8:	bd30      	pop	{r4, r5, pc}
 800afba:	aa02      	add	r2, sp, #8
 800afbc:	f001 f80c 	bl	800bfd8 <__ieee754_rem_pio2>
 800afc0:	f000 0003 	and.w	r0, r0, #3
 800afc4:	2801      	cmp	r0, #1
 800afc6:	d009      	beq.n	800afdc <cos+0x50>
 800afc8:	2802      	cmp	r0, #2
 800afca:	d011      	beq.n	800aff0 <cos+0x64>
 800afcc:	b9b8      	cbnz	r0, 800affe <cos+0x72>
 800afce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afd6:	f001 faa7 	bl	800c528 <__kernel_cos>
 800afda:	e7ec      	b.n	800afb6 <cos+0x2a>
 800afdc:	9000      	str	r0, [sp, #0]
 800afde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afe6:	f001 fe9f 	bl	800cd28 <__kernel_sin>
 800afea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800afee:	e7e2      	b.n	800afb6 <cos+0x2a>
 800aff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aff8:	f001 fa96 	bl	800c528 <__kernel_cos>
 800affc:	e7f5      	b.n	800afea <cos+0x5e>
 800affe:	2301      	movs	r3, #1
 800b000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b00a:	f001 fe8d 	bl	800cd28 <__kernel_sin>
 800b00e:	e7d2      	b.n	800afb6 <cos+0x2a>
 800b010:	3fe921fb 	.word	0x3fe921fb
 800b014:	7fefffff 	.word	0x7fefffff

0800b018 <round>:
 800b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b01e:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800b022:	2c13      	cmp	r4, #19
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4606      	mov	r6, r0
 800b02a:	460d      	mov	r5, r1
 800b02c:	dc19      	bgt.n	800b062 <round+0x4a>
 800b02e:	2c00      	cmp	r4, #0
 800b030:	da09      	bge.n	800b046 <round+0x2e>
 800b032:	3401      	adds	r4, #1
 800b034:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800b038:	d103      	bne.n	800b042 <round+0x2a>
 800b03a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b03e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b042:	2200      	movs	r2, #0
 800b044:	e02a      	b.n	800b09c <round+0x84>
 800b046:	4917      	ldr	r1, [pc, #92]	; (800b0a4 <round+0x8c>)
 800b048:	4121      	asrs	r1, r4
 800b04a:	ea03 0001 	and.w	r0, r3, r1
 800b04e:	4302      	orrs	r2, r0
 800b050:	d010      	beq.n	800b074 <round+0x5c>
 800b052:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b056:	fa42 f404 	asr.w	r4, r2, r4
 800b05a:	4423      	add	r3, r4
 800b05c:	ea23 0301 	bic.w	r3, r3, r1
 800b060:	e7ef      	b.n	800b042 <round+0x2a>
 800b062:	2c33      	cmp	r4, #51	; 0x33
 800b064:	dd09      	ble.n	800b07a <round+0x62>
 800b066:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800b06a:	d103      	bne.n	800b074 <round+0x5c>
 800b06c:	f7f5 f876 	bl	800015c <__adddf3>
 800b070:	4606      	mov	r6, r0
 800b072:	460d      	mov	r5, r1
 800b074:	4630      	mov	r0, r6
 800b076:	4629      	mov	r1, r5
 800b078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b07a:	f04f 31ff 	mov.w	r1, #4294967295
 800b07e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b082:	40f9      	lsrs	r1, r7
 800b084:	4208      	tst	r0, r1
 800b086:	d0f5      	beq.n	800b074 <round+0x5c>
 800b088:	2001      	movs	r0, #1
 800b08a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800b08e:	fa00 f404 	lsl.w	r4, r0, r4
 800b092:	1912      	adds	r2, r2, r4
 800b094:	bf28      	it	cs
 800b096:	181b      	addcs	r3, r3, r0
 800b098:	ea22 0201 	bic.w	r2, r2, r1
 800b09c:	4619      	mov	r1, r3
 800b09e:	4610      	mov	r0, r2
 800b0a0:	e7e6      	b.n	800b070 <round+0x58>
 800b0a2:	bf00      	nop
 800b0a4:	000fffff 	.word	0x000fffff

0800b0a8 <sin>:
 800b0a8:	b530      	push	{r4, r5, lr}
 800b0aa:	4a20      	ldr	r2, [pc, #128]	; (800b12c <sin+0x84>)
 800b0ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	dc06      	bgt.n	800b0c4 <sin+0x1c>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f001 fe33 	bl	800cd28 <__kernel_sin>
 800b0c2:	e006      	b.n	800b0d2 <sin+0x2a>
 800b0c4:	4a1a      	ldr	r2, [pc, #104]	; (800b130 <sin+0x88>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	dd05      	ble.n	800b0d6 <sin+0x2e>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	f7f5 f843 	bl	8000158 <__aeabi_dsub>
 800b0d2:	b007      	add	sp, #28
 800b0d4:	bd30      	pop	{r4, r5, pc}
 800b0d6:	aa02      	add	r2, sp, #8
 800b0d8:	f000 ff7e 	bl	800bfd8 <__ieee754_rem_pio2>
 800b0dc:	f000 0003 	and.w	r0, r0, #3
 800b0e0:	2801      	cmp	r0, #1
 800b0e2:	d009      	beq.n	800b0f8 <sin+0x50>
 800b0e4:	2802      	cmp	r0, #2
 800b0e6:	d00e      	beq.n	800b106 <sin+0x5e>
 800b0e8:	b9c0      	cbnz	r0, 800b11c <sin+0x74>
 800b0ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0f6:	e7e2      	b.n	800b0be <sin+0x16>
 800b0f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b100:	f001 fa12 	bl	800c528 <__kernel_cos>
 800b104:	e7e5      	b.n	800b0d2 <sin+0x2a>
 800b106:	2301      	movs	r3, #1
 800b108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b112:	f001 fe09 	bl	800cd28 <__kernel_sin>
 800b116:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b11a:	e7da      	b.n	800b0d2 <sin+0x2a>
 800b11c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b124:	f001 fa00 	bl	800c528 <__kernel_cos>
 800b128:	e7f5      	b.n	800b116 <sin+0x6e>
 800b12a:	bf00      	nop
 800b12c:	3fe921fb 	.word	0x3fe921fb
 800b130:	7fefffff 	.word	0x7fefffff
 800b134:	00000000 	.word	0x00000000

0800b138 <exp>:
 800b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13a:	4606      	mov	r6, r0
 800b13c:	460f      	mov	r7, r1
 800b13e:	f000 f8c3 	bl	800b2c8 <__ieee754_exp>
 800b142:	4604      	mov	r4, r0
 800b144:	460d      	mov	r5, r1
 800b146:	4630      	mov	r0, r6
 800b148:	4639      	mov	r1, r7
 800b14a:	f001 fed2 	bl	800cef2 <finite>
 800b14e:	b168      	cbz	r0, 800b16c <exp+0x34>
 800b150:	a311      	add	r3, pc, #68	; (adr r3, 800b198 <exp+0x60>)
 800b152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b156:	4630      	mov	r0, r6
 800b158:	4639      	mov	r1, r7
 800b15a:	f7f5 fc45 	bl	80009e8 <__aeabi_dcmpgt>
 800b15e:	b140      	cbz	r0, 800b172 <exp+0x3a>
 800b160:	f7fe fcc8 	bl	8009af4 <__errno>
 800b164:	2322      	movs	r3, #34	; 0x22
 800b166:	2400      	movs	r4, #0
 800b168:	4d0f      	ldr	r5, [pc, #60]	; (800b1a8 <exp+0x70>)
 800b16a:	6003      	str	r3, [r0, #0]
 800b16c:	4620      	mov	r0, r4
 800b16e:	4629      	mov	r1, r5
 800b170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b172:	4630      	mov	r0, r6
 800b174:	a30a      	add	r3, pc, #40	; (adr r3, 800b1a0 <exp+0x68>)
 800b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17a:	4639      	mov	r1, r7
 800b17c:	f7f5 fc16 	bl	80009ac <__aeabi_dcmplt>
 800b180:	2800      	cmp	r0, #0
 800b182:	d0f3      	beq.n	800b16c <exp+0x34>
 800b184:	f7fe fcb6 	bl	8009af4 <__errno>
 800b188:	2322      	movs	r3, #34	; 0x22
 800b18a:	2400      	movs	r4, #0
 800b18c:	2500      	movs	r5, #0
 800b18e:	6003      	str	r3, [r0, #0]
 800b190:	e7ec      	b.n	800b16c <exp+0x34>
 800b192:	bf00      	nop
 800b194:	f3af 8000 	nop.w
 800b198:	fefa39ef 	.word	0xfefa39ef
 800b19c:	40862e42 	.word	0x40862e42
 800b1a0:	d52d3051 	.word	0xd52d3051
 800b1a4:	c0874910 	.word	0xc0874910
 800b1a8:	7ff00000 	.word	0x7ff00000

0800b1ac <pow>:
 800b1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b0:	4614      	mov	r4, r2
 800b1b2:	461d      	mov	r5, r3
 800b1b4:	4680      	mov	r8, r0
 800b1b6:	4689      	mov	r9, r1
 800b1b8:	f000 f9f6 	bl	800b5a8 <__ieee754_pow>
 800b1bc:	4622      	mov	r2, r4
 800b1be:	4606      	mov	r6, r0
 800b1c0:	460f      	mov	r7, r1
 800b1c2:	462b      	mov	r3, r5
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f7f5 fc18 	bl	80009fc <__aeabi_dcmpun>
 800b1cc:	bbc8      	cbnz	r0, 800b242 <pow+0x96>
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	4640      	mov	r0, r8
 800b1d4:	4649      	mov	r1, r9
 800b1d6:	f7f5 fbdf 	bl	8000998 <__aeabi_dcmpeq>
 800b1da:	b1b8      	cbz	r0, 800b20c <pow+0x60>
 800b1dc:	2200      	movs	r2, #0
 800b1de:	2300      	movs	r3, #0
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	f7f5 fbd8 	bl	8000998 <__aeabi_dcmpeq>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d141      	bne.n	800b270 <pow+0xc4>
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	4629      	mov	r1, r5
 800b1f0:	f001 fe7f 	bl	800cef2 <finite>
 800b1f4:	b328      	cbz	r0, 800b242 <pow+0x96>
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	f7f5 fbd5 	bl	80009ac <__aeabi_dcmplt>
 800b202:	b1f0      	cbz	r0, 800b242 <pow+0x96>
 800b204:	f7fe fc76 	bl	8009af4 <__errno>
 800b208:	2322      	movs	r3, #34	; 0x22
 800b20a:	e019      	b.n	800b240 <pow+0x94>
 800b20c:	4630      	mov	r0, r6
 800b20e:	4639      	mov	r1, r7
 800b210:	f001 fe6f 	bl	800cef2 <finite>
 800b214:	b9c8      	cbnz	r0, 800b24a <pow+0x9e>
 800b216:	4640      	mov	r0, r8
 800b218:	4649      	mov	r1, r9
 800b21a:	f001 fe6a 	bl	800cef2 <finite>
 800b21e:	b1a0      	cbz	r0, 800b24a <pow+0x9e>
 800b220:	4620      	mov	r0, r4
 800b222:	4629      	mov	r1, r5
 800b224:	f001 fe65 	bl	800cef2 <finite>
 800b228:	b178      	cbz	r0, 800b24a <pow+0x9e>
 800b22a:	4632      	mov	r2, r6
 800b22c:	463b      	mov	r3, r7
 800b22e:	4630      	mov	r0, r6
 800b230:	4639      	mov	r1, r7
 800b232:	f7f5 fbe3 	bl	80009fc <__aeabi_dcmpun>
 800b236:	2800      	cmp	r0, #0
 800b238:	d0e4      	beq.n	800b204 <pow+0x58>
 800b23a:	f7fe fc5b 	bl	8009af4 <__errno>
 800b23e:	2321      	movs	r3, #33	; 0x21
 800b240:	6003      	str	r3, [r0, #0]
 800b242:	4630      	mov	r0, r6
 800b244:	4639      	mov	r1, r7
 800b246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24a:	2200      	movs	r2, #0
 800b24c:	2300      	movs	r3, #0
 800b24e:	4630      	mov	r0, r6
 800b250:	4639      	mov	r1, r7
 800b252:	f7f5 fba1 	bl	8000998 <__aeabi_dcmpeq>
 800b256:	2800      	cmp	r0, #0
 800b258:	d0f3      	beq.n	800b242 <pow+0x96>
 800b25a:	4640      	mov	r0, r8
 800b25c:	4649      	mov	r1, r9
 800b25e:	f001 fe48 	bl	800cef2 <finite>
 800b262:	2800      	cmp	r0, #0
 800b264:	d0ed      	beq.n	800b242 <pow+0x96>
 800b266:	4620      	mov	r0, r4
 800b268:	4629      	mov	r1, r5
 800b26a:	f001 fe42 	bl	800cef2 <finite>
 800b26e:	e7c8      	b.n	800b202 <pow+0x56>
 800b270:	2600      	movs	r6, #0
 800b272:	4f01      	ldr	r7, [pc, #4]	; (800b278 <pow+0xcc>)
 800b274:	e7e5      	b.n	800b242 <pow+0x96>
 800b276:	bf00      	nop
 800b278:	3ff00000 	.word	0x3ff00000

0800b27c <sqrt>:
 800b27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27e:	4606      	mov	r6, r0
 800b280:	460f      	mov	r7, r1
 800b282:	f001 f8a1 	bl	800c3c8 <__ieee754_sqrt>
 800b286:	4632      	mov	r2, r6
 800b288:	4604      	mov	r4, r0
 800b28a:	460d      	mov	r5, r1
 800b28c:	463b      	mov	r3, r7
 800b28e:	4630      	mov	r0, r6
 800b290:	4639      	mov	r1, r7
 800b292:	f7f5 fbb3 	bl	80009fc <__aeabi_dcmpun>
 800b296:	b990      	cbnz	r0, 800b2be <sqrt+0x42>
 800b298:	2200      	movs	r2, #0
 800b29a:	2300      	movs	r3, #0
 800b29c:	4630      	mov	r0, r6
 800b29e:	4639      	mov	r1, r7
 800b2a0:	f7f5 fb84 	bl	80009ac <__aeabi_dcmplt>
 800b2a4:	b158      	cbz	r0, 800b2be <sqrt+0x42>
 800b2a6:	f7fe fc25 	bl	8009af4 <__errno>
 800b2aa:	2321      	movs	r3, #33	; 0x21
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	6003      	str	r3, [r0, #0]
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	f7f5 fa31 	bl	800071c <__aeabi_ddiv>
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	460d      	mov	r5, r1
 800b2be:	4620      	mov	r0, r4
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2c4:	0000      	movs	r0, r0
	...

0800b2c8 <__ieee754_exp>:
 800b2c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2cc:	4fac      	ldr	r7, [pc, #688]	; (800b580 <__ieee754_exp+0x2b8>)
 800b2ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b2d2:	42bb      	cmp	r3, r7
 800b2d4:	4605      	mov	r5, r0
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800b2dc:	d933      	bls.n	800b346 <__ieee754_exp+0x7e>
 800b2de:	4fa9      	ldr	r7, [pc, #676]	; (800b584 <__ieee754_exp+0x2bc>)
 800b2e0:	42bb      	cmp	r3, r7
 800b2e2:	d913      	bls.n	800b30c <__ieee754_exp+0x44>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	d006      	beq.n	800b2fc <__ieee754_exp+0x34>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	f7f4 ff33 	bl	800015c <__adddf3>
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	e002      	b.n	800b302 <__ieee754_exp+0x3a>
 800b2fc:	b10e      	cbz	r6, 800b302 <__ieee754_exp+0x3a>
 800b2fe:	2500      	movs	r5, #0
 800b300:	462c      	mov	r4, r5
 800b302:	4628      	mov	r0, r5
 800b304:	4621      	mov	r1, r4
 800b306:	b004      	add	sp, #16
 800b308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30c:	a386      	add	r3, pc, #536	; (adr r3, 800b528 <__ieee754_exp+0x260>)
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	f7f5 fb69 	bl	80009e8 <__aeabi_dcmpgt>
 800b316:	4607      	mov	r7, r0
 800b318:	b128      	cbz	r0, 800b326 <__ieee754_exp+0x5e>
 800b31a:	2000      	movs	r0, #0
 800b31c:	b004      	add	sp, #16
 800b31e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b322:	f001 bdde 	b.w	800cee2 <__math_oflow>
 800b326:	4628      	mov	r0, r5
 800b328:	a381      	add	r3, pc, #516	; (adr r3, 800b530 <__ieee754_exp+0x268>)
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	4621      	mov	r1, r4
 800b330:	f7f5 fb3c 	bl	80009ac <__aeabi_dcmplt>
 800b334:	2800      	cmp	r0, #0
 800b336:	f000 8085 	beq.w	800b444 <__ieee754_exp+0x17c>
 800b33a:	4638      	mov	r0, r7
 800b33c:	b004      	add	sp, #16
 800b33e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b342:	f001 bdc9 	b.w	800ced8 <__math_uflow>
 800b346:	4a90      	ldr	r2, [pc, #576]	; (800b588 <__ieee754_exp+0x2c0>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	f240 80a7 	bls.w	800b49c <__ieee754_exp+0x1d4>
 800b34e:	4a8f      	ldr	r2, [pc, #572]	; (800b58c <__ieee754_exp+0x2c4>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d877      	bhi.n	800b444 <__ieee754_exp+0x17c>
 800b354:	4b8e      	ldr	r3, [pc, #568]	; (800b590 <__ieee754_exp+0x2c8>)
 800b356:	00f4      	lsls	r4, r6, #3
 800b358:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b360:	f7f4 fefa 	bl	8000158 <__aeabi_dsub>
 800b364:	4680      	mov	r8, r0
 800b366:	4689      	mov	r9, r1
 800b368:	4b8a      	ldr	r3, [pc, #552]	; (800b594 <__ieee754_exp+0x2cc>)
 800b36a:	f1c6 0a01 	rsb	sl, r6, #1
 800b36e:	4423      	add	r3, r4
 800b370:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b374:	e9cd 3400 	strd	r3, r4, [sp]
 800b378:	ebaa 0a06 	sub.w	sl, sl, r6
 800b37c:	4640      	mov	r0, r8
 800b37e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b382:	4649      	mov	r1, r9
 800b384:	f7f4 fee8 	bl	8000158 <__aeabi_dsub>
 800b388:	4605      	mov	r5, r0
 800b38a:	460c      	mov	r4, r1
 800b38c:	462a      	mov	r2, r5
 800b38e:	4623      	mov	r3, r4
 800b390:	4628      	mov	r0, r5
 800b392:	4621      	mov	r1, r4
 800b394:	f7f5 f898 	bl	80004c8 <__aeabi_dmul>
 800b398:	a367      	add	r3, pc, #412	; (adr r3, 800b538 <__ieee754_exp+0x270>)
 800b39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39e:	4606      	mov	r6, r0
 800b3a0:	460f      	mov	r7, r1
 800b3a2:	f7f5 f891 	bl	80004c8 <__aeabi_dmul>
 800b3a6:	a366      	add	r3, pc, #408	; (adr r3, 800b540 <__ieee754_exp+0x278>)
 800b3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ac:	f7f4 fed4 	bl	8000158 <__aeabi_dsub>
 800b3b0:	4632      	mov	r2, r6
 800b3b2:	463b      	mov	r3, r7
 800b3b4:	f7f5 f888 	bl	80004c8 <__aeabi_dmul>
 800b3b8:	a363      	add	r3, pc, #396	; (adr r3, 800b548 <__ieee754_exp+0x280>)
 800b3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3be:	f7f4 fecd 	bl	800015c <__adddf3>
 800b3c2:	4632      	mov	r2, r6
 800b3c4:	463b      	mov	r3, r7
 800b3c6:	f7f5 f87f 	bl	80004c8 <__aeabi_dmul>
 800b3ca:	a361      	add	r3, pc, #388	; (adr r3, 800b550 <__ieee754_exp+0x288>)
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	f7f4 fec2 	bl	8000158 <__aeabi_dsub>
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	463b      	mov	r3, r7
 800b3d8:	f7f5 f876 	bl	80004c8 <__aeabi_dmul>
 800b3dc:	a35e      	add	r3, pc, #376	; (adr r3, 800b558 <__ieee754_exp+0x290>)
 800b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e2:	f7f4 febb 	bl	800015c <__adddf3>
 800b3e6:	4632      	mov	r2, r6
 800b3e8:	463b      	mov	r3, r7
 800b3ea:	f7f5 f86d 	bl	80004c8 <__aeabi_dmul>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	f7f4 feaf 	bl	8000158 <__aeabi_dsub>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	4606      	mov	r6, r0
 800b400:	460f      	mov	r7, r1
 800b402:	4628      	mov	r0, r5
 800b404:	4621      	mov	r1, r4
 800b406:	f7f5 f85f 	bl	80004c8 <__aeabi_dmul>
 800b40a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b40e:	f1ba 0f00 	cmp.w	sl, #0
 800b412:	d15a      	bne.n	800b4ca <__ieee754_exp+0x202>
 800b414:	2200      	movs	r2, #0
 800b416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b41a:	4630      	mov	r0, r6
 800b41c:	4639      	mov	r1, r7
 800b41e:	f7f4 fe9b 	bl	8000158 <__aeabi_dsub>
 800b422:	4602      	mov	r2, r0
 800b424:	460b      	mov	r3, r1
 800b426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b42a:	f7f5 f977 	bl	800071c <__aeabi_ddiv>
 800b42e:	462a      	mov	r2, r5
 800b430:	4623      	mov	r3, r4
 800b432:	f7f4 fe91 	bl	8000158 <__aeabi_dsub>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	2000      	movs	r0, #0
 800b43c:	4956      	ldr	r1, [pc, #344]	; (800b598 <__ieee754_exp+0x2d0>)
 800b43e:	f7f4 fe8b 	bl	8000158 <__aeabi_dsub>
 800b442:	e758      	b.n	800b2f6 <__ieee754_exp+0x2e>
 800b444:	4855      	ldr	r0, [pc, #340]	; (800b59c <__ieee754_exp+0x2d4>)
 800b446:	a346      	add	r3, pc, #280	; (adr r3, 800b560 <__ieee754_exp+0x298>)
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b450:	4621      	mov	r1, r4
 800b452:	4628      	mov	r0, r5
 800b454:	f7f5 f838 	bl	80004c8 <__aeabi_dmul>
 800b458:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b45c:	f7f4 fe7e 	bl	800015c <__adddf3>
 800b460:	f7f5 fae2 	bl	8000a28 <__aeabi_d2iz>
 800b464:	4682      	mov	sl, r0
 800b466:	f7f4 ffc5 	bl	80003f4 <__aeabi_i2d>
 800b46a:	a33f      	add	r3, pc, #252	; (adr r3, 800b568 <__ieee754_exp+0x2a0>)
 800b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b470:	4606      	mov	r6, r0
 800b472:	460f      	mov	r7, r1
 800b474:	f7f5 f828 	bl	80004c8 <__aeabi_dmul>
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	4628      	mov	r0, r5
 800b47e:	4621      	mov	r1, r4
 800b480:	f7f4 fe6a 	bl	8000158 <__aeabi_dsub>
 800b484:	a33a      	add	r3, pc, #232	; (adr r3, 800b570 <__ieee754_exp+0x2a8>)
 800b486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48a:	4680      	mov	r8, r0
 800b48c:	4689      	mov	r9, r1
 800b48e:	4630      	mov	r0, r6
 800b490:	4639      	mov	r1, r7
 800b492:	f7f5 f819 	bl	80004c8 <__aeabi_dmul>
 800b496:	e9cd 0100 	strd	r0, r1, [sp]
 800b49a:	e76f      	b.n	800b37c <__ieee754_exp+0xb4>
 800b49c:	4a40      	ldr	r2, [pc, #256]	; (800b5a0 <__ieee754_exp+0x2d8>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d80e      	bhi.n	800b4c0 <__ieee754_exp+0x1f8>
 800b4a2:	a335      	add	r3, pc, #212	; (adr r3, 800b578 <__ieee754_exp+0x2b0>)
 800b4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a8:	f7f4 fe58 	bl	800015c <__adddf3>
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	4b3a      	ldr	r3, [pc, #232]	; (800b598 <__ieee754_exp+0x2d0>)
 800b4b0:	f7f5 fa9a 	bl	80009e8 <__aeabi_dcmpgt>
 800b4b4:	b138      	cbz	r0, 800b4c6 <__ieee754_exp+0x1fe>
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	4b36      	ldr	r3, [pc, #216]	; (800b598 <__ieee754_exp+0x2d0>)
 800b4be:	e718      	b.n	800b2f2 <__ieee754_exp+0x2a>
 800b4c0:	f04f 0a00 	mov.w	sl, #0
 800b4c4:	e762      	b.n	800b38c <__ieee754_exp+0xc4>
 800b4c6:	4682      	mov	sl, r0
 800b4c8:	e760      	b.n	800b38c <__ieee754_exp+0xc4>
 800b4ca:	4632      	mov	r2, r6
 800b4cc:	463b      	mov	r3, r7
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b4d4:	f7f4 fe40 	bl	8000158 <__aeabi_dsub>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	460b      	mov	r3, r1
 800b4dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4e0:	f7f5 f91c 	bl	800071c <__aeabi_ddiv>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4ec:	f7f4 fe34 	bl	8000158 <__aeabi_dsub>
 800b4f0:	4642      	mov	r2, r8
 800b4f2:	464b      	mov	r3, r9
 800b4f4:	f7f4 fe30 	bl	8000158 <__aeabi_dsub>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	4926      	ldr	r1, [pc, #152]	; (800b598 <__ieee754_exp+0x2d0>)
 800b500:	f7f4 fe2a 	bl	8000158 <__aeabi_dsub>
 800b504:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800b508:	4592      	cmp	sl, r2
 800b50a:	db02      	blt.n	800b512 <__ieee754_exp+0x24a>
 800b50c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b510:	e6f1      	b.n	800b2f6 <__ieee754_exp+0x2e>
 800b512:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800b516:	2200      	movs	r2, #0
 800b518:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800b51c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b520:	f7f4 ffd2 	bl	80004c8 <__aeabi_dmul>
 800b524:	e6e7      	b.n	800b2f6 <__ieee754_exp+0x2e>
 800b526:	bf00      	nop
 800b528:	fefa39ef 	.word	0xfefa39ef
 800b52c:	40862e42 	.word	0x40862e42
 800b530:	d52d3051 	.word	0xd52d3051
 800b534:	c0874910 	.word	0xc0874910
 800b538:	72bea4d0 	.word	0x72bea4d0
 800b53c:	3e663769 	.word	0x3e663769
 800b540:	c5d26bf1 	.word	0xc5d26bf1
 800b544:	3ebbbd41 	.word	0x3ebbbd41
 800b548:	af25de2c 	.word	0xaf25de2c
 800b54c:	3f11566a 	.word	0x3f11566a
 800b550:	16bebd93 	.word	0x16bebd93
 800b554:	3f66c16c 	.word	0x3f66c16c
 800b558:	5555553e 	.word	0x5555553e
 800b55c:	3fc55555 	.word	0x3fc55555
 800b560:	652b82fe 	.word	0x652b82fe
 800b564:	3ff71547 	.word	0x3ff71547
 800b568:	fee00000 	.word	0xfee00000
 800b56c:	3fe62e42 	.word	0x3fe62e42
 800b570:	35793c76 	.word	0x35793c76
 800b574:	3dea39ef 	.word	0x3dea39ef
 800b578:	8800759c 	.word	0x8800759c
 800b57c:	7e37e43c 	.word	0x7e37e43c
 800b580:	40862e41 	.word	0x40862e41
 800b584:	7fefffff 	.word	0x7fefffff
 800b588:	3fd62e42 	.word	0x3fd62e42
 800b58c:	3ff0a2b1 	.word	0x3ff0a2b1
 800b590:	0800d2e0 	.word	0x0800d2e0
 800b594:	0800d2f0 	.word	0x0800d2f0
 800b598:	3ff00000 	.word	0x3ff00000
 800b59c:	0800d2d0 	.word	0x0800d2d0
 800b5a0:	3defffff 	.word	0x3defffff
 800b5a4:	00000000 	.word	0x00000000

0800b5a8 <__ieee754_pow>:
 800b5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ac:	b093      	sub	sp, #76	; 0x4c
 800b5ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5b2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800b5b6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b5ba:	4689      	mov	r9, r1
 800b5bc:	ea56 0102 	orrs.w	r1, r6, r2
 800b5c0:	4680      	mov	r8, r0
 800b5c2:	d111      	bne.n	800b5e8 <__ieee754_pow+0x40>
 800b5c4:	1803      	adds	r3, r0, r0
 800b5c6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800b5ca:	4152      	adcs	r2, r2
 800b5cc:	4299      	cmp	r1, r3
 800b5ce:	4b82      	ldr	r3, [pc, #520]	; (800b7d8 <__ieee754_pow+0x230>)
 800b5d0:	4193      	sbcs	r3, r2
 800b5d2:	f080 84b9 	bcs.w	800bf48 <__ieee754_pow+0x9a0>
 800b5d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5da:	4640      	mov	r0, r8
 800b5dc:	4649      	mov	r1, r9
 800b5de:	f7f4 fdbd 	bl	800015c <__adddf3>
 800b5e2:	4683      	mov	fp, r0
 800b5e4:	468c      	mov	ip, r1
 800b5e6:	e06f      	b.n	800b6c8 <__ieee754_pow+0x120>
 800b5e8:	4b7c      	ldr	r3, [pc, #496]	; (800b7dc <__ieee754_pow+0x234>)
 800b5ea:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800b5ee:	429c      	cmp	r4, r3
 800b5f0:	464d      	mov	r5, r9
 800b5f2:	4682      	mov	sl, r0
 800b5f4:	dc06      	bgt.n	800b604 <__ieee754_pow+0x5c>
 800b5f6:	d101      	bne.n	800b5fc <__ieee754_pow+0x54>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d1ec      	bne.n	800b5d6 <__ieee754_pow+0x2e>
 800b5fc:	429e      	cmp	r6, r3
 800b5fe:	dc01      	bgt.n	800b604 <__ieee754_pow+0x5c>
 800b600:	d10f      	bne.n	800b622 <__ieee754_pow+0x7a>
 800b602:	b172      	cbz	r2, 800b622 <__ieee754_pow+0x7a>
 800b604:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b608:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b60c:	ea55 050a 	orrs.w	r5, r5, sl
 800b610:	d1e1      	bne.n	800b5d6 <__ieee754_pow+0x2e>
 800b612:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b616:	18db      	adds	r3, r3, r3
 800b618:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b61c:	4152      	adcs	r2, r2
 800b61e:	429d      	cmp	r5, r3
 800b620:	e7d5      	b.n	800b5ce <__ieee754_pow+0x26>
 800b622:	2d00      	cmp	r5, #0
 800b624:	da39      	bge.n	800b69a <__ieee754_pow+0xf2>
 800b626:	4b6e      	ldr	r3, [pc, #440]	; (800b7e0 <__ieee754_pow+0x238>)
 800b628:	429e      	cmp	r6, r3
 800b62a:	dc52      	bgt.n	800b6d2 <__ieee754_pow+0x12a>
 800b62c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b630:	429e      	cmp	r6, r3
 800b632:	f340 849c 	ble.w	800bf6e <__ieee754_pow+0x9c6>
 800b636:	1533      	asrs	r3, r6, #20
 800b638:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b63c:	2b14      	cmp	r3, #20
 800b63e:	dd0f      	ble.n	800b660 <__ieee754_pow+0xb8>
 800b640:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b644:	fa22 f103 	lsr.w	r1, r2, r3
 800b648:	fa01 f303 	lsl.w	r3, r1, r3
 800b64c:	4293      	cmp	r3, r2
 800b64e:	f040 848e 	bne.w	800bf6e <__ieee754_pow+0x9c6>
 800b652:	f001 0101 	and.w	r1, r1, #1
 800b656:	f1c1 0302 	rsb	r3, r1, #2
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	b182      	cbz	r2, 800b680 <__ieee754_pow+0xd8>
 800b65e:	e05d      	b.n	800b71c <__ieee754_pow+0x174>
 800b660:	2a00      	cmp	r2, #0
 800b662:	d159      	bne.n	800b718 <__ieee754_pow+0x170>
 800b664:	f1c3 0314 	rsb	r3, r3, #20
 800b668:	fa46 f103 	asr.w	r1, r6, r3
 800b66c:	fa01 f303 	lsl.w	r3, r1, r3
 800b670:	42b3      	cmp	r3, r6
 800b672:	f040 8479 	bne.w	800bf68 <__ieee754_pow+0x9c0>
 800b676:	f001 0101 	and.w	r1, r1, #1
 800b67a:	f1c1 0302 	rsb	r3, r1, #2
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	4b58      	ldr	r3, [pc, #352]	; (800b7e4 <__ieee754_pow+0x23c>)
 800b682:	429e      	cmp	r6, r3
 800b684:	d132      	bne.n	800b6ec <__ieee754_pow+0x144>
 800b686:	2f00      	cmp	r7, #0
 800b688:	f280 846a 	bge.w	800bf60 <__ieee754_pow+0x9b8>
 800b68c:	4642      	mov	r2, r8
 800b68e:	464b      	mov	r3, r9
 800b690:	2000      	movs	r0, #0
 800b692:	4954      	ldr	r1, [pc, #336]	; (800b7e4 <__ieee754_pow+0x23c>)
 800b694:	f7f5 f842 	bl	800071c <__aeabi_ddiv>
 800b698:	e7a3      	b.n	800b5e2 <__ieee754_pow+0x3a>
 800b69a:	2300      	movs	r3, #0
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	2a00      	cmp	r2, #0
 800b6a0:	d13c      	bne.n	800b71c <__ieee754_pow+0x174>
 800b6a2:	4b4e      	ldr	r3, [pc, #312]	; (800b7dc <__ieee754_pow+0x234>)
 800b6a4:	429e      	cmp	r6, r3
 800b6a6:	d1eb      	bne.n	800b680 <__ieee754_pow+0xd8>
 800b6a8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b6ac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b6b0:	ea53 030a 	orrs.w	r3, r3, sl
 800b6b4:	f000 8448 	beq.w	800bf48 <__ieee754_pow+0x9a0>
 800b6b8:	4b4b      	ldr	r3, [pc, #300]	; (800b7e8 <__ieee754_pow+0x240>)
 800b6ba:	429c      	cmp	r4, r3
 800b6bc:	dd0b      	ble.n	800b6d6 <__ieee754_pow+0x12e>
 800b6be:	2f00      	cmp	r7, #0
 800b6c0:	f2c0 8448 	blt.w	800bf54 <__ieee754_pow+0x9ac>
 800b6c4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b6c8:	4658      	mov	r0, fp
 800b6ca:	4661      	mov	r1, ip
 800b6cc:	b013      	add	sp, #76	; 0x4c
 800b6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	e7e2      	b.n	800b69c <__ieee754_pow+0xf4>
 800b6d6:	2f00      	cmp	r7, #0
 800b6d8:	f04f 0b00 	mov.w	fp, #0
 800b6dc:	f04f 0c00 	mov.w	ip, #0
 800b6e0:	daf2      	bge.n	800b6c8 <__ieee754_pow+0x120>
 800b6e2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b6e6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b6ea:	e7ed      	b.n	800b6c8 <__ieee754_pow+0x120>
 800b6ec:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b6f0:	d106      	bne.n	800b700 <__ieee754_pow+0x158>
 800b6f2:	4642      	mov	r2, r8
 800b6f4:	464b      	mov	r3, r9
 800b6f6:	4640      	mov	r0, r8
 800b6f8:	4649      	mov	r1, r9
 800b6fa:	f7f4 fee5 	bl	80004c8 <__aeabi_dmul>
 800b6fe:	e770      	b.n	800b5e2 <__ieee754_pow+0x3a>
 800b700:	4b3a      	ldr	r3, [pc, #232]	; (800b7ec <__ieee754_pow+0x244>)
 800b702:	429f      	cmp	r7, r3
 800b704:	d10a      	bne.n	800b71c <__ieee754_pow+0x174>
 800b706:	2d00      	cmp	r5, #0
 800b708:	db08      	blt.n	800b71c <__ieee754_pow+0x174>
 800b70a:	4640      	mov	r0, r8
 800b70c:	4649      	mov	r1, r9
 800b70e:	b013      	add	sp, #76	; 0x4c
 800b710:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	f000 be58 	b.w	800c3c8 <__ieee754_sqrt>
 800b718:	2300      	movs	r3, #0
 800b71a:	9300      	str	r3, [sp, #0]
 800b71c:	4640      	mov	r0, r8
 800b71e:	4649      	mov	r1, r9
 800b720:	f001 fbe4 	bl	800ceec <fabs>
 800b724:	4683      	mov	fp, r0
 800b726:	468c      	mov	ip, r1
 800b728:	f1ba 0f00 	cmp.w	sl, #0
 800b72c:	d128      	bne.n	800b780 <__ieee754_pow+0x1d8>
 800b72e:	b124      	cbz	r4, 800b73a <__ieee754_pow+0x192>
 800b730:	4b2c      	ldr	r3, [pc, #176]	; (800b7e4 <__ieee754_pow+0x23c>)
 800b732:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b736:	429a      	cmp	r2, r3
 800b738:	d122      	bne.n	800b780 <__ieee754_pow+0x1d8>
 800b73a:	2f00      	cmp	r7, #0
 800b73c:	da07      	bge.n	800b74e <__ieee754_pow+0x1a6>
 800b73e:	465a      	mov	r2, fp
 800b740:	4663      	mov	r3, ip
 800b742:	2000      	movs	r0, #0
 800b744:	4927      	ldr	r1, [pc, #156]	; (800b7e4 <__ieee754_pow+0x23c>)
 800b746:	f7f4 ffe9 	bl	800071c <__aeabi_ddiv>
 800b74a:	4683      	mov	fp, r0
 800b74c:	468c      	mov	ip, r1
 800b74e:	2d00      	cmp	r5, #0
 800b750:	daba      	bge.n	800b6c8 <__ieee754_pow+0x120>
 800b752:	9b00      	ldr	r3, [sp, #0]
 800b754:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b758:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b75c:	4323      	orrs	r3, r4
 800b75e:	d108      	bne.n	800b772 <__ieee754_pow+0x1ca>
 800b760:	465a      	mov	r2, fp
 800b762:	4663      	mov	r3, ip
 800b764:	4658      	mov	r0, fp
 800b766:	4661      	mov	r1, ip
 800b768:	f7f4 fcf6 	bl	8000158 <__aeabi_dsub>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	e790      	b.n	800b694 <__ieee754_pow+0xec>
 800b772:	9b00      	ldr	r3, [sp, #0]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d1a7      	bne.n	800b6c8 <__ieee754_pow+0x120>
 800b778:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b77c:	469c      	mov	ip, r3
 800b77e:	e7a3      	b.n	800b6c8 <__ieee754_pow+0x120>
 800b780:	0feb      	lsrs	r3, r5, #31
 800b782:	3b01      	subs	r3, #1
 800b784:	930c      	str	r3, [sp, #48]	; 0x30
 800b786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b788:	9b00      	ldr	r3, [sp, #0]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	d104      	bne.n	800b798 <__ieee754_pow+0x1f0>
 800b78e:	4642      	mov	r2, r8
 800b790:	464b      	mov	r3, r9
 800b792:	4640      	mov	r0, r8
 800b794:	4649      	mov	r1, r9
 800b796:	e7e7      	b.n	800b768 <__ieee754_pow+0x1c0>
 800b798:	4b15      	ldr	r3, [pc, #84]	; (800b7f0 <__ieee754_pow+0x248>)
 800b79a:	429e      	cmp	r6, r3
 800b79c:	f340 80f6 	ble.w	800b98c <__ieee754_pow+0x3e4>
 800b7a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b7a4:	429e      	cmp	r6, r3
 800b7a6:	4b10      	ldr	r3, [pc, #64]	; (800b7e8 <__ieee754_pow+0x240>)
 800b7a8:	dd09      	ble.n	800b7be <__ieee754_pow+0x216>
 800b7aa:	429c      	cmp	r4, r3
 800b7ac:	dc0c      	bgt.n	800b7c8 <__ieee754_pow+0x220>
 800b7ae:	2f00      	cmp	r7, #0
 800b7b0:	da0c      	bge.n	800b7cc <__ieee754_pow+0x224>
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	b013      	add	sp, #76	; 0x4c
 800b7b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	f001 bb92 	b.w	800cee2 <__math_oflow>
 800b7be:	429c      	cmp	r4, r3
 800b7c0:	dbf5      	blt.n	800b7ae <__ieee754_pow+0x206>
 800b7c2:	4b08      	ldr	r3, [pc, #32]	; (800b7e4 <__ieee754_pow+0x23c>)
 800b7c4:	429c      	cmp	r4, r3
 800b7c6:	dd15      	ble.n	800b7f4 <__ieee754_pow+0x24c>
 800b7c8:	2f00      	cmp	r7, #0
 800b7ca:	dcf2      	bgt.n	800b7b2 <__ieee754_pow+0x20a>
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	b013      	add	sp, #76	; 0x4c
 800b7d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d4:	f001 bb80 	b.w	800ced8 <__math_uflow>
 800b7d8:	fff00000 	.word	0xfff00000
 800b7dc:	7ff00000 	.word	0x7ff00000
 800b7e0:	433fffff 	.word	0x433fffff
 800b7e4:	3ff00000 	.word	0x3ff00000
 800b7e8:	3fefffff 	.word	0x3fefffff
 800b7ec:	3fe00000 	.word	0x3fe00000
 800b7f0:	41e00000 	.word	0x41e00000
 800b7f4:	4661      	mov	r1, ip
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	4658      	mov	r0, fp
 800b7fa:	4b5f      	ldr	r3, [pc, #380]	; (800b978 <__ieee754_pow+0x3d0>)
 800b7fc:	f7f4 fcac 	bl	8000158 <__aeabi_dsub>
 800b800:	a355      	add	r3, pc, #340	; (adr r3, 800b958 <__ieee754_pow+0x3b0>)
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	4604      	mov	r4, r0
 800b808:	460d      	mov	r5, r1
 800b80a:	f7f4 fe5d 	bl	80004c8 <__aeabi_dmul>
 800b80e:	a354      	add	r3, pc, #336	; (adr r3, 800b960 <__ieee754_pow+0x3b8>)
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	4606      	mov	r6, r0
 800b816:	460f      	mov	r7, r1
 800b818:	4620      	mov	r0, r4
 800b81a:	4629      	mov	r1, r5
 800b81c:	f7f4 fe54 	bl	80004c8 <__aeabi_dmul>
 800b820:	2200      	movs	r2, #0
 800b822:	4682      	mov	sl, r0
 800b824:	468b      	mov	fp, r1
 800b826:	4620      	mov	r0, r4
 800b828:	4629      	mov	r1, r5
 800b82a:	4b54      	ldr	r3, [pc, #336]	; (800b97c <__ieee754_pow+0x3d4>)
 800b82c:	f7f4 fe4c 	bl	80004c8 <__aeabi_dmul>
 800b830:	4602      	mov	r2, r0
 800b832:	460b      	mov	r3, r1
 800b834:	a14c      	add	r1, pc, #304	; (adr r1, 800b968 <__ieee754_pow+0x3c0>)
 800b836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b83a:	f7f4 fc8d 	bl	8000158 <__aeabi_dsub>
 800b83e:	4622      	mov	r2, r4
 800b840:	462b      	mov	r3, r5
 800b842:	f7f4 fe41 	bl	80004c8 <__aeabi_dmul>
 800b846:	4602      	mov	r2, r0
 800b848:	460b      	mov	r3, r1
 800b84a:	2000      	movs	r0, #0
 800b84c:	494c      	ldr	r1, [pc, #304]	; (800b980 <__ieee754_pow+0x3d8>)
 800b84e:	f7f4 fc83 	bl	8000158 <__aeabi_dsub>
 800b852:	4622      	mov	r2, r4
 800b854:	462b      	mov	r3, r5
 800b856:	4680      	mov	r8, r0
 800b858:	4689      	mov	r9, r1
 800b85a:	4620      	mov	r0, r4
 800b85c:	4629      	mov	r1, r5
 800b85e:	f7f4 fe33 	bl	80004c8 <__aeabi_dmul>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	4640      	mov	r0, r8
 800b868:	4649      	mov	r1, r9
 800b86a:	f7f4 fe2d 	bl	80004c8 <__aeabi_dmul>
 800b86e:	a340      	add	r3, pc, #256	; (adr r3, 800b970 <__ieee754_pow+0x3c8>)
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	f7f4 fe28 	bl	80004c8 <__aeabi_dmul>
 800b878:	4602      	mov	r2, r0
 800b87a:	460b      	mov	r3, r1
 800b87c:	4650      	mov	r0, sl
 800b87e:	4659      	mov	r1, fp
 800b880:	f7f4 fc6a 	bl	8000158 <__aeabi_dsub>
 800b884:	f04f 0a00 	mov.w	sl, #0
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	4604      	mov	r4, r0
 800b88e:	460d      	mov	r5, r1
 800b890:	4630      	mov	r0, r6
 800b892:	4639      	mov	r1, r7
 800b894:	f7f4 fc62 	bl	800015c <__adddf3>
 800b898:	4632      	mov	r2, r6
 800b89a:	463b      	mov	r3, r7
 800b89c:	4650      	mov	r0, sl
 800b89e:	468b      	mov	fp, r1
 800b8a0:	f7f4 fc5a 	bl	8000158 <__aeabi_dsub>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	f7f4 fc54 	bl	8000158 <__aeabi_dsub>
 800b8b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b8b4:	9b00      	ldr	r3, [sp, #0]
 800b8b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	f04f 0600 	mov.w	r6, #0
 800b8c0:	f04f 0200 	mov.w	r2, #0
 800b8c4:	bf0c      	ite	eq
 800b8c6:	4b2f      	ldreq	r3, [pc, #188]	; (800b984 <__ieee754_pow+0x3dc>)
 800b8c8:	4b2b      	ldrne	r3, [pc, #172]	; (800b978 <__ieee754_pow+0x3d0>)
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	460d      	mov	r5, r1
 800b8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8d2:	e9cd 2300 	strd	r2, r3, [sp]
 800b8d6:	4632      	mov	r2, r6
 800b8d8:	463b      	mov	r3, r7
 800b8da:	f7f4 fc3d 	bl	8000158 <__aeabi_dsub>
 800b8de:	4652      	mov	r2, sl
 800b8e0:	465b      	mov	r3, fp
 800b8e2:	f7f4 fdf1 	bl	80004c8 <__aeabi_dmul>
 800b8e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8ea:	4680      	mov	r8, r0
 800b8ec:	4689      	mov	r9, r1
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	f7f4 fde9 	bl	80004c8 <__aeabi_dmul>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	4640      	mov	r0, r8
 800b8fc:	4649      	mov	r1, r9
 800b8fe:	f7f4 fc2d 	bl	800015c <__adddf3>
 800b902:	4632      	mov	r2, r6
 800b904:	463b      	mov	r3, r7
 800b906:	4680      	mov	r8, r0
 800b908:	4689      	mov	r9, r1
 800b90a:	4650      	mov	r0, sl
 800b90c:	4659      	mov	r1, fp
 800b90e:	f7f4 fddb 	bl	80004c8 <__aeabi_dmul>
 800b912:	4604      	mov	r4, r0
 800b914:	460d      	mov	r5, r1
 800b916:	460b      	mov	r3, r1
 800b918:	4602      	mov	r2, r0
 800b91a:	4649      	mov	r1, r9
 800b91c:	4640      	mov	r0, r8
 800b91e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b922:	f7f4 fc1b 	bl	800015c <__adddf3>
 800b926:	4b18      	ldr	r3, [pc, #96]	; (800b988 <__ieee754_pow+0x3e0>)
 800b928:	4682      	mov	sl, r0
 800b92a:	4299      	cmp	r1, r3
 800b92c:	460f      	mov	r7, r1
 800b92e:	460e      	mov	r6, r1
 800b930:	f340 82e5 	ble.w	800befe <__ieee754_pow+0x956>
 800b934:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b938:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b93c:	4303      	orrs	r3, r0
 800b93e:	f000 81df 	beq.w	800bd00 <__ieee754_pow+0x758>
 800b942:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b946:	2200      	movs	r2, #0
 800b948:	2300      	movs	r3, #0
 800b94a:	f7f5 f82f 	bl	80009ac <__aeabi_dcmplt>
 800b94e:	3800      	subs	r0, #0
 800b950:	bf18      	it	ne
 800b952:	2001      	movne	r0, #1
 800b954:	e72e      	b.n	800b7b4 <__ieee754_pow+0x20c>
 800b956:	bf00      	nop
 800b958:	60000000 	.word	0x60000000
 800b95c:	3ff71547 	.word	0x3ff71547
 800b960:	f85ddf44 	.word	0xf85ddf44
 800b964:	3e54ae0b 	.word	0x3e54ae0b
 800b968:	55555555 	.word	0x55555555
 800b96c:	3fd55555 	.word	0x3fd55555
 800b970:	652b82fe 	.word	0x652b82fe
 800b974:	3ff71547 	.word	0x3ff71547
 800b978:	3ff00000 	.word	0x3ff00000
 800b97c:	3fd00000 	.word	0x3fd00000
 800b980:	3fe00000 	.word	0x3fe00000
 800b984:	bff00000 	.word	0xbff00000
 800b988:	408fffff 	.word	0x408fffff
 800b98c:	4bd2      	ldr	r3, [pc, #840]	; (800bcd8 <__ieee754_pow+0x730>)
 800b98e:	2200      	movs	r2, #0
 800b990:	402b      	ands	r3, r5
 800b992:	b943      	cbnz	r3, 800b9a6 <__ieee754_pow+0x3fe>
 800b994:	4658      	mov	r0, fp
 800b996:	4661      	mov	r1, ip
 800b998:	4bd0      	ldr	r3, [pc, #832]	; (800bcdc <__ieee754_pow+0x734>)
 800b99a:	f7f4 fd95 	bl	80004c8 <__aeabi_dmul>
 800b99e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b9a2:	4683      	mov	fp, r0
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	1523      	asrs	r3, r4, #20
 800b9a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b9ac:	4413      	add	r3, r2
 800b9ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9b0:	4bcb      	ldr	r3, [pc, #812]	; (800bce0 <__ieee754_pow+0x738>)
 800b9b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b9b6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b9ba:	429c      	cmp	r4, r3
 800b9bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b9c0:	dd08      	ble.n	800b9d4 <__ieee754_pow+0x42c>
 800b9c2:	4bc8      	ldr	r3, [pc, #800]	; (800bce4 <__ieee754_pow+0x73c>)
 800b9c4:	429c      	cmp	r4, r3
 800b9c6:	f340 8199 	ble.w	800bcfc <__ieee754_pow+0x754>
 800b9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9cc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9d4:	2600      	movs	r6, #0
 800b9d6:	00f3      	lsls	r3, r6, #3
 800b9d8:	930d      	str	r3, [sp, #52]	; 0x34
 800b9da:	4bc3      	ldr	r3, [pc, #780]	; (800bce8 <__ieee754_pow+0x740>)
 800b9dc:	4658      	mov	r0, fp
 800b9de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b9e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b9ee:	4623      	mov	r3, r4
 800b9f0:	f7f4 fbb2 	bl	8000158 <__aeabi_dsub>
 800b9f4:	46da      	mov	sl, fp
 800b9f6:	462b      	mov	r3, r5
 800b9f8:	4652      	mov	r2, sl
 800b9fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b9fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba02:	f7f4 fbab 	bl	800015c <__adddf3>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	49b7      	ldr	r1, [pc, #732]	; (800bcec <__ieee754_pow+0x744>)
 800ba0e:	f7f4 fe85 	bl	800071c <__aeabi_ddiv>
 800ba12:	4602      	mov	r2, r0
 800ba14:	460b      	mov	r3, r1
 800ba16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ba1a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ba1e:	f7f4 fd53 	bl	80004c8 <__aeabi_dmul>
 800ba22:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ba26:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ba2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ba2e:	2300      	movs	r3, #0
 800ba30:	2200      	movs	r2, #0
 800ba32:	46ab      	mov	fp, r5
 800ba34:	106d      	asrs	r5, r5, #1
 800ba36:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ba40:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ba44:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ba48:	4640      	mov	r0, r8
 800ba4a:	4649      	mov	r1, r9
 800ba4c:	4614      	mov	r4, r2
 800ba4e:	461d      	mov	r5, r3
 800ba50:	f7f4 fd3a 	bl	80004c8 <__aeabi_dmul>
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ba5c:	f7f4 fb7c 	bl	8000158 <__aeabi_dsub>
 800ba60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba64:	4606      	mov	r6, r0
 800ba66:	460f      	mov	r7, r1
 800ba68:	4620      	mov	r0, r4
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	f7f4 fb74 	bl	8000158 <__aeabi_dsub>
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	4650      	mov	r0, sl
 800ba76:	4659      	mov	r1, fp
 800ba78:	f7f4 fb6e 	bl	8000158 <__aeabi_dsub>
 800ba7c:	4642      	mov	r2, r8
 800ba7e:	464b      	mov	r3, r9
 800ba80:	f7f4 fd22 	bl	80004c8 <__aeabi_dmul>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	4630      	mov	r0, r6
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	f7f4 fb64 	bl	8000158 <__aeabi_dsub>
 800ba90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba94:	f7f4 fd18 	bl	80004c8 <__aeabi_dmul>
 800ba98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800baa0:	4610      	mov	r0, r2
 800baa2:	4619      	mov	r1, r3
 800baa4:	f7f4 fd10 	bl	80004c8 <__aeabi_dmul>
 800baa8:	a379      	add	r3, pc, #484	; (adr r3, 800bc90 <__ieee754_pow+0x6e8>)
 800baaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baae:	4604      	mov	r4, r0
 800bab0:	460d      	mov	r5, r1
 800bab2:	f7f4 fd09 	bl	80004c8 <__aeabi_dmul>
 800bab6:	a378      	add	r3, pc, #480	; (adr r3, 800bc98 <__ieee754_pow+0x6f0>)
 800bab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babc:	f7f4 fb4e 	bl	800015c <__adddf3>
 800bac0:	4622      	mov	r2, r4
 800bac2:	462b      	mov	r3, r5
 800bac4:	f7f4 fd00 	bl	80004c8 <__aeabi_dmul>
 800bac8:	a375      	add	r3, pc, #468	; (adr r3, 800bca0 <__ieee754_pow+0x6f8>)
 800baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bace:	f7f4 fb45 	bl	800015c <__adddf3>
 800bad2:	4622      	mov	r2, r4
 800bad4:	462b      	mov	r3, r5
 800bad6:	f7f4 fcf7 	bl	80004c8 <__aeabi_dmul>
 800bada:	a373      	add	r3, pc, #460	; (adr r3, 800bca8 <__ieee754_pow+0x700>)
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f7f4 fb3c 	bl	800015c <__adddf3>
 800bae4:	4622      	mov	r2, r4
 800bae6:	462b      	mov	r3, r5
 800bae8:	f7f4 fcee 	bl	80004c8 <__aeabi_dmul>
 800baec:	a370      	add	r3, pc, #448	; (adr r3, 800bcb0 <__ieee754_pow+0x708>)
 800baee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf2:	f7f4 fb33 	bl	800015c <__adddf3>
 800baf6:	4622      	mov	r2, r4
 800baf8:	462b      	mov	r3, r5
 800bafa:	f7f4 fce5 	bl	80004c8 <__aeabi_dmul>
 800bafe:	a36e      	add	r3, pc, #440	; (adr r3, 800bcb8 <__ieee754_pow+0x710>)
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	f7f4 fb2a 	bl	800015c <__adddf3>
 800bb08:	4622      	mov	r2, r4
 800bb0a:	4606      	mov	r6, r0
 800bb0c:	460f      	mov	r7, r1
 800bb0e:	462b      	mov	r3, r5
 800bb10:	4620      	mov	r0, r4
 800bb12:	4629      	mov	r1, r5
 800bb14:	f7f4 fcd8 	bl	80004c8 <__aeabi_dmul>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	4639      	mov	r1, r7
 800bb20:	f7f4 fcd2 	bl	80004c8 <__aeabi_dmul>
 800bb24:	4604      	mov	r4, r0
 800bb26:	460d      	mov	r5, r1
 800bb28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb2c:	4642      	mov	r2, r8
 800bb2e:	464b      	mov	r3, r9
 800bb30:	f7f4 fb14 	bl	800015c <__adddf3>
 800bb34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb38:	f7f4 fcc6 	bl	80004c8 <__aeabi_dmul>
 800bb3c:	4622      	mov	r2, r4
 800bb3e:	462b      	mov	r3, r5
 800bb40:	f7f4 fb0c 	bl	800015c <__adddf3>
 800bb44:	4642      	mov	r2, r8
 800bb46:	4606      	mov	r6, r0
 800bb48:	460f      	mov	r7, r1
 800bb4a:	464b      	mov	r3, r9
 800bb4c:	4640      	mov	r0, r8
 800bb4e:	4649      	mov	r1, r9
 800bb50:	f7f4 fcba 	bl	80004c8 <__aeabi_dmul>
 800bb54:	2200      	movs	r2, #0
 800bb56:	4b66      	ldr	r3, [pc, #408]	; (800bcf0 <__ieee754_pow+0x748>)
 800bb58:	4682      	mov	sl, r0
 800bb5a:	468b      	mov	fp, r1
 800bb5c:	f7f4 fafe 	bl	800015c <__adddf3>
 800bb60:	4632      	mov	r2, r6
 800bb62:	463b      	mov	r3, r7
 800bb64:	f7f4 fafa 	bl	800015c <__adddf3>
 800bb68:	2400      	movs	r4, #0
 800bb6a:	460d      	mov	r5, r1
 800bb6c:	4622      	mov	r2, r4
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4640      	mov	r0, r8
 800bb72:	4649      	mov	r1, r9
 800bb74:	f7f4 fca8 	bl	80004c8 <__aeabi_dmul>
 800bb78:	2200      	movs	r2, #0
 800bb7a:	4680      	mov	r8, r0
 800bb7c:	4689      	mov	r9, r1
 800bb7e:	4620      	mov	r0, r4
 800bb80:	4629      	mov	r1, r5
 800bb82:	4b5b      	ldr	r3, [pc, #364]	; (800bcf0 <__ieee754_pow+0x748>)
 800bb84:	f7f4 fae8 	bl	8000158 <__aeabi_dsub>
 800bb88:	4652      	mov	r2, sl
 800bb8a:	465b      	mov	r3, fp
 800bb8c:	f7f4 fae4 	bl	8000158 <__aeabi_dsub>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	4630      	mov	r0, r6
 800bb96:	4639      	mov	r1, r7
 800bb98:	f7f4 fade 	bl	8000158 <__aeabi_dsub>
 800bb9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bba0:	f7f4 fc92 	bl	80004c8 <__aeabi_dmul>
 800bba4:	4622      	mov	r2, r4
 800bba6:	4606      	mov	r6, r0
 800bba8:	460f      	mov	r7, r1
 800bbaa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bbae:	462b      	mov	r3, r5
 800bbb0:	f7f4 fc8a 	bl	80004c8 <__aeabi_dmul>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	4630      	mov	r0, r6
 800bbba:	4639      	mov	r1, r7
 800bbbc:	f7f4 face 	bl	800015c <__adddf3>
 800bbc0:	2400      	movs	r4, #0
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	460f      	mov	r7, r1
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4640      	mov	r0, r8
 800bbcc:	4649      	mov	r1, r9
 800bbce:	f7f4 fac5 	bl	800015c <__adddf3>
 800bbd2:	a33b      	add	r3, pc, #236	; (adr r3, 800bcc0 <__ieee754_pow+0x718>)
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	4620      	mov	r0, r4
 800bbda:	460d      	mov	r5, r1
 800bbdc:	f7f4 fc74 	bl	80004c8 <__aeabi_dmul>
 800bbe0:	4642      	mov	r2, r8
 800bbe2:	464b      	mov	r3, r9
 800bbe4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bbe8:	4620      	mov	r0, r4
 800bbea:	4629      	mov	r1, r5
 800bbec:	f7f4 fab4 	bl	8000158 <__aeabi_dsub>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	f7f4 faae 	bl	8000158 <__aeabi_dsub>
 800bbfc:	a332      	add	r3, pc, #200	; (adr r3, 800bcc8 <__ieee754_pow+0x720>)
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	f7f4 fc61 	bl	80004c8 <__aeabi_dmul>
 800bc06:	a332      	add	r3, pc, #200	; (adr r3, 800bcd0 <__ieee754_pow+0x728>)
 800bc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0c:	4606      	mov	r6, r0
 800bc0e:	460f      	mov	r7, r1
 800bc10:	4620      	mov	r0, r4
 800bc12:	4629      	mov	r1, r5
 800bc14:	f7f4 fc58 	bl	80004c8 <__aeabi_dmul>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	4639      	mov	r1, r7
 800bc20:	f7f4 fa9c 	bl	800015c <__adddf3>
 800bc24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc26:	4b33      	ldr	r3, [pc, #204]	; (800bcf4 <__ieee754_pow+0x74c>)
 800bc28:	f04f 0a00 	mov.w	sl, #0
 800bc2c:	4413      	add	r3, r2
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	f7f4 fa93 	bl	800015c <__adddf3>
 800bc36:	4680      	mov	r8, r0
 800bc38:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bc3a:	4689      	mov	r9, r1
 800bc3c:	f7f4 fbda 	bl	80003f4 <__aeabi_i2d>
 800bc40:	4604      	mov	r4, r0
 800bc42:	460d      	mov	r5, r1
 800bc44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc46:	4b2c      	ldr	r3, [pc, #176]	; (800bcf8 <__ieee754_pow+0x750>)
 800bc48:	4413      	add	r3, r2
 800bc4a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bc4e:	4642      	mov	r2, r8
 800bc50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc54:	464b      	mov	r3, r9
 800bc56:	f7f4 fa81 	bl	800015c <__adddf3>
 800bc5a:	4632      	mov	r2, r6
 800bc5c:	463b      	mov	r3, r7
 800bc5e:	f7f4 fa7d 	bl	800015c <__adddf3>
 800bc62:	4622      	mov	r2, r4
 800bc64:	462b      	mov	r3, r5
 800bc66:	f7f4 fa79 	bl	800015c <__adddf3>
 800bc6a:	4622      	mov	r2, r4
 800bc6c:	462b      	mov	r3, r5
 800bc6e:	4650      	mov	r0, sl
 800bc70:	468b      	mov	fp, r1
 800bc72:	f7f4 fa71 	bl	8000158 <__aeabi_dsub>
 800bc76:	4632      	mov	r2, r6
 800bc78:	463b      	mov	r3, r7
 800bc7a:	f7f4 fa6d 	bl	8000158 <__aeabi_dsub>
 800bc7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc82:	f7f4 fa69 	bl	8000158 <__aeabi_dsub>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	4649      	mov	r1, r9
 800bc8e:	e60d      	b.n	800b8ac <__ieee754_pow+0x304>
 800bc90:	4a454eef 	.word	0x4a454eef
 800bc94:	3fca7e28 	.word	0x3fca7e28
 800bc98:	93c9db65 	.word	0x93c9db65
 800bc9c:	3fcd864a 	.word	0x3fcd864a
 800bca0:	a91d4101 	.word	0xa91d4101
 800bca4:	3fd17460 	.word	0x3fd17460
 800bca8:	518f264d 	.word	0x518f264d
 800bcac:	3fd55555 	.word	0x3fd55555
 800bcb0:	db6fabff 	.word	0xdb6fabff
 800bcb4:	3fdb6db6 	.word	0x3fdb6db6
 800bcb8:	33333303 	.word	0x33333303
 800bcbc:	3fe33333 	.word	0x3fe33333
 800bcc0:	e0000000 	.word	0xe0000000
 800bcc4:	3feec709 	.word	0x3feec709
 800bcc8:	dc3a03fd 	.word	0xdc3a03fd
 800bccc:	3feec709 	.word	0x3feec709
 800bcd0:	145b01f5 	.word	0x145b01f5
 800bcd4:	be3e2fe0 	.word	0xbe3e2fe0
 800bcd8:	7ff00000 	.word	0x7ff00000
 800bcdc:	43400000 	.word	0x43400000
 800bce0:	0003988e 	.word	0x0003988e
 800bce4:	000bb679 	.word	0x000bb679
 800bce8:	0800d300 	.word	0x0800d300
 800bcec:	3ff00000 	.word	0x3ff00000
 800bcf0:	40080000 	.word	0x40080000
 800bcf4:	0800d320 	.word	0x0800d320
 800bcf8:	0800d310 	.word	0x0800d310
 800bcfc:	2601      	movs	r6, #1
 800bcfe:	e66a      	b.n	800b9d6 <__ieee754_pow+0x42e>
 800bd00:	a39d      	add	r3, pc, #628	; (adr r3, 800bf78 <__ieee754_pow+0x9d0>)
 800bd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd06:	4640      	mov	r0, r8
 800bd08:	4649      	mov	r1, r9
 800bd0a:	f7f4 fa27 	bl	800015c <__adddf3>
 800bd0e:	4622      	mov	r2, r4
 800bd10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd14:	462b      	mov	r3, r5
 800bd16:	4650      	mov	r0, sl
 800bd18:	4639      	mov	r1, r7
 800bd1a:	f7f4 fa1d 	bl	8000158 <__aeabi_dsub>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd26:	f7f4 fe5f 	bl	80009e8 <__aeabi_dcmpgt>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	f47f ae09 	bne.w	800b942 <__ieee754_pow+0x39a>
 800bd30:	4aa3      	ldr	r2, [pc, #652]	; (800bfc0 <__ieee754_pow+0xa18>)
 800bd32:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800bd36:	4293      	cmp	r3, r2
 800bd38:	f340 8101 	ble.w	800bf3e <__ieee754_pow+0x996>
 800bd3c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bd40:	2000      	movs	r0, #0
 800bd42:	151b      	asrs	r3, r3, #20
 800bd44:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bd48:	fa4a f303 	asr.w	r3, sl, r3
 800bd4c:	4433      	add	r3, r6
 800bd4e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bd52:	4f9c      	ldr	r7, [pc, #624]	; (800bfc4 <__ieee754_pow+0xa1c>)
 800bd54:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bd58:	4117      	asrs	r7, r2
 800bd5a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bd5e:	ea23 0107 	bic.w	r1, r3, r7
 800bd62:	f1c2 0214 	rsb	r2, r2, #20
 800bd66:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	fa4a fa02 	asr.w	sl, sl, r2
 800bd70:	2e00      	cmp	r6, #0
 800bd72:	4602      	mov	r2, r0
 800bd74:	4629      	mov	r1, r5
 800bd76:	4620      	mov	r0, r4
 800bd78:	bfb8      	it	lt
 800bd7a:	f1ca 0a00 	rsblt	sl, sl, #0
 800bd7e:	f7f4 f9eb 	bl	8000158 <__aeabi_dsub>
 800bd82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd8a:	2400      	movs	r4, #0
 800bd8c:	4642      	mov	r2, r8
 800bd8e:	464b      	mov	r3, r9
 800bd90:	f7f4 f9e4 	bl	800015c <__adddf3>
 800bd94:	a37a      	add	r3, pc, #488	; (adr r3, 800bf80 <__ieee754_pow+0x9d8>)
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	460d      	mov	r5, r1
 800bd9e:	f7f4 fb93 	bl	80004c8 <__aeabi_dmul>
 800bda2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bda6:	4606      	mov	r6, r0
 800bda8:	460f      	mov	r7, r1
 800bdaa:	4620      	mov	r0, r4
 800bdac:	4629      	mov	r1, r5
 800bdae:	f7f4 f9d3 	bl	8000158 <__aeabi_dsub>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	4640      	mov	r0, r8
 800bdb8:	4649      	mov	r1, r9
 800bdba:	f7f4 f9cd 	bl	8000158 <__aeabi_dsub>
 800bdbe:	a372      	add	r3, pc, #456	; (adr r3, 800bf88 <__ieee754_pow+0x9e0>)
 800bdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc4:	f7f4 fb80 	bl	80004c8 <__aeabi_dmul>
 800bdc8:	a371      	add	r3, pc, #452	; (adr r3, 800bf90 <__ieee754_pow+0x9e8>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	4680      	mov	r8, r0
 800bdd0:	4689      	mov	r9, r1
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	f7f4 fb77 	bl	80004c8 <__aeabi_dmul>
 800bdda:	4602      	mov	r2, r0
 800bddc:	460b      	mov	r3, r1
 800bdde:	4640      	mov	r0, r8
 800bde0:	4649      	mov	r1, r9
 800bde2:	f7f4 f9bb 	bl	800015c <__adddf3>
 800bde6:	4604      	mov	r4, r0
 800bde8:	460d      	mov	r5, r1
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	4630      	mov	r0, r6
 800bdf0:	4639      	mov	r1, r7
 800bdf2:	f7f4 f9b3 	bl	800015c <__adddf3>
 800bdf6:	4632      	mov	r2, r6
 800bdf8:	463b      	mov	r3, r7
 800bdfa:	4680      	mov	r8, r0
 800bdfc:	4689      	mov	r9, r1
 800bdfe:	f7f4 f9ab 	bl	8000158 <__aeabi_dsub>
 800be02:	4602      	mov	r2, r0
 800be04:	460b      	mov	r3, r1
 800be06:	4620      	mov	r0, r4
 800be08:	4629      	mov	r1, r5
 800be0a:	f7f4 f9a5 	bl	8000158 <__aeabi_dsub>
 800be0e:	4642      	mov	r2, r8
 800be10:	4606      	mov	r6, r0
 800be12:	460f      	mov	r7, r1
 800be14:	464b      	mov	r3, r9
 800be16:	4640      	mov	r0, r8
 800be18:	4649      	mov	r1, r9
 800be1a:	f7f4 fb55 	bl	80004c8 <__aeabi_dmul>
 800be1e:	a35e      	add	r3, pc, #376	; (adr r3, 800bf98 <__ieee754_pow+0x9f0>)
 800be20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be24:	4604      	mov	r4, r0
 800be26:	460d      	mov	r5, r1
 800be28:	f7f4 fb4e 	bl	80004c8 <__aeabi_dmul>
 800be2c:	a35c      	add	r3, pc, #368	; (adr r3, 800bfa0 <__ieee754_pow+0x9f8>)
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	f7f4 f991 	bl	8000158 <__aeabi_dsub>
 800be36:	4622      	mov	r2, r4
 800be38:	462b      	mov	r3, r5
 800be3a:	f7f4 fb45 	bl	80004c8 <__aeabi_dmul>
 800be3e:	a35a      	add	r3, pc, #360	; (adr r3, 800bfa8 <__ieee754_pow+0xa00>)
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	f7f4 f98a 	bl	800015c <__adddf3>
 800be48:	4622      	mov	r2, r4
 800be4a:	462b      	mov	r3, r5
 800be4c:	f7f4 fb3c 	bl	80004c8 <__aeabi_dmul>
 800be50:	a357      	add	r3, pc, #348	; (adr r3, 800bfb0 <__ieee754_pow+0xa08>)
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	f7f4 f97f 	bl	8000158 <__aeabi_dsub>
 800be5a:	4622      	mov	r2, r4
 800be5c:	462b      	mov	r3, r5
 800be5e:	f7f4 fb33 	bl	80004c8 <__aeabi_dmul>
 800be62:	a355      	add	r3, pc, #340	; (adr r3, 800bfb8 <__ieee754_pow+0xa10>)
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	f7f4 f978 	bl	800015c <__adddf3>
 800be6c:	4622      	mov	r2, r4
 800be6e:	462b      	mov	r3, r5
 800be70:	f7f4 fb2a 	bl	80004c8 <__aeabi_dmul>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	4640      	mov	r0, r8
 800be7a:	4649      	mov	r1, r9
 800be7c:	f7f4 f96c 	bl	8000158 <__aeabi_dsub>
 800be80:	4604      	mov	r4, r0
 800be82:	460d      	mov	r5, r1
 800be84:	4602      	mov	r2, r0
 800be86:	460b      	mov	r3, r1
 800be88:	4640      	mov	r0, r8
 800be8a:	4649      	mov	r1, r9
 800be8c:	f7f4 fb1c 	bl	80004c8 <__aeabi_dmul>
 800be90:	2200      	movs	r2, #0
 800be92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be9a:	4620      	mov	r0, r4
 800be9c:	4629      	mov	r1, r5
 800be9e:	f7f4 f95b 	bl	8000158 <__aeabi_dsub>
 800bea2:	4602      	mov	r2, r0
 800bea4:	460b      	mov	r3, r1
 800bea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beaa:	f7f4 fc37 	bl	800071c <__aeabi_ddiv>
 800beae:	4632      	mov	r2, r6
 800beb0:	4604      	mov	r4, r0
 800beb2:	460d      	mov	r5, r1
 800beb4:	463b      	mov	r3, r7
 800beb6:	4640      	mov	r0, r8
 800beb8:	4649      	mov	r1, r9
 800beba:	f7f4 fb05 	bl	80004c8 <__aeabi_dmul>
 800bebe:	4632      	mov	r2, r6
 800bec0:	463b      	mov	r3, r7
 800bec2:	f7f4 f94b 	bl	800015c <__adddf3>
 800bec6:	4602      	mov	r2, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	4620      	mov	r0, r4
 800becc:	4629      	mov	r1, r5
 800bece:	f7f4 f943 	bl	8000158 <__aeabi_dsub>
 800bed2:	4642      	mov	r2, r8
 800bed4:	464b      	mov	r3, r9
 800bed6:	f7f4 f93f 	bl	8000158 <__aeabi_dsub>
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	2000      	movs	r0, #0
 800bee0:	4939      	ldr	r1, [pc, #228]	; (800bfc8 <__ieee754_pow+0xa20>)
 800bee2:	f7f4 f939 	bl	8000158 <__aeabi_dsub>
 800bee6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800beea:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800beee:	da29      	bge.n	800bf44 <__ieee754_pow+0x99c>
 800bef0:	4652      	mov	r2, sl
 800bef2:	f001 f885 	bl	800d000 <scalbn>
 800bef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800befa:	f7ff bbfe 	b.w	800b6fa <__ieee754_pow+0x152>
 800befe:	4b33      	ldr	r3, [pc, #204]	; (800bfcc <__ieee754_pow+0xa24>)
 800bf00:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800bf04:	429f      	cmp	r7, r3
 800bf06:	f77f af13 	ble.w	800bd30 <__ieee754_pow+0x788>
 800bf0a:	4b31      	ldr	r3, [pc, #196]	; (800bfd0 <__ieee754_pow+0xa28>)
 800bf0c:	440b      	add	r3, r1
 800bf0e:	4303      	orrs	r3, r0
 800bf10:	d009      	beq.n	800bf26 <__ieee754_pow+0x97e>
 800bf12:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf16:	2200      	movs	r2, #0
 800bf18:	2300      	movs	r3, #0
 800bf1a:	f7f4 fd47 	bl	80009ac <__aeabi_dcmplt>
 800bf1e:	3800      	subs	r0, #0
 800bf20:	bf18      	it	ne
 800bf22:	2001      	movne	r0, #1
 800bf24:	e453      	b.n	800b7ce <__ieee754_pow+0x226>
 800bf26:	4622      	mov	r2, r4
 800bf28:	462b      	mov	r3, r5
 800bf2a:	f7f4 f915 	bl	8000158 <__aeabi_dsub>
 800bf2e:	4642      	mov	r2, r8
 800bf30:	464b      	mov	r3, r9
 800bf32:	f7f4 fd4f 	bl	80009d4 <__aeabi_dcmpge>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f43f aefa 	beq.w	800bd30 <__ieee754_pow+0x788>
 800bf3c:	e7e9      	b.n	800bf12 <__ieee754_pow+0x96a>
 800bf3e:	f04f 0a00 	mov.w	sl, #0
 800bf42:	e720      	b.n	800bd86 <__ieee754_pow+0x7de>
 800bf44:	4621      	mov	r1, r4
 800bf46:	e7d6      	b.n	800bef6 <__ieee754_pow+0x94e>
 800bf48:	f04f 0b00 	mov.w	fp, #0
 800bf4c:	f8df c078 	ldr.w	ip, [pc, #120]	; 800bfc8 <__ieee754_pow+0xa20>
 800bf50:	f7ff bbba 	b.w	800b6c8 <__ieee754_pow+0x120>
 800bf54:	f04f 0b00 	mov.w	fp, #0
 800bf58:	f04f 0c00 	mov.w	ip, #0
 800bf5c:	f7ff bbb4 	b.w	800b6c8 <__ieee754_pow+0x120>
 800bf60:	4640      	mov	r0, r8
 800bf62:	4649      	mov	r1, r9
 800bf64:	f7ff bb3d 	b.w	800b5e2 <__ieee754_pow+0x3a>
 800bf68:	9200      	str	r2, [sp, #0]
 800bf6a:	f7ff bb89 	b.w	800b680 <__ieee754_pow+0xd8>
 800bf6e:	2300      	movs	r3, #0
 800bf70:	f7ff bb73 	b.w	800b65a <__ieee754_pow+0xb2>
 800bf74:	f3af 8000 	nop.w
 800bf78:	652b82fe 	.word	0x652b82fe
 800bf7c:	3c971547 	.word	0x3c971547
 800bf80:	00000000 	.word	0x00000000
 800bf84:	3fe62e43 	.word	0x3fe62e43
 800bf88:	fefa39ef 	.word	0xfefa39ef
 800bf8c:	3fe62e42 	.word	0x3fe62e42
 800bf90:	0ca86c39 	.word	0x0ca86c39
 800bf94:	be205c61 	.word	0xbe205c61
 800bf98:	72bea4d0 	.word	0x72bea4d0
 800bf9c:	3e663769 	.word	0x3e663769
 800bfa0:	c5d26bf1 	.word	0xc5d26bf1
 800bfa4:	3ebbbd41 	.word	0x3ebbbd41
 800bfa8:	af25de2c 	.word	0xaf25de2c
 800bfac:	3f11566a 	.word	0x3f11566a
 800bfb0:	16bebd93 	.word	0x16bebd93
 800bfb4:	3f66c16c 	.word	0x3f66c16c
 800bfb8:	5555553e 	.word	0x5555553e
 800bfbc:	3fc55555 	.word	0x3fc55555
 800bfc0:	3fe00000 	.word	0x3fe00000
 800bfc4:	000fffff 	.word	0x000fffff
 800bfc8:	3ff00000 	.word	0x3ff00000
 800bfcc:	4090cbff 	.word	0x4090cbff
 800bfd0:	3f6f3400 	.word	0x3f6f3400
 800bfd4:	00000000 	.word	0x00000000

0800bfd8 <__ieee754_rem_pio2>:
 800bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfdc:	4614      	mov	r4, r2
 800bfde:	4ac4      	ldr	r2, [pc, #784]	; (800c2f0 <__ieee754_rem_pio2+0x318>)
 800bfe0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800bfe4:	b08d      	sub	sp, #52	; 0x34
 800bfe6:	4592      	cmp	sl, r2
 800bfe8:	9104      	str	r1, [sp, #16]
 800bfea:	dc07      	bgt.n	800bffc <__ieee754_rem_pio2+0x24>
 800bfec:	2200      	movs	r2, #0
 800bfee:	2300      	movs	r3, #0
 800bff0:	e9c4 0100 	strd	r0, r1, [r4]
 800bff4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bff8:	2500      	movs	r5, #0
 800bffa:	e024      	b.n	800c046 <__ieee754_rem_pio2+0x6e>
 800bffc:	4abd      	ldr	r2, [pc, #756]	; (800c2f4 <__ieee754_rem_pio2+0x31c>)
 800bffe:	4592      	cmp	sl, r2
 800c000:	dc72      	bgt.n	800c0e8 <__ieee754_rem_pio2+0x110>
 800c002:	9b04      	ldr	r3, [sp, #16]
 800c004:	4dbc      	ldr	r5, [pc, #752]	; (800c2f8 <__ieee754_rem_pio2+0x320>)
 800c006:	2b00      	cmp	r3, #0
 800c008:	a3ab      	add	r3, pc, #684	; (adr r3, 800c2b8 <__ieee754_rem_pio2+0x2e0>)
 800c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00e:	dd36      	ble.n	800c07e <__ieee754_rem_pio2+0xa6>
 800c010:	f7f4 f8a2 	bl	8000158 <__aeabi_dsub>
 800c014:	45aa      	cmp	sl, r5
 800c016:	4606      	mov	r6, r0
 800c018:	460f      	mov	r7, r1
 800c01a:	d018      	beq.n	800c04e <__ieee754_rem_pio2+0x76>
 800c01c:	a3a8      	add	r3, pc, #672	; (adr r3, 800c2c0 <__ieee754_rem_pio2+0x2e8>)
 800c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c022:	f7f4 f899 	bl	8000158 <__aeabi_dsub>
 800c026:	4602      	mov	r2, r0
 800c028:	460b      	mov	r3, r1
 800c02a:	4630      	mov	r0, r6
 800c02c:	e9c4 2300 	strd	r2, r3, [r4]
 800c030:	4639      	mov	r1, r7
 800c032:	f7f4 f891 	bl	8000158 <__aeabi_dsub>
 800c036:	a3a2      	add	r3, pc, #648	; (adr r3, 800c2c0 <__ieee754_rem_pio2+0x2e8>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	f7f4 f88c 	bl	8000158 <__aeabi_dsub>
 800c040:	2501      	movs	r5, #1
 800c042:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c046:	4628      	mov	r0, r5
 800c048:	b00d      	add	sp, #52	; 0x34
 800c04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04e:	a39e      	add	r3, pc, #632	; (adr r3, 800c2c8 <__ieee754_rem_pio2+0x2f0>)
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	f7f4 f880 	bl	8000158 <__aeabi_dsub>
 800c058:	a39d      	add	r3, pc, #628	; (adr r3, 800c2d0 <__ieee754_rem_pio2+0x2f8>)
 800c05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05e:	4606      	mov	r6, r0
 800c060:	460f      	mov	r7, r1
 800c062:	f7f4 f879 	bl	8000158 <__aeabi_dsub>
 800c066:	4602      	mov	r2, r0
 800c068:	460b      	mov	r3, r1
 800c06a:	4630      	mov	r0, r6
 800c06c:	e9c4 2300 	strd	r2, r3, [r4]
 800c070:	4639      	mov	r1, r7
 800c072:	f7f4 f871 	bl	8000158 <__aeabi_dsub>
 800c076:	a396      	add	r3, pc, #600	; (adr r3, 800c2d0 <__ieee754_rem_pio2+0x2f8>)
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	e7de      	b.n	800c03c <__ieee754_rem_pio2+0x64>
 800c07e:	f7f4 f86d 	bl	800015c <__adddf3>
 800c082:	45aa      	cmp	sl, r5
 800c084:	4606      	mov	r6, r0
 800c086:	460f      	mov	r7, r1
 800c088:	d016      	beq.n	800c0b8 <__ieee754_rem_pio2+0xe0>
 800c08a:	a38d      	add	r3, pc, #564	; (adr r3, 800c2c0 <__ieee754_rem_pio2+0x2e8>)
 800c08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c090:	f7f4 f864 	bl	800015c <__adddf3>
 800c094:	4602      	mov	r2, r0
 800c096:	460b      	mov	r3, r1
 800c098:	4630      	mov	r0, r6
 800c09a:	e9c4 2300 	strd	r2, r3, [r4]
 800c09e:	4639      	mov	r1, r7
 800c0a0:	f7f4 f85a 	bl	8000158 <__aeabi_dsub>
 800c0a4:	a386      	add	r3, pc, #536	; (adr r3, 800c2c0 <__ieee754_rem_pio2+0x2e8>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	f7f4 f857 	bl	800015c <__adddf3>
 800c0ae:	f04f 35ff 	mov.w	r5, #4294967295
 800c0b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c0b6:	e7c6      	b.n	800c046 <__ieee754_rem_pio2+0x6e>
 800c0b8:	a383      	add	r3, pc, #524	; (adr r3, 800c2c8 <__ieee754_rem_pio2+0x2f0>)
 800c0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0be:	f7f4 f84d 	bl	800015c <__adddf3>
 800c0c2:	a383      	add	r3, pc, #524	; (adr r3, 800c2d0 <__ieee754_rem_pio2+0x2f8>)
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	4606      	mov	r6, r0
 800c0ca:	460f      	mov	r7, r1
 800c0cc:	f7f4 f846 	bl	800015c <__adddf3>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	e9c4 2300 	strd	r2, r3, [r4]
 800c0da:	4639      	mov	r1, r7
 800c0dc:	f7f4 f83c 	bl	8000158 <__aeabi_dsub>
 800c0e0:	a37b      	add	r3, pc, #492	; (adr r3, 800c2d0 <__ieee754_rem_pio2+0x2f8>)
 800c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e6:	e7e0      	b.n	800c0aa <__ieee754_rem_pio2+0xd2>
 800c0e8:	4a84      	ldr	r2, [pc, #528]	; (800c2fc <__ieee754_rem_pio2+0x324>)
 800c0ea:	4592      	cmp	sl, r2
 800c0ec:	f300 80d5 	bgt.w	800c29a <__ieee754_rem_pio2+0x2c2>
 800c0f0:	f000 fefc 	bl	800ceec <fabs>
 800c0f4:	a378      	add	r3, pc, #480	; (adr r3, 800c2d8 <__ieee754_rem_pio2+0x300>)
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	460f      	mov	r7, r1
 800c0fe:	f7f4 f9e3 	bl	80004c8 <__aeabi_dmul>
 800c102:	2200      	movs	r2, #0
 800c104:	4b7e      	ldr	r3, [pc, #504]	; (800c300 <__ieee754_rem_pio2+0x328>)
 800c106:	f7f4 f829 	bl	800015c <__adddf3>
 800c10a:	f7f4 fc8d 	bl	8000a28 <__aeabi_d2iz>
 800c10e:	4605      	mov	r5, r0
 800c110:	f7f4 f970 	bl	80003f4 <__aeabi_i2d>
 800c114:	4602      	mov	r2, r0
 800c116:	460b      	mov	r3, r1
 800c118:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c11c:	a366      	add	r3, pc, #408	; (adr r3, 800c2b8 <__ieee754_rem_pio2+0x2e0>)
 800c11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c122:	f7f4 f9d1 	bl	80004c8 <__aeabi_dmul>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	4630      	mov	r0, r6
 800c12c:	4639      	mov	r1, r7
 800c12e:	f7f4 f813 	bl	8000158 <__aeabi_dsub>
 800c132:	a363      	add	r3, pc, #396	; (adr r3, 800c2c0 <__ieee754_rem_pio2+0x2e8>)
 800c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c138:	4680      	mov	r8, r0
 800c13a:	4689      	mov	r9, r1
 800c13c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c140:	f7f4 f9c2 	bl	80004c8 <__aeabi_dmul>
 800c144:	2d1f      	cmp	r5, #31
 800c146:	4606      	mov	r6, r0
 800c148:	460f      	mov	r7, r1
 800c14a:	dc0e      	bgt.n	800c16a <__ieee754_rem_pio2+0x192>
 800c14c:	4b6d      	ldr	r3, [pc, #436]	; (800c304 <__ieee754_rem_pio2+0x32c>)
 800c14e:	1e6a      	subs	r2, r5, #1
 800c150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c154:	4553      	cmp	r3, sl
 800c156:	d008      	beq.n	800c16a <__ieee754_rem_pio2+0x192>
 800c158:	4632      	mov	r2, r6
 800c15a:	463b      	mov	r3, r7
 800c15c:	4640      	mov	r0, r8
 800c15e:	4649      	mov	r1, r9
 800c160:	f7f3 fffa 	bl	8000158 <__aeabi_dsub>
 800c164:	e9c4 0100 	strd	r0, r1, [r4]
 800c168:	e013      	b.n	800c192 <__ieee754_rem_pio2+0x1ba>
 800c16a:	463b      	mov	r3, r7
 800c16c:	4632      	mov	r2, r6
 800c16e:	4640      	mov	r0, r8
 800c170:	4649      	mov	r1, r9
 800c172:	f7f3 fff1 	bl	8000158 <__aeabi_dsub>
 800c176:	ea4f 532a 	mov.w	r3, sl, asr #20
 800c17a:	9305      	str	r3, [sp, #20]
 800c17c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c180:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800c184:	f1ba 0f10 	cmp.w	sl, #16
 800c188:	dc1f      	bgt.n	800c1ca <__ieee754_rem_pio2+0x1f2>
 800c18a:	4602      	mov	r2, r0
 800c18c:	460b      	mov	r3, r1
 800c18e:	e9c4 2300 	strd	r2, r3, [r4]
 800c192:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c196:	4640      	mov	r0, r8
 800c198:	4653      	mov	r3, sl
 800c19a:	4649      	mov	r1, r9
 800c19c:	f7f3 ffdc 	bl	8000158 <__aeabi_dsub>
 800c1a0:	4632      	mov	r2, r6
 800c1a2:	463b      	mov	r3, r7
 800c1a4:	f7f3 ffd8 	bl	8000158 <__aeabi_dsub>
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c1ae:	9904      	ldr	r1, [sp, #16]
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	2900      	cmp	r1, #0
 800c1b4:	f6bf af47 	bge.w	800c046 <__ieee754_rem_pio2+0x6e>
 800c1b8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800c1bc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c1c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c1c4:	60e3      	str	r3, [r4, #12]
 800c1c6:	426d      	negs	r5, r5
 800c1c8:	e73d      	b.n	800c046 <__ieee754_rem_pio2+0x6e>
 800c1ca:	a33f      	add	r3, pc, #252	; (adr r3, 800c2c8 <__ieee754_rem_pio2+0x2f0>)
 800c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1d4:	f7f4 f978 	bl	80004c8 <__aeabi_dmul>
 800c1d8:	4606      	mov	r6, r0
 800c1da:	460f      	mov	r7, r1
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	f7f3 ffb8 	bl	8000158 <__aeabi_dsub>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	4682      	mov	sl, r0
 800c1ee:	468b      	mov	fp, r1
 800c1f0:	4640      	mov	r0, r8
 800c1f2:	4649      	mov	r1, r9
 800c1f4:	f7f3 ffb0 	bl	8000158 <__aeabi_dsub>
 800c1f8:	4632      	mov	r2, r6
 800c1fa:	463b      	mov	r3, r7
 800c1fc:	f7f3 ffac 	bl	8000158 <__aeabi_dsub>
 800c200:	a333      	add	r3, pc, #204	; (adr r3, 800c2d0 <__ieee754_rem_pio2+0x2f8>)
 800c202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c206:	4606      	mov	r6, r0
 800c208:	460f      	mov	r7, r1
 800c20a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c20e:	f7f4 f95b 	bl	80004c8 <__aeabi_dmul>
 800c212:	4632      	mov	r2, r6
 800c214:	463b      	mov	r3, r7
 800c216:	f7f3 ff9f 	bl	8000158 <__aeabi_dsub>
 800c21a:	4602      	mov	r2, r0
 800c21c:	460b      	mov	r3, r1
 800c21e:	4606      	mov	r6, r0
 800c220:	460f      	mov	r7, r1
 800c222:	4650      	mov	r0, sl
 800c224:	4659      	mov	r1, fp
 800c226:	f7f3 ff97 	bl	8000158 <__aeabi_dsub>
 800c22a:	9a05      	ldr	r2, [sp, #20]
 800c22c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	2b31      	cmp	r3, #49	; 0x31
 800c234:	dc06      	bgt.n	800c244 <__ieee754_rem_pio2+0x26c>
 800c236:	4602      	mov	r2, r0
 800c238:	460b      	mov	r3, r1
 800c23a:	46d0      	mov	r8, sl
 800c23c:	46d9      	mov	r9, fp
 800c23e:	e9c4 2300 	strd	r2, r3, [r4]
 800c242:	e7a6      	b.n	800c192 <__ieee754_rem_pio2+0x1ba>
 800c244:	a326      	add	r3, pc, #152	; (adr r3, 800c2e0 <__ieee754_rem_pio2+0x308>)
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c24e:	f7f4 f93b 	bl	80004c8 <__aeabi_dmul>
 800c252:	4606      	mov	r6, r0
 800c254:	460f      	mov	r7, r1
 800c256:	4602      	mov	r2, r0
 800c258:	460b      	mov	r3, r1
 800c25a:	4650      	mov	r0, sl
 800c25c:	4659      	mov	r1, fp
 800c25e:	f7f3 ff7b 	bl	8000158 <__aeabi_dsub>
 800c262:	4602      	mov	r2, r0
 800c264:	460b      	mov	r3, r1
 800c266:	4680      	mov	r8, r0
 800c268:	4689      	mov	r9, r1
 800c26a:	4650      	mov	r0, sl
 800c26c:	4659      	mov	r1, fp
 800c26e:	f7f3 ff73 	bl	8000158 <__aeabi_dsub>
 800c272:	4632      	mov	r2, r6
 800c274:	463b      	mov	r3, r7
 800c276:	f7f3 ff6f 	bl	8000158 <__aeabi_dsub>
 800c27a:	a31b      	add	r3, pc, #108	; (adr r3, 800c2e8 <__ieee754_rem_pio2+0x310>)
 800c27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c280:	4606      	mov	r6, r0
 800c282:	460f      	mov	r7, r1
 800c284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c288:	f7f4 f91e 	bl	80004c8 <__aeabi_dmul>
 800c28c:	4632      	mov	r2, r6
 800c28e:	463b      	mov	r3, r7
 800c290:	f7f3 ff62 	bl	8000158 <__aeabi_dsub>
 800c294:	4606      	mov	r6, r0
 800c296:	460f      	mov	r7, r1
 800c298:	e75e      	b.n	800c158 <__ieee754_rem_pio2+0x180>
 800c29a:	4a1b      	ldr	r2, [pc, #108]	; (800c308 <__ieee754_rem_pio2+0x330>)
 800c29c:	4592      	cmp	sl, r2
 800c29e:	dd35      	ble.n	800c30c <__ieee754_rem_pio2+0x334>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	f7f3 ff58 	bl	8000158 <__aeabi_dsub>
 800c2a8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c2ac:	e9c4 0100 	strd	r0, r1, [r4]
 800c2b0:	e6a2      	b.n	800bff8 <__ieee754_rem_pio2+0x20>
 800c2b2:	bf00      	nop
 800c2b4:	f3af 8000 	nop.w
 800c2b8:	54400000 	.word	0x54400000
 800c2bc:	3ff921fb 	.word	0x3ff921fb
 800c2c0:	1a626331 	.word	0x1a626331
 800c2c4:	3dd0b461 	.word	0x3dd0b461
 800c2c8:	1a600000 	.word	0x1a600000
 800c2cc:	3dd0b461 	.word	0x3dd0b461
 800c2d0:	2e037073 	.word	0x2e037073
 800c2d4:	3ba3198a 	.word	0x3ba3198a
 800c2d8:	6dc9c883 	.word	0x6dc9c883
 800c2dc:	3fe45f30 	.word	0x3fe45f30
 800c2e0:	2e000000 	.word	0x2e000000
 800c2e4:	3ba3198a 	.word	0x3ba3198a
 800c2e8:	252049c1 	.word	0x252049c1
 800c2ec:	397b839a 	.word	0x397b839a
 800c2f0:	3fe921fb 	.word	0x3fe921fb
 800c2f4:	4002d97b 	.word	0x4002d97b
 800c2f8:	3ff921fb 	.word	0x3ff921fb
 800c2fc:	413921fb 	.word	0x413921fb
 800c300:	3fe00000 	.word	0x3fe00000
 800c304:	0800d330 	.word	0x0800d330
 800c308:	7fefffff 	.word	0x7fefffff
 800c30c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c310:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c314:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c318:	460f      	mov	r7, r1
 800c31a:	4606      	mov	r6, r0
 800c31c:	f7f4 fb84 	bl	8000a28 <__aeabi_d2iz>
 800c320:	f7f4 f868 	bl	80003f4 <__aeabi_i2d>
 800c324:	4602      	mov	r2, r0
 800c326:	460b      	mov	r3, r1
 800c328:	4630      	mov	r0, r6
 800c32a:	4639      	mov	r1, r7
 800c32c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c330:	f7f3 ff12 	bl	8000158 <__aeabi_dsub>
 800c334:	2200      	movs	r2, #0
 800c336:	4b22      	ldr	r3, [pc, #136]	; (800c3c0 <__ieee754_rem_pio2+0x3e8>)
 800c338:	f7f4 f8c6 	bl	80004c8 <__aeabi_dmul>
 800c33c:	460f      	mov	r7, r1
 800c33e:	4606      	mov	r6, r0
 800c340:	f7f4 fb72 	bl	8000a28 <__aeabi_d2iz>
 800c344:	f7f4 f856 	bl	80003f4 <__aeabi_i2d>
 800c348:	4602      	mov	r2, r0
 800c34a:	460b      	mov	r3, r1
 800c34c:	4630      	mov	r0, r6
 800c34e:	4639      	mov	r1, r7
 800c350:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c354:	f7f3 ff00 	bl	8000158 <__aeabi_dsub>
 800c358:	2200      	movs	r2, #0
 800c35a:	4b19      	ldr	r3, [pc, #100]	; (800c3c0 <__ieee754_rem_pio2+0x3e8>)
 800c35c:	f7f4 f8b4 	bl	80004c8 <__aeabi_dmul>
 800c360:	f04f 0803 	mov.w	r8, #3
 800c364:	2600      	movs	r6, #0
 800c366:	2700      	movs	r7, #0
 800c368:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c36c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800c370:	4632      	mov	r2, r6
 800c372:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800c376:	463b      	mov	r3, r7
 800c378:	46c2      	mov	sl, r8
 800c37a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c37e:	f7f4 fb0b 	bl	8000998 <__aeabi_dcmpeq>
 800c382:	2800      	cmp	r0, #0
 800c384:	d1f4      	bne.n	800c370 <__ieee754_rem_pio2+0x398>
 800c386:	4b0f      	ldr	r3, [pc, #60]	; (800c3c4 <__ieee754_rem_pio2+0x3ec>)
 800c388:	462a      	mov	r2, r5
 800c38a:	9301      	str	r3, [sp, #4]
 800c38c:	2302      	movs	r3, #2
 800c38e:	4621      	mov	r1, r4
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	a806      	add	r0, sp, #24
 800c394:	4653      	mov	r3, sl
 800c396:	f000 f985 	bl	800c6a4 <__kernel_rem_pio2>
 800c39a:	9b04      	ldr	r3, [sp, #16]
 800c39c:	4605      	mov	r5, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f6bf ae51 	bge.w	800c046 <__ieee754_rem_pio2+0x6e>
 800c3a4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c3a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3ac:	e9c4 2300 	strd	r2, r3, [r4]
 800c3b0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c3b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3b8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c3bc:	e703      	b.n	800c1c6 <__ieee754_rem_pio2+0x1ee>
 800c3be:	bf00      	nop
 800c3c0:	41700000 	.word	0x41700000
 800c3c4:	0800d3b0 	.word	0x0800d3b0

0800c3c8 <__ieee754_sqrt>:
 800c3c8:	f8df c158 	ldr.w	ip, [pc, #344]	; 800c524 <__ieee754_sqrt+0x15c>
 800c3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d0:	ea3c 0c01 	bics.w	ip, ip, r1
 800c3d4:	4606      	mov	r6, r0
 800c3d6:	460d      	mov	r5, r1
 800c3d8:	460c      	mov	r4, r1
 800c3da:	460a      	mov	r2, r1
 800c3dc:	4607      	mov	r7, r0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	d10f      	bne.n	800c402 <__ieee754_sqrt+0x3a>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	f7f4 f86f 	bl	80004c8 <__aeabi_dmul>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	f7f3 feb3 	bl	800015c <__adddf3>
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	460d      	mov	r5, r1
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c402:	2900      	cmp	r1, #0
 800c404:	dc0e      	bgt.n	800c424 <__ieee754_sqrt+0x5c>
 800c406:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c40a:	ea5c 0707 	orrs.w	r7, ip, r7
 800c40e:	d0f4      	beq.n	800c3fa <__ieee754_sqrt+0x32>
 800c410:	b141      	cbz	r1, 800c424 <__ieee754_sqrt+0x5c>
 800c412:	4602      	mov	r2, r0
 800c414:	460b      	mov	r3, r1
 800c416:	f7f3 fe9f 	bl	8000158 <__aeabi_dsub>
 800c41a:	4602      	mov	r2, r0
 800c41c:	460b      	mov	r3, r1
 800c41e:	f7f4 f97d 	bl	800071c <__aeabi_ddiv>
 800c422:	e7e8      	b.n	800c3f6 <__ieee754_sqrt+0x2e>
 800c424:	1521      	asrs	r1, r4, #20
 800c426:	d075      	beq.n	800c514 <__ieee754_sqrt+0x14c>
 800c428:	07cc      	lsls	r4, r1, #31
 800c42a:	f04f 0400 	mov.w	r4, #0
 800c42e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c432:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800c436:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c43a:	bf5e      	ittt	pl
 800c43c:	0fd9      	lsrpl	r1, r3, #31
 800c43e:	005b      	lslpl	r3, r3, #1
 800c440:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800c444:	0fd9      	lsrs	r1, r3, #31
 800c446:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c44a:	2516      	movs	r5, #22
 800c44c:	4620      	mov	r0, r4
 800c44e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c452:	107f      	asrs	r7, r7, #1
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	1846      	adds	r6, r0, r1
 800c458:	4296      	cmp	r6, r2
 800c45a:	bfde      	ittt	le
 800c45c:	1b92      	suble	r2, r2, r6
 800c45e:	1870      	addle	r0, r6, r1
 800c460:	1864      	addle	r4, r4, r1
 800c462:	0052      	lsls	r2, r2, #1
 800c464:	3d01      	subs	r5, #1
 800c466:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c46a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c46e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c472:	d1f0      	bne.n	800c456 <__ieee754_sqrt+0x8e>
 800c474:	4629      	mov	r1, r5
 800c476:	f04f 0e20 	mov.w	lr, #32
 800c47a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c47e:	4282      	cmp	r2, r0
 800c480:	eb06 0c05 	add.w	ip, r6, r5
 800c484:	dc02      	bgt.n	800c48c <__ieee754_sqrt+0xc4>
 800c486:	d113      	bne.n	800c4b0 <__ieee754_sqrt+0xe8>
 800c488:	459c      	cmp	ip, r3
 800c48a:	d811      	bhi.n	800c4b0 <__ieee754_sqrt+0xe8>
 800c48c:	f1bc 0f00 	cmp.w	ip, #0
 800c490:	eb0c 0506 	add.w	r5, ip, r6
 800c494:	da43      	bge.n	800c51e <__ieee754_sqrt+0x156>
 800c496:	2d00      	cmp	r5, #0
 800c498:	db41      	blt.n	800c51e <__ieee754_sqrt+0x156>
 800c49a:	f100 0801 	add.w	r8, r0, #1
 800c49e:	1a12      	subs	r2, r2, r0
 800c4a0:	4640      	mov	r0, r8
 800c4a2:	459c      	cmp	ip, r3
 800c4a4:	bf88      	it	hi
 800c4a6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c4aa:	eba3 030c 	sub.w	r3, r3, ip
 800c4ae:	4431      	add	r1, r6
 800c4b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c4b4:	f1be 0e01 	subs.w	lr, lr, #1
 800c4b8:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800c4bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c4c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c4c4:	d1db      	bne.n	800c47e <__ieee754_sqrt+0xb6>
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	d006      	beq.n	800c4d8 <__ieee754_sqrt+0x110>
 800c4ca:	1c48      	adds	r0, r1, #1
 800c4cc:	bf0b      	itete	eq
 800c4ce:	4671      	moveq	r1, lr
 800c4d0:	3101      	addne	r1, #1
 800c4d2:	3401      	addeq	r4, #1
 800c4d4:	f021 0101 	bicne.w	r1, r1, #1
 800c4d8:	1063      	asrs	r3, r4, #1
 800c4da:	0849      	lsrs	r1, r1, #1
 800c4dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c4e0:	07e2      	lsls	r2, r4, #31
 800c4e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c4e6:	bf48      	it	mi
 800c4e8:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c4ec:	460e      	mov	r6, r1
 800c4ee:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c4f2:	e782      	b.n	800c3fa <__ieee754_sqrt+0x32>
 800c4f4:	0ada      	lsrs	r2, r3, #11
 800c4f6:	3815      	subs	r0, #21
 800c4f8:	055b      	lsls	r3, r3, #21
 800c4fa:	2a00      	cmp	r2, #0
 800c4fc:	d0fa      	beq.n	800c4f4 <__ieee754_sqrt+0x12c>
 800c4fe:	02d5      	lsls	r5, r2, #11
 800c500:	d50a      	bpl.n	800c518 <__ieee754_sqrt+0x150>
 800c502:	f1c1 0420 	rsb	r4, r1, #32
 800c506:	fa23 f404 	lsr.w	r4, r3, r4
 800c50a:	1e4d      	subs	r5, r1, #1
 800c50c:	408b      	lsls	r3, r1
 800c50e:	4322      	orrs	r2, r4
 800c510:	1b41      	subs	r1, r0, r5
 800c512:	e789      	b.n	800c428 <__ieee754_sqrt+0x60>
 800c514:	4608      	mov	r0, r1
 800c516:	e7f0      	b.n	800c4fa <__ieee754_sqrt+0x132>
 800c518:	0052      	lsls	r2, r2, #1
 800c51a:	3101      	adds	r1, #1
 800c51c:	e7ef      	b.n	800c4fe <__ieee754_sqrt+0x136>
 800c51e:	4680      	mov	r8, r0
 800c520:	e7bd      	b.n	800c49e <__ieee754_sqrt+0xd6>
 800c522:	bf00      	nop
 800c524:	7ff00000 	.word	0x7ff00000

0800c528 <__kernel_cos>:
 800c528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c530:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c534:	4680      	mov	r8, r0
 800c536:	460f      	mov	r7, r1
 800c538:	e9cd 2300 	strd	r2, r3, [sp]
 800c53c:	da04      	bge.n	800c548 <__kernel_cos+0x20>
 800c53e:	f7f4 fa73 	bl	8000a28 <__aeabi_d2iz>
 800c542:	2800      	cmp	r0, #0
 800c544:	f000 8086 	beq.w	800c654 <__kernel_cos+0x12c>
 800c548:	4642      	mov	r2, r8
 800c54a:	463b      	mov	r3, r7
 800c54c:	4640      	mov	r0, r8
 800c54e:	4639      	mov	r1, r7
 800c550:	f7f3 ffba 	bl	80004c8 <__aeabi_dmul>
 800c554:	2200      	movs	r2, #0
 800c556:	4b4e      	ldr	r3, [pc, #312]	; (800c690 <__kernel_cos+0x168>)
 800c558:	4604      	mov	r4, r0
 800c55a:	460d      	mov	r5, r1
 800c55c:	f7f3 ffb4 	bl	80004c8 <__aeabi_dmul>
 800c560:	a33f      	add	r3, pc, #252	; (adr r3, 800c660 <__kernel_cos+0x138>)
 800c562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c566:	4682      	mov	sl, r0
 800c568:	468b      	mov	fp, r1
 800c56a:	4620      	mov	r0, r4
 800c56c:	4629      	mov	r1, r5
 800c56e:	f7f3 ffab 	bl	80004c8 <__aeabi_dmul>
 800c572:	a33d      	add	r3, pc, #244	; (adr r3, 800c668 <__kernel_cos+0x140>)
 800c574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c578:	f7f3 fdf0 	bl	800015c <__adddf3>
 800c57c:	4622      	mov	r2, r4
 800c57e:	462b      	mov	r3, r5
 800c580:	f7f3 ffa2 	bl	80004c8 <__aeabi_dmul>
 800c584:	a33a      	add	r3, pc, #232	; (adr r3, 800c670 <__kernel_cos+0x148>)
 800c586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58a:	f7f3 fde5 	bl	8000158 <__aeabi_dsub>
 800c58e:	4622      	mov	r2, r4
 800c590:	462b      	mov	r3, r5
 800c592:	f7f3 ff99 	bl	80004c8 <__aeabi_dmul>
 800c596:	a338      	add	r3, pc, #224	; (adr r3, 800c678 <__kernel_cos+0x150>)
 800c598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59c:	f7f3 fdde 	bl	800015c <__adddf3>
 800c5a0:	4622      	mov	r2, r4
 800c5a2:	462b      	mov	r3, r5
 800c5a4:	f7f3 ff90 	bl	80004c8 <__aeabi_dmul>
 800c5a8:	a335      	add	r3, pc, #212	; (adr r3, 800c680 <__kernel_cos+0x158>)
 800c5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ae:	f7f3 fdd3 	bl	8000158 <__aeabi_dsub>
 800c5b2:	4622      	mov	r2, r4
 800c5b4:	462b      	mov	r3, r5
 800c5b6:	f7f3 ff87 	bl	80004c8 <__aeabi_dmul>
 800c5ba:	a333      	add	r3, pc, #204	; (adr r3, 800c688 <__kernel_cos+0x160>)
 800c5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c0:	f7f3 fdcc 	bl	800015c <__adddf3>
 800c5c4:	4622      	mov	r2, r4
 800c5c6:	462b      	mov	r3, r5
 800c5c8:	f7f3 ff7e 	bl	80004c8 <__aeabi_dmul>
 800c5cc:	4622      	mov	r2, r4
 800c5ce:	462b      	mov	r3, r5
 800c5d0:	f7f3 ff7a 	bl	80004c8 <__aeabi_dmul>
 800c5d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5d8:	4604      	mov	r4, r0
 800c5da:	460d      	mov	r5, r1
 800c5dc:	4640      	mov	r0, r8
 800c5de:	4639      	mov	r1, r7
 800c5e0:	f7f3 ff72 	bl	80004c8 <__aeabi_dmul>
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	4629      	mov	r1, r5
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f7f3 fdb4 	bl	8000158 <__aeabi_dsub>
 800c5f0:	4b28      	ldr	r3, [pc, #160]	; (800c694 <__kernel_cos+0x16c>)
 800c5f2:	4680      	mov	r8, r0
 800c5f4:	429e      	cmp	r6, r3
 800c5f6:	4689      	mov	r9, r1
 800c5f8:	dc0e      	bgt.n	800c618 <__kernel_cos+0xf0>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4650      	mov	r0, sl
 800c600:	4659      	mov	r1, fp
 800c602:	f7f3 fda9 	bl	8000158 <__aeabi_dsub>
 800c606:	4602      	mov	r2, r0
 800c608:	2000      	movs	r0, #0
 800c60a:	460b      	mov	r3, r1
 800c60c:	4922      	ldr	r1, [pc, #136]	; (800c698 <__kernel_cos+0x170>)
 800c60e:	f7f3 fda3 	bl	8000158 <__aeabi_dsub>
 800c612:	b003      	add	sp, #12
 800c614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c618:	2400      	movs	r4, #0
 800c61a:	4b20      	ldr	r3, [pc, #128]	; (800c69c <__kernel_cos+0x174>)
 800c61c:	4622      	mov	r2, r4
 800c61e:	429e      	cmp	r6, r3
 800c620:	bfcc      	ite	gt
 800c622:	4d1f      	ldrgt	r5, [pc, #124]	; (800c6a0 <__kernel_cos+0x178>)
 800c624:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c628:	462b      	mov	r3, r5
 800c62a:	2000      	movs	r0, #0
 800c62c:	491a      	ldr	r1, [pc, #104]	; (800c698 <__kernel_cos+0x170>)
 800c62e:	f7f3 fd93 	bl	8000158 <__aeabi_dsub>
 800c632:	4622      	mov	r2, r4
 800c634:	4606      	mov	r6, r0
 800c636:	460f      	mov	r7, r1
 800c638:	462b      	mov	r3, r5
 800c63a:	4650      	mov	r0, sl
 800c63c:	4659      	mov	r1, fp
 800c63e:	f7f3 fd8b 	bl	8000158 <__aeabi_dsub>
 800c642:	4642      	mov	r2, r8
 800c644:	464b      	mov	r3, r9
 800c646:	f7f3 fd87 	bl	8000158 <__aeabi_dsub>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4630      	mov	r0, r6
 800c650:	4639      	mov	r1, r7
 800c652:	e7dc      	b.n	800c60e <__kernel_cos+0xe6>
 800c654:	2000      	movs	r0, #0
 800c656:	4910      	ldr	r1, [pc, #64]	; (800c698 <__kernel_cos+0x170>)
 800c658:	e7db      	b.n	800c612 <__kernel_cos+0xea>
 800c65a:	bf00      	nop
 800c65c:	f3af 8000 	nop.w
 800c660:	be8838d4 	.word	0xbe8838d4
 800c664:	bda8fae9 	.word	0xbda8fae9
 800c668:	bdb4b1c4 	.word	0xbdb4b1c4
 800c66c:	3e21ee9e 	.word	0x3e21ee9e
 800c670:	809c52ad 	.word	0x809c52ad
 800c674:	3e927e4f 	.word	0x3e927e4f
 800c678:	19cb1590 	.word	0x19cb1590
 800c67c:	3efa01a0 	.word	0x3efa01a0
 800c680:	16c15177 	.word	0x16c15177
 800c684:	3f56c16c 	.word	0x3f56c16c
 800c688:	5555554c 	.word	0x5555554c
 800c68c:	3fa55555 	.word	0x3fa55555
 800c690:	3fe00000 	.word	0x3fe00000
 800c694:	3fd33332 	.word	0x3fd33332
 800c698:	3ff00000 	.word	0x3ff00000
 800c69c:	3fe90000 	.word	0x3fe90000
 800c6a0:	3fd20000 	.word	0x3fd20000

0800c6a4 <__kernel_rem_pio2>:
 800c6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c6ac:	9308      	str	r3, [sp, #32]
 800c6ae:	9106      	str	r1, [sp, #24]
 800c6b0:	4bb6      	ldr	r3, [pc, #728]	; (800c98c <__kernel_rem_pio2+0x2e8>)
 800c6b2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c6b4:	f112 0f14 	cmn.w	r2, #20
 800c6b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6bc:	bfa8      	it	ge
 800c6be:	1ed4      	subge	r4, r2, #3
 800c6c0:	9302      	str	r3, [sp, #8]
 800c6c2:	9b08      	ldr	r3, [sp, #32]
 800c6c4:	bfb8      	it	lt
 800c6c6:	2400      	movlt	r4, #0
 800c6c8:	f103 33ff 	add.w	r3, r3, #4294967295
 800c6cc:	9307      	str	r3, [sp, #28]
 800c6ce:	bfa4      	itt	ge
 800c6d0:	2318      	movge	r3, #24
 800c6d2:	fb94 f4f3 	sdivge	r4, r4, r3
 800c6d6:	f06f 0317 	mvn.w	r3, #23
 800c6da:	fb04 3303 	mla	r3, r4, r3, r3
 800c6de:	eb03 0b02 	add.w	fp, r3, r2
 800c6e2:	9a07      	ldr	r2, [sp, #28]
 800c6e4:	9b02      	ldr	r3, [sp, #8]
 800c6e6:	1aa7      	subs	r7, r4, r2
 800c6e8:	eb03 0802 	add.w	r8, r3, r2
 800c6ec:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c6ee:	2500      	movs	r5, #0
 800c6f0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	9009      	str	r0, [sp, #36]	; 0x24
 800c6fa:	ae20      	add	r6, sp, #128	; 0x80
 800c6fc:	4545      	cmp	r5, r8
 800c6fe:	dd14      	ble.n	800c72a <__kernel_rem_pio2+0x86>
 800c700:	f04f 0800 	mov.w	r8, #0
 800c704:	9a08      	ldr	r2, [sp, #32]
 800c706:	ab20      	add	r3, sp, #128	; 0x80
 800c708:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c70c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800c710:	9b02      	ldr	r3, [sp, #8]
 800c712:	4598      	cmp	r8, r3
 800c714:	dc35      	bgt.n	800c782 <__kernel_rem_pio2+0xde>
 800c716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c718:	2200      	movs	r2, #0
 800c71a:	f1a3 0908 	sub.w	r9, r3, #8
 800c71e:	2300      	movs	r3, #0
 800c720:	462f      	mov	r7, r5
 800c722:	2600      	movs	r6, #0
 800c724:	e9cd 2300 	strd	r2, r3, [sp]
 800c728:	e01f      	b.n	800c76a <__kernel_rem_pio2+0xc6>
 800c72a:	42ef      	cmn	r7, r5
 800c72c:	d40b      	bmi.n	800c746 <__kernel_rem_pio2+0xa2>
 800c72e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c732:	e9cd 2300 	strd	r2, r3, [sp]
 800c736:	f7f3 fe5d 	bl	80003f4 <__aeabi_i2d>
 800c73a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c73e:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c742:	3501      	adds	r5, #1
 800c744:	e7da      	b.n	800c6fc <__kernel_rem_pio2+0x58>
 800c746:	4610      	mov	r0, r2
 800c748:	4619      	mov	r1, r3
 800c74a:	e7f8      	b.n	800c73e <__kernel_rem_pio2+0x9a>
 800c74c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c750:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c754:	f7f3 feb8 	bl	80004c8 <__aeabi_dmul>
 800c758:	4602      	mov	r2, r0
 800c75a:	460b      	mov	r3, r1
 800c75c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c760:	f7f3 fcfc 	bl	800015c <__adddf3>
 800c764:	e9cd 0100 	strd	r0, r1, [sp]
 800c768:	3601      	adds	r6, #1
 800c76a:	9b07      	ldr	r3, [sp, #28]
 800c76c:	3f08      	subs	r7, #8
 800c76e:	429e      	cmp	r6, r3
 800c770:	ddec      	ble.n	800c74c <__kernel_rem_pio2+0xa8>
 800c772:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c776:	f108 0801 	add.w	r8, r8, #1
 800c77a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800c77e:	3508      	adds	r5, #8
 800c780:	e7c6      	b.n	800c710 <__kernel_rem_pio2+0x6c>
 800c782:	9b02      	ldr	r3, [sp, #8]
 800c784:	aa0c      	add	r2, sp, #48	; 0x30
 800c786:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c78a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c78c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c78e:	9e02      	ldr	r6, [sp, #8]
 800c790:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c794:	930a      	str	r3, [sp, #40]	; 0x28
 800c796:	ab98      	add	r3, sp, #608	; 0x260
 800c798:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c79c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c7a0:	ab70      	add	r3, sp, #448	; 0x1c0
 800c7a2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800c7a6:	46d0      	mov	r8, sl
 800c7a8:	46b1      	mov	r9, r6
 800c7aa:	af0c      	add	r7, sp, #48	; 0x30
 800c7ac:	9700      	str	r7, [sp, #0]
 800c7ae:	f1b9 0f00 	cmp.w	r9, #0
 800c7b2:	f1a8 0808 	sub.w	r8, r8, #8
 800c7b6:	dc71      	bgt.n	800c89c <__kernel_rem_pio2+0x1f8>
 800c7b8:	465a      	mov	r2, fp
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	4629      	mov	r1, r5
 800c7be:	f000 fc1f 	bl	800d000 <scalbn>
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	460d      	mov	r5, r1
 800c7cc:	f7f3 fe7c 	bl	80004c8 <__aeabi_dmul>
 800c7d0:	f000 fb96 	bl	800cf00 <floor>
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	4b6e      	ldr	r3, [pc, #440]	; (800c990 <__kernel_rem_pio2+0x2ec>)
 800c7d8:	f7f3 fe76 	bl	80004c8 <__aeabi_dmul>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	460b      	mov	r3, r1
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	f7f3 fcb8 	bl	8000158 <__aeabi_dsub>
 800c7e8:	460d      	mov	r5, r1
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	f7f4 f91c 	bl	8000a28 <__aeabi_d2iz>
 800c7f0:	9004      	str	r0, [sp, #16]
 800c7f2:	f7f3 fdff 	bl	80003f4 <__aeabi_i2d>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	f7f3 fcab 	bl	8000158 <__aeabi_dsub>
 800c802:	f1bb 0f00 	cmp.w	fp, #0
 800c806:	4680      	mov	r8, r0
 800c808:	4689      	mov	r9, r1
 800c80a:	dd70      	ble.n	800c8ee <__kernel_rem_pio2+0x24a>
 800c80c:	1e72      	subs	r2, r6, #1
 800c80e:	ab0c      	add	r3, sp, #48	; 0x30
 800c810:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c814:	9c04      	ldr	r4, [sp, #16]
 800c816:	f1cb 0118 	rsb	r1, fp, #24
 800c81a:	fa40 f301 	asr.w	r3, r0, r1
 800c81e:	441c      	add	r4, r3
 800c820:	408b      	lsls	r3, r1
 800c822:	1ac0      	subs	r0, r0, r3
 800c824:	ab0c      	add	r3, sp, #48	; 0x30
 800c826:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c82a:	f1cb 0317 	rsb	r3, fp, #23
 800c82e:	9404      	str	r4, [sp, #16]
 800c830:	fa40 f303 	asr.w	r3, r0, r3
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	9b00      	ldr	r3, [sp, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	dd66      	ble.n	800c90a <__kernel_rem_pio2+0x266>
 800c83c:	2200      	movs	r2, #0
 800c83e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c842:	4614      	mov	r4, r2
 800c844:	9b04      	ldr	r3, [sp, #16]
 800c846:	3301      	adds	r3, #1
 800c848:	9304      	str	r3, [sp, #16]
 800c84a:	4296      	cmp	r6, r2
 800c84c:	f300 80ac 	bgt.w	800c9a8 <__kernel_rem_pio2+0x304>
 800c850:	f1bb 0f00 	cmp.w	fp, #0
 800c854:	dd07      	ble.n	800c866 <__kernel_rem_pio2+0x1c2>
 800c856:	f1bb 0f01 	cmp.w	fp, #1
 800c85a:	f000 80b4 	beq.w	800c9c6 <__kernel_rem_pio2+0x322>
 800c85e:	f1bb 0f02 	cmp.w	fp, #2
 800c862:	f000 80ba 	beq.w	800c9da <__kernel_rem_pio2+0x336>
 800c866:	9b00      	ldr	r3, [sp, #0]
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d14e      	bne.n	800c90a <__kernel_rem_pio2+0x266>
 800c86c:	4642      	mov	r2, r8
 800c86e:	464b      	mov	r3, r9
 800c870:	2000      	movs	r0, #0
 800c872:	4948      	ldr	r1, [pc, #288]	; (800c994 <__kernel_rem_pio2+0x2f0>)
 800c874:	f7f3 fc70 	bl	8000158 <__aeabi_dsub>
 800c878:	4680      	mov	r8, r0
 800c87a:	4689      	mov	r9, r1
 800c87c:	2c00      	cmp	r4, #0
 800c87e:	d044      	beq.n	800c90a <__kernel_rem_pio2+0x266>
 800c880:	465a      	mov	r2, fp
 800c882:	2000      	movs	r0, #0
 800c884:	4943      	ldr	r1, [pc, #268]	; (800c994 <__kernel_rem_pio2+0x2f0>)
 800c886:	f000 fbbb 	bl	800d000 <scalbn>
 800c88a:	4602      	mov	r2, r0
 800c88c:	460b      	mov	r3, r1
 800c88e:	4640      	mov	r0, r8
 800c890:	4649      	mov	r1, r9
 800c892:	f7f3 fc61 	bl	8000158 <__aeabi_dsub>
 800c896:	4680      	mov	r8, r0
 800c898:	4689      	mov	r9, r1
 800c89a:	e036      	b.n	800c90a <__kernel_rem_pio2+0x266>
 800c89c:	2200      	movs	r2, #0
 800c89e:	4b3e      	ldr	r3, [pc, #248]	; (800c998 <__kernel_rem_pio2+0x2f4>)
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	f7f3 fe10 	bl	80004c8 <__aeabi_dmul>
 800c8a8:	f7f4 f8be 	bl	8000a28 <__aeabi_d2iz>
 800c8ac:	f7f3 fda2 	bl	80003f4 <__aeabi_i2d>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	4b38      	ldr	r3, [pc, #224]	; (800c99c <__kernel_rem_pio2+0x2f8>)
 800c8bc:	f7f3 fe04 	bl	80004c8 <__aeabi_dmul>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	f7f3 fc46 	bl	8000158 <__aeabi_dsub>
 800c8cc:	f7f4 f8ac 	bl	8000a28 <__aeabi_d2iz>
 800c8d0:	9b00      	ldr	r3, [sp, #0]
 800c8d2:	f109 39ff 	add.w	r9, r9, #4294967295
 800c8d6:	f843 0b04 	str.w	r0, [r3], #4
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8e0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c8e4:	f7f3 fc3a 	bl	800015c <__adddf3>
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	460d      	mov	r5, r1
 800c8ec:	e75f      	b.n	800c7ae <__kernel_rem_pio2+0x10a>
 800c8ee:	d105      	bne.n	800c8fc <__kernel_rem_pio2+0x258>
 800c8f0:	1e73      	subs	r3, r6, #1
 800c8f2:	aa0c      	add	r2, sp, #48	; 0x30
 800c8f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c8f8:	15c3      	asrs	r3, r0, #23
 800c8fa:	e79b      	b.n	800c834 <__kernel_rem_pio2+0x190>
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	4b28      	ldr	r3, [pc, #160]	; (800c9a0 <__kernel_rem_pio2+0x2fc>)
 800c900:	f7f4 f868 	bl	80009d4 <__aeabi_dcmpge>
 800c904:	2800      	cmp	r0, #0
 800c906:	d13e      	bne.n	800c986 <__kernel_rem_pio2+0x2e2>
 800c908:	9000      	str	r0, [sp, #0]
 800c90a:	2200      	movs	r2, #0
 800c90c:	2300      	movs	r3, #0
 800c90e:	4640      	mov	r0, r8
 800c910:	4649      	mov	r1, r9
 800c912:	f7f4 f841 	bl	8000998 <__aeabi_dcmpeq>
 800c916:	2800      	cmp	r0, #0
 800c918:	f000 80b1 	beq.w	800ca7e <__kernel_rem_pio2+0x3da>
 800c91c:	1e74      	subs	r4, r6, #1
 800c91e:	4623      	mov	r3, r4
 800c920:	2200      	movs	r2, #0
 800c922:	9902      	ldr	r1, [sp, #8]
 800c924:	428b      	cmp	r3, r1
 800c926:	da5f      	bge.n	800c9e8 <__kernel_rem_pio2+0x344>
 800c928:	2a00      	cmp	r2, #0
 800c92a:	d074      	beq.n	800ca16 <__kernel_rem_pio2+0x372>
 800c92c:	ab0c      	add	r3, sp, #48	; 0x30
 800c92e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c932:	f1ab 0b18 	sub.w	fp, fp, #24
 800c936:	2b00      	cmp	r3, #0
 800c938:	f000 809f 	beq.w	800ca7a <__kernel_rem_pio2+0x3d6>
 800c93c:	465a      	mov	r2, fp
 800c93e:	2000      	movs	r0, #0
 800c940:	4914      	ldr	r1, [pc, #80]	; (800c994 <__kernel_rem_pio2+0x2f0>)
 800c942:	f000 fb5d 	bl	800d000 <scalbn>
 800c946:	46a2      	mov	sl, r4
 800c948:	4606      	mov	r6, r0
 800c94a:	460f      	mov	r7, r1
 800c94c:	f04f 0800 	mov.w	r8, #0
 800c950:	ab70      	add	r3, sp, #448	; 0x1c0
 800c952:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c998 <__kernel_rem_pio2+0x2f4>
 800c956:	00e5      	lsls	r5, r4, #3
 800c958:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c95c:	f1ba 0f00 	cmp.w	sl, #0
 800c960:	f280 80c3 	bge.w	800caea <__kernel_rem_pio2+0x446>
 800c964:	4626      	mov	r6, r4
 800c966:	2e00      	cmp	r6, #0
 800c968:	f2c0 80f5 	blt.w	800cb56 <__kernel_rem_pio2+0x4b2>
 800c96c:	4b0d      	ldr	r3, [pc, #52]	; (800c9a4 <__kernel_rem_pio2+0x300>)
 800c96e:	f04f 0a00 	mov.w	sl, #0
 800c972:	9307      	str	r3, [sp, #28]
 800c974:	ab70      	add	r3, sp, #448	; 0x1c0
 800c976:	f04f 0b00 	mov.w	fp, #0
 800c97a:	f04f 0800 	mov.w	r8, #0
 800c97e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c982:	1ba7      	subs	r7, r4, r6
 800c984:	e0db      	b.n	800cb3e <__kernel_rem_pio2+0x49a>
 800c986:	2302      	movs	r3, #2
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	e757      	b.n	800c83c <__kernel_rem_pio2+0x198>
 800c98c:	0800d4f8 	.word	0x0800d4f8
 800c990:	40200000 	.word	0x40200000
 800c994:	3ff00000 	.word	0x3ff00000
 800c998:	3e700000 	.word	0x3e700000
 800c99c:	41700000 	.word	0x41700000
 800c9a0:	3fe00000 	.word	0x3fe00000
 800c9a4:	0800d4b8 	.word	0x0800d4b8
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	b944      	cbnz	r4, 800c9be <__kernel_rem_pio2+0x31a>
 800c9ac:	b11b      	cbz	r3, 800c9b6 <__kernel_rem_pio2+0x312>
 800c9ae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c9b2:	603b      	str	r3, [r7, #0]
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	461c      	mov	r4, r3
 800c9b8:	3201      	adds	r2, #1
 800c9ba:	3704      	adds	r7, #4
 800c9bc:	e745      	b.n	800c84a <__kernel_rem_pio2+0x1a6>
 800c9be:	1acb      	subs	r3, r1, r3
 800c9c0:	603b      	str	r3, [r7, #0]
 800c9c2:	4623      	mov	r3, r4
 800c9c4:	e7f7      	b.n	800c9b6 <__kernel_rem_pio2+0x312>
 800c9c6:	1e72      	subs	r2, r6, #1
 800c9c8:	ab0c      	add	r3, sp, #48	; 0x30
 800c9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c9d2:	a90c      	add	r1, sp, #48	; 0x30
 800c9d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c9d8:	e745      	b.n	800c866 <__kernel_rem_pio2+0x1c2>
 800c9da:	1e72      	subs	r2, r6, #1
 800c9dc:	ab0c      	add	r3, sp, #48	; 0x30
 800c9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9e2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c9e6:	e7f4      	b.n	800c9d2 <__kernel_rem_pio2+0x32e>
 800c9e8:	a90c      	add	r1, sp, #48	; 0x30
 800c9ea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	430a      	orrs	r2, r1
 800c9f2:	e796      	b.n	800c922 <__kernel_rem_pio2+0x27e>
 800c9f4:	3401      	adds	r4, #1
 800c9f6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c9fa:	2a00      	cmp	r2, #0
 800c9fc:	d0fa      	beq.n	800c9f4 <__kernel_rem_pio2+0x350>
 800c9fe:	9b08      	ldr	r3, [sp, #32]
 800ca00:	f106 0801 	add.w	r8, r6, #1
 800ca04:	18f5      	adds	r5, r6, r3
 800ca06:	ab20      	add	r3, sp, #128	; 0x80
 800ca08:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ca0c:	4434      	add	r4, r6
 800ca0e:	4544      	cmp	r4, r8
 800ca10:	da04      	bge.n	800ca1c <__kernel_rem_pio2+0x378>
 800ca12:	4626      	mov	r6, r4
 800ca14:	e6bf      	b.n	800c796 <__kernel_rem_pio2+0xf2>
 800ca16:	2401      	movs	r4, #1
 800ca18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca1a:	e7ec      	b.n	800c9f6 <__kernel_rem_pio2+0x352>
 800ca1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca1e:	f04f 0900 	mov.w	r9, #0
 800ca22:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ca26:	f7f3 fce5 	bl	80003f4 <__aeabi_i2d>
 800ca2a:	2600      	movs	r6, #0
 800ca2c:	2700      	movs	r7, #0
 800ca2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca30:	e9c5 0100 	strd	r0, r1, [r5]
 800ca34:	3b08      	subs	r3, #8
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	9504      	str	r5, [sp, #16]
 800ca3a:	9b07      	ldr	r3, [sp, #28]
 800ca3c:	4599      	cmp	r9, r3
 800ca3e:	dd05      	ble.n	800ca4c <__kernel_rem_pio2+0x3a8>
 800ca40:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800ca44:	f108 0801 	add.w	r8, r8, #1
 800ca48:	3508      	adds	r5, #8
 800ca4a:	e7e0      	b.n	800ca0e <__kernel_rem_pio2+0x36a>
 800ca4c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800ca50:	9900      	ldr	r1, [sp, #0]
 800ca52:	f109 0901 	add.w	r9, r9, #1
 800ca56:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800ca5a:	9100      	str	r1, [sp, #0]
 800ca5c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800ca60:	f8cd c010 	str.w	ip, [sp, #16]
 800ca64:	f7f3 fd30 	bl	80004c8 <__aeabi_dmul>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	4639      	mov	r1, r7
 800ca70:	f7f3 fb74 	bl	800015c <__adddf3>
 800ca74:	4606      	mov	r6, r0
 800ca76:	460f      	mov	r7, r1
 800ca78:	e7df      	b.n	800ca3a <__kernel_rem_pio2+0x396>
 800ca7a:	3c01      	subs	r4, #1
 800ca7c:	e756      	b.n	800c92c <__kernel_rem_pio2+0x288>
 800ca7e:	f1cb 0200 	rsb	r2, fp, #0
 800ca82:	4640      	mov	r0, r8
 800ca84:	4649      	mov	r1, r9
 800ca86:	f000 fabb 	bl	800d000 <scalbn>
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	4ba4      	ldr	r3, [pc, #656]	; (800cd20 <__kernel_rem_pio2+0x67c>)
 800ca8e:	4604      	mov	r4, r0
 800ca90:	460d      	mov	r5, r1
 800ca92:	f7f3 ff9f 	bl	80009d4 <__aeabi_dcmpge>
 800ca96:	b1f8      	cbz	r0, 800cad8 <__kernel_rem_pio2+0x434>
 800ca98:	2200      	movs	r2, #0
 800ca9a:	4ba2      	ldr	r3, [pc, #648]	; (800cd24 <__kernel_rem_pio2+0x680>)
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	4629      	mov	r1, r5
 800caa0:	f7f3 fd12 	bl	80004c8 <__aeabi_dmul>
 800caa4:	f7f3 ffc0 	bl	8000a28 <__aeabi_d2iz>
 800caa8:	4607      	mov	r7, r0
 800caaa:	f7f3 fca3 	bl	80003f4 <__aeabi_i2d>
 800caae:	2200      	movs	r2, #0
 800cab0:	4b9b      	ldr	r3, [pc, #620]	; (800cd20 <__kernel_rem_pio2+0x67c>)
 800cab2:	f7f3 fd09 	bl	80004c8 <__aeabi_dmul>
 800cab6:	460b      	mov	r3, r1
 800cab8:	4602      	mov	r2, r0
 800caba:	4629      	mov	r1, r5
 800cabc:	4620      	mov	r0, r4
 800cabe:	f7f3 fb4b 	bl	8000158 <__aeabi_dsub>
 800cac2:	f7f3 ffb1 	bl	8000a28 <__aeabi_d2iz>
 800cac6:	1c74      	adds	r4, r6, #1
 800cac8:	ab0c      	add	r3, sp, #48	; 0x30
 800caca:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800cace:	f10b 0b18 	add.w	fp, fp, #24
 800cad2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800cad6:	e731      	b.n	800c93c <__kernel_rem_pio2+0x298>
 800cad8:	4620      	mov	r0, r4
 800cada:	4629      	mov	r1, r5
 800cadc:	f7f3 ffa4 	bl	8000a28 <__aeabi_d2iz>
 800cae0:	ab0c      	add	r3, sp, #48	; 0x30
 800cae2:	4634      	mov	r4, r6
 800cae4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800cae8:	e728      	b.n	800c93c <__kernel_rem_pio2+0x298>
 800caea:	ab0c      	add	r3, sp, #48	; 0x30
 800caec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800caf0:	f7f3 fc80 	bl	80003f4 <__aeabi_i2d>
 800caf4:	4632      	mov	r2, r6
 800caf6:	463b      	mov	r3, r7
 800caf8:	f7f3 fce6 	bl	80004c8 <__aeabi_dmul>
 800cafc:	4642      	mov	r2, r8
 800cafe:	e86b 0102 	strd	r0, r1, [fp], #-8
 800cb02:	464b      	mov	r3, r9
 800cb04:	4630      	mov	r0, r6
 800cb06:	4639      	mov	r1, r7
 800cb08:	f7f3 fcde 	bl	80004c8 <__aeabi_dmul>
 800cb0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb10:	4606      	mov	r6, r0
 800cb12:	460f      	mov	r7, r1
 800cb14:	e722      	b.n	800c95c <__kernel_rem_pio2+0x2b8>
 800cb16:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800cb1a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800cb1e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800cb22:	f8cd c01c 	str.w	ip, [sp, #28]
 800cb26:	f7f3 fccf 	bl	80004c8 <__aeabi_dmul>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	4650      	mov	r0, sl
 800cb30:	4659      	mov	r1, fp
 800cb32:	f7f3 fb13 	bl	800015c <__adddf3>
 800cb36:	4682      	mov	sl, r0
 800cb38:	468b      	mov	fp, r1
 800cb3a:	f108 0801 	add.w	r8, r8, #1
 800cb3e:	9b02      	ldr	r3, [sp, #8]
 800cb40:	4598      	cmp	r8, r3
 800cb42:	dc01      	bgt.n	800cb48 <__kernel_rem_pio2+0x4a4>
 800cb44:	45b8      	cmp	r8, r7
 800cb46:	dde6      	ble.n	800cb16 <__kernel_rem_pio2+0x472>
 800cb48:	ab48      	add	r3, sp, #288	; 0x120
 800cb4a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cb4e:	e9c7 ab00 	strd	sl, fp, [r7]
 800cb52:	3e01      	subs	r6, #1
 800cb54:	e707      	b.n	800c966 <__kernel_rem_pio2+0x2c2>
 800cb56:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	dc09      	bgt.n	800cb70 <__kernel_rem_pio2+0x4cc>
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	dc32      	bgt.n	800cbc6 <__kernel_rem_pio2+0x522>
 800cb60:	d05a      	beq.n	800cc18 <__kernel_rem_pio2+0x574>
 800cb62:	9b04      	ldr	r3, [sp, #16]
 800cb64:	f003 0007 	and.w	r0, r3, #7
 800cb68:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb70:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cb72:	2b03      	cmp	r3, #3
 800cb74:	d1f5      	bne.n	800cb62 <__kernel_rem_pio2+0x4be>
 800cb76:	ab48      	add	r3, sp, #288	; 0x120
 800cb78:	441d      	add	r5, r3
 800cb7a:	46aa      	mov	sl, r5
 800cb7c:	46a3      	mov	fp, r4
 800cb7e:	f1bb 0f00 	cmp.w	fp, #0
 800cb82:	dc76      	bgt.n	800cc72 <__kernel_rem_pio2+0x5ce>
 800cb84:	46aa      	mov	sl, r5
 800cb86:	46a3      	mov	fp, r4
 800cb88:	f1bb 0f01 	cmp.w	fp, #1
 800cb8c:	f300 8090 	bgt.w	800ccb0 <__kernel_rem_pio2+0x60c>
 800cb90:	2700      	movs	r7, #0
 800cb92:	463e      	mov	r6, r7
 800cb94:	2c01      	cmp	r4, #1
 800cb96:	f300 80aa 	bgt.w	800ccee <__kernel_rem_pio2+0x64a>
 800cb9a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800cb9e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800cba2:	9b00      	ldr	r3, [sp, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f040 80ac 	bne.w	800cd02 <__kernel_rem_pio2+0x65e>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	462a      	mov	r2, r5
 800cbae:	9806      	ldr	r0, [sp, #24]
 800cbb0:	e9c0 2300 	strd	r2, r3, [r0]
 800cbb4:	4622      	mov	r2, r4
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cbbc:	463a      	mov	r2, r7
 800cbbe:	4633      	mov	r3, r6
 800cbc0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cbc4:	e7cd      	b.n	800cb62 <__kernel_rem_pio2+0x4be>
 800cbc6:	2000      	movs	r0, #0
 800cbc8:	46a0      	mov	r8, r4
 800cbca:	4601      	mov	r1, r0
 800cbcc:	ab48      	add	r3, sp, #288	; 0x120
 800cbce:	441d      	add	r5, r3
 800cbd0:	f1b8 0f00 	cmp.w	r8, #0
 800cbd4:	da3a      	bge.n	800cc4c <__kernel_rem_pio2+0x5a8>
 800cbd6:	9b00      	ldr	r3, [sp, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d03e      	beq.n	800cc5a <__kernel_rem_pio2+0x5b6>
 800cbdc:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	462b      	mov	r3, r5
 800cbe4:	9d06      	ldr	r5, [sp, #24]
 800cbe6:	2601      	movs	r6, #1
 800cbe8:	e9c5 2300 	strd	r2, r3, [r5]
 800cbec:	460b      	mov	r3, r1
 800cbee:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800cbf2:	f7f3 fab1 	bl	8000158 <__aeabi_dsub>
 800cbf6:	4684      	mov	ip, r0
 800cbf8:	460f      	mov	r7, r1
 800cbfa:	ad48      	add	r5, sp, #288	; 0x120
 800cbfc:	42b4      	cmp	r4, r6
 800cbfe:	f105 0508 	add.w	r5, r5, #8
 800cc02:	da2c      	bge.n	800cc5e <__kernel_rem_pio2+0x5ba>
 800cc04:	9b00      	ldr	r3, [sp, #0]
 800cc06:	b10b      	cbz	r3, 800cc0c <__kernel_rem_pio2+0x568>
 800cc08:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800cc0c:	4662      	mov	r2, ip
 800cc0e:	463b      	mov	r3, r7
 800cc10:	9906      	ldr	r1, [sp, #24]
 800cc12:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800cc16:	e7a4      	b.n	800cb62 <__kernel_rem_pio2+0x4be>
 800cc18:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800cc1a:	ab48      	add	r3, sp, #288	; 0x120
 800cc1c:	4637      	mov	r7, r6
 800cc1e:	441d      	add	r5, r3
 800cc20:	2c00      	cmp	r4, #0
 800cc22:	da09      	bge.n	800cc38 <__kernel_rem_pio2+0x594>
 800cc24:	9b00      	ldr	r3, [sp, #0]
 800cc26:	b10b      	cbz	r3, 800cc2c <__kernel_rem_pio2+0x588>
 800cc28:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800cc2c:	4632      	mov	r2, r6
 800cc2e:	463b      	mov	r3, r7
 800cc30:	9906      	ldr	r1, [sp, #24]
 800cc32:	e9c1 2300 	strd	r2, r3, [r1]
 800cc36:	e794      	b.n	800cb62 <__kernel_rem_pio2+0x4be>
 800cc38:	4630      	mov	r0, r6
 800cc3a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cc3e:	4639      	mov	r1, r7
 800cc40:	f7f3 fa8c 	bl	800015c <__adddf3>
 800cc44:	3c01      	subs	r4, #1
 800cc46:	4606      	mov	r6, r0
 800cc48:	460f      	mov	r7, r1
 800cc4a:	e7e9      	b.n	800cc20 <__kernel_rem_pio2+0x57c>
 800cc4c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cc50:	f7f3 fa84 	bl	800015c <__adddf3>
 800cc54:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc58:	e7ba      	b.n	800cbd0 <__kernel_rem_pio2+0x52c>
 800cc5a:	460d      	mov	r5, r1
 800cc5c:	e7c0      	b.n	800cbe0 <__kernel_rem_pio2+0x53c>
 800cc5e:	4660      	mov	r0, ip
 800cc60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cc64:	4639      	mov	r1, r7
 800cc66:	f7f3 fa79 	bl	800015c <__adddf3>
 800cc6a:	3601      	adds	r6, #1
 800cc6c:	4684      	mov	ip, r0
 800cc6e:	460f      	mov	r7, r1
 800cc70:	e7c4      	b.n	800cbfc <__kernel_rem_pio2+0x558>
 800cc72:	e9da 6700 	ldrd	r6, r7, [sl]
 800cc76:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800cc7a:	4632      	mov	r2, r6
 800cc7c:	463b      	mov	r3, r7
 800cc7e:	4640      	mov	r0, r8
 800cc80:	4649      	mov	r1, r9
 800cc82:	f7f3 fa6b 	bl	800015c <__adddf3>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc8e:	4640      	mov	r0, r8
 800cc90:	4649      	mov	r1, r9
 800cc92:	f7f3 fa61 	bl	8000158 <__aeabi_dsub>
 800cc96:	4632      	mov	r2, r6
 800cc98:	463b      	mov	r3, r7
 800cc9a:	f7f3 fa5f 	bl	800015c <__adddf3>
 800cc9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cca2:	e86a 0102 	strd	r0, r1, [sl], #-8
 800cca6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ccaa:	e9ca 2300 	strd	r2, r3, [sl]
 800ccae:	e766      	b.n	800cb7e <__kernel_rem_pio2+0x4da>
 800ccb0:	e9da 8900 	ldrd	r8, r9, [sl]
 800ccb4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800ccb8:	4642      	mov	r2, r8
 800ccba:	464b      	mov	r3, r9
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	4639      	mov	r1, r7
 800ccc0:	f7f3 fa4c 	bl	800015c <__adddf3>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cccc:	4630      	mov	r0, r6
 800ccce:	4639      	mov	r1, r7
 800ccd0:	f7f3 fa42 	bl	8000158 <__aeabi_dsub>
 800ccd4:	4642      	mov	r2, r8
 800ccd6:	464b      	mov	r3, r9
 800ccd8:	f7f3 fa40 	bl	800015c <__adddf3>
 800ccdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cce0:	e86a 0102 	strd	r0, r1, [sl], #-8
 800cce4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cce8:	e9ca 2300 	strd	r2, r3, [sl]
 800ccec:	e74c      	b.n	800cb88 <__kernel_rem_pio2+0x4e4>
 800ccee:	4638      	mov	r0, r7
 800ccf0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ccf4:	4631      	mov	r1, r6
 800ccf6:	f7f3 fa31 	bl	800015c <__adddf3>
 800ccfa:	3c01      	subs	r4, #1
 800ccfc:	4607      	mov	r7, r0
 800ccfe:	460e      	mov	r6, r1
 800cd00:	e748      	b.n	800cb94 <__kernel_rem_pio2+0x4f0>
 800cd02:	9b06      	ldr	r3, [sp, #24]
 800cd04:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cd08:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cd0c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800cd10:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800cd14:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800cd18:	601d      	str	r5, [r3, #0]
 800cd1a:	615e      	str	r6, [r3, #20]
 800cd1c:	e721      	b.n	800cb62 <__kernel_rem_pio2+0x4be>
 800cd1e:	bf00      	nop
 800cd20:	41700000 	.word	0x41700000
 800cd24:	3e700000 	.word	0x3e700000

0800cd28 <__kernel_sin>:
 800cd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd2c:	b086      	sub	sp, #24
 800cd2e:	e9cd 2300 	strd	r2, r3, [sp]
 800cd32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd36:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cd3a:	4682      	mov	sl, r0
 800cd3c:	460c      	mov	r4, r1
 800cd3e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800cd40:	da03      	bge.n	800cd4a <__kernel_sin+0x22>
 800cd42:	f7f3 fe71 	bl	8000a28 <__aeabi_d2iz>
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d050      	beq.n	800cdec <__kernel_sin+0xc4>
 800cd4a:	4652      	mov	r2, sl
 800cd4c:	4623      	mov	r3, r4
 800cd4e:	4650      	mov	r0, sl
 800cd50:	4621      	mov	r1, r4
 800cd52:	f7f3 fbb9 	bl	80004c8 <__aeabi_dmul>
 800cd56:	4606      	mov	r6, r0
 800cd58:	460f      	mov	r7, r1
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	4650      	mov	r0, sl
 800cd60:	4621      	mov	r1, r4
 800cd62:	f7f3 fbb1 	bl	80004c8 <__aeabi_dmul>
 800cd66:	a33e      	add	r3, pc, #248	; (adr r3, 800ce60 <__kernel_sin+0x138>)
 800cd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6c:	4680      	mov	r8, r0
 800cd6e:	4689      	mov	r9, r1
 800cd70:	4630      	mov	r0, r6
 800cd72:	4639      	mov	r1, r7
 800cd74:	f7f3 fba8 	bl	80004c8 <__aeabi_dmul>
 800cd78:	a33b      	add	r3, pc, #236	; (adr r3, 800ce68 <__kernel_sin+0x140>)
 800cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7e:	f7f3 f9eb 	bl	8000158 <__aeabi_dsub>
 800cd82:	4632      	mov	r2, r6
 800cd84:	463b      	mov	r3, r7
 800cd86:	f7f3 fb9f 	bl	80004c8 <__aeabi_dmul>
 800cd8a:	a339      	add	r3, pc, #228	; (adr r3, 800ce70 <__kernel_sin+0x148>)
 800cd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd90:	f7f3 f9e4 	bl	800015c <__adddf3>
 800cd94:	4632      	mov	r2, r6
 800cd96:	463b      	mov	r3, r7
 800cd98:	f7f3 fb96 	bl	80004c8 <__aeabi_dmul>
 800cd9c:	a336      	add	r3, pc, #216	; (adr r3, 800ce78 <__kernel_sin+0x150>)
 800cd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda2:	f7f3 f9d9 	bl	8000158 <__aeabi_dsub>
 800cda6:	4632      	mov	r2, r6
 800cda8:	463b      	mov	r3, r7
 800cdaa:	f7f3 fb8d 	bl	80004c8 <__aeabi_dmul>
 800cdae:	a334      	add	r3, pc, #208	; (adr r3, 800ce80 <__kernel_sin+0x158>)
 800cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb4:	f7f3 f9d2 	bl	800015c <__adddf3>
 800cdb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdbc:	b9dd      	cbnz	r5, 800cdf6 <__kernel_sin+0xce>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	f7f3 fb7f 	bl	80004c8 <__aeabi_dmul>
 800cdca:	a32f      	add	r3, pc, #188	; (adr r3, 800ce88 <__kernel_sin+0x160>)
 800cdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd0:	f7f3 f9c2 	bl	8000158 <__aeabi_dsub>
 800cdd4:	4642      	mov	r2, r8
 800cdd6:	464b      	mov	r3, r9
 800cdd8:	f7f3 fb76 	bl	80004c8 <__aeabi_dmul>
 800cddc:	4602      	mov	r2, r0
 800cdde:	460b      	mov	r3, r1
 800cde0:	4650      	mov	r0, sl
 800cde2:	4621      	mov	r1, r4
 800cde4:	f7f3 f9ba 	bl	800015c <__adddf3>
 800cde8:	4682      	mov	sl, r0
 800cdea:	460c      	mov	r4, r1
 800cdec:	4650      	mov	r0, sl
 800cdee:	4621      	mov	r1, r4
 800cdf0:	b006      	add	sp, #24
 800cdf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdfc:	4b24      	ldr	r3, [pc, #144]	; (800ce90 <__kernel_sin+0x168>)
 800cdfe:	f7f3 fb63 	bl	80004c8 <__aeabi_dmul>
 800ce02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce0a:	4640      	mov	r0, r8
 800ce0c:	4649      	mov	r1, r9
 800ce0e:	f7f3 fb5b 	bl	80004c8 <__aeabi_dmul>
 800ce12:	4602      	mov	r2, r0
 800ce14:	460b      	mov	r3, r1
 800ce16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce1a:	f7f3 f99d 	bl	8000158 <__aeabi_dsub>
 800ce1e:	4632      	mov	r2, r6
 800ce20:	463b      	mov	r3, r7
 800ce22:	f7f3 fb51 	bl	80004c8 <__aeabi_dmul>
 800ce26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce2a:	f7f3 f995 	bl	8000158 <__aeabi_dsub>
 800ce2e:	a316      	add	r3, pc, #88	; (adr r3, 800ce88 <__kernel_sin+0x160>)
 800ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce34:	4606      	mov	r6, r0
 800ce36:	460f      	mov	r7, r1
 800ce38:	4640      	mov	r0, r8
 800ce3a:	4649      	mov	r1, r9
 800ce3c:	f7f3 fb44 	bl	80004c8 <__aeabi_dmul>
 800ce40:	4602      	mov	r2, r0
 800ce42:	460b      	mov	r3, r1
 800ce44:	4630      	mov	r0, r6
 800ce46:	4639      	mov	r1, r7
 800ce48:	f7f3 f988 	bl	800015c <__adddf3>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	460b      	mov	r3, r1
 800ce50:	4650      	mov	r0, sl
 800ce52:	4621      	mov	r1, r4
 800ce54:	f7f3 f980 	bl	8000158 <__aeabi_dsub>
 800ce58:	e7c6      	b.n	800cde8 <__kernel_sin+0xc0>
 800ce5a:	bf00      	nop
 800ce5c:	f3af 8000 	nop.w
 800ce60:	5acfd57c 	.word	0x5acfd57c
 800ce64:	3de5d93a 	.word	0x3de5d93a
 800ce68:	8a2b9ceb 	.word	0x8a2b9ceb
 800ce6c:	3e5ae5e6 	.word	0x3e5ae5e6
 800ce70:	57b1fe7d 	.word	0x57b1fe7d
 800ce74:	3ec71de3 	.word	0x3ec71de3
 800ce78:	19c161d5 	.word	0x19c161d5
 800ce7c:	3f2a01a0 	.word	0x3f2a01a0
 800ce80:	1110f8a6 	.word	0x1110f8a6
 800ce84:	3f811111 	.word	0x3f811111
 800ce88:	55555549 	.word	0x55555549
 800ce8c:	3fc55555 	.word	0x3fc55555
 800ce90:	3fe00000 	.word	0x3fe00000

0800ce94 <with_errno>:
 800ce94:	b570      	push	{r4, r5, r6, lr}
 800ce96:	4604      	mov	r4, r0
 800ce98:	460d      	mov	r5, r1
 800ce9a:	4616      	mov	r6, r2
 800ce9c:	f7fc fe2a 	bl	8009af4 <__errno>
 800cea0:	4629      	mov	r1, r5
 800cea2:	6006      	str	r6, [r0, #0]
 800cea4:	4620      	mov	r0, r4
 800cea6:	bd70      	pop	{r4, r5, r6, pc}

0800cea8 <xflow>:
 800cea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ceaa:	4615      	mov	r5, r2
 800ceac:	461c      	mov	r4, r3
 800ceae:	b180      	cbz	r0, 800ced2 <xflow+0x2a>
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ceb6:	e9cd 0100 	strd	r0, r1, [sp]
 800ceba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cebe:	4628      	mov	r0, r5
 800cec0:	4621      	mov	r1, r4
 800cec2:	f7f3 fb01 	bl	80004c8 <__aeabi_dmul>
 800cec6:	2222      	movs	r2, #34	; 0x22
 800cec8:	b003      	add	sp, #12
 800ceca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cece:	f7ff bfe1 	b.w	800ce94 <with_errno>
 800ced2:	4610      	mov	r0, r2
 800ced4:	4619      	mov	r1, r3
 800ced6:	e7ee      	b.n	800ceb6 <xflow+0xe>

0800ced8 <__math_uflow>:
 800ced8:	2200      	movs	r2, #0
 800ceda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cede:	f7ff bfe3 	b.w	800cea8 <xflow>

0800cee2 <__math_oflow>:
 800cee2:	2200      	movs	r2, #0
 800cee4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cee8:	f7ff bfde 	b.w	800cea8 <xflow>

0800ceec <fabs>:
 800ceec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cef0:	4770      	bx	lr

0800cef2 <finite>:
 800cef2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800cef6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cefa:	0fc0      	lsrs	r0, r0, #31
 800cefc:	4770      	bx	lr
	...

0800cf00 <floor>:
 800cf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf04:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800cf08:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800cf0c:	2e13      	cmp	r6, #19
 800cf0e:	4602      	mov	r2, r0
 800cf10:	460b      	mov	r3, r1
 800cf12:	4607      	mov	r7, r0
 800cf14:	460c      	mov	r4, r1
 800cf16:	4605      	mov	r5, r0
 800cf18:	dc33      	bgt.n	800cf82 <floor+0x82>
 800cf1a:	2e00      	cmp	r6, #0
 800cf1c:	da14      	bge.n	800cf48 <floor+0x48>
 800cf1e:	a334      	add	r3, pc, #208	; (adr r3, 800cff0 <floor+0xf0>)
 800cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf24:	f7f3 f91a 	bl	800015c <__adddf3>
 800cf28:	2200      	movs	r2, #0
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	f7f3 fd5c 	bl	80009e8 <__aeabi_dcmpgt>
 800cf30:	b138      	cbz	r0, 800cf42 <floor+0x42>
 800cf32:	2c00      	cmp	r4, #0
 800cf34:	da58      	bge.n	800cfe8 <floor+0xe8>
 800cf36:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cf3a:	431d      	orrs	r5, r3
 800cf3c:	d001      	beq.n	800cf42 <floor+0x42>
 800cf3e:	2500      	movs	r5, #0
 800cf40:	4c2d      	ldr	r4, [pc, #180]	; (800cff8 <floor+0xf8>)
 800cf42:	4623      	mov	r3, r4
 800cf44:	462f      	mov	r7, r5
 800cf46:	e025      	b.n	800cf94 <floor+0x94>
 800cf48:	4a2c      	ldr	r2, [pc, #176]	; (800cffc <floor+0xfc>)
 800cf4a:	fa42 f806 	asr.w	r8, r2, r6
 800cf4e:	ea01 0208 	and.w	r2, r1, r8
 800cf52:	4302      	orrs	r2, r0
 800cf54:	d01e      	beq.n	800cf94 <floor+0x94>
 800cf56:	a326      	add	r3, pc, #152	; (adr r3, 800cff0 <floor+0xf0>)
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	f7f3 f8fe 	bl	800015c <__adddf3>
 800cf60:	2200      	movs	r2, #0
 800cf62:	2300      	movs	r3, #0
 800cf64:	f7f3 fd40 	bl	80009e8 <__aeabi_dcmpgt>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d0ea      	beq.n	800cf42 <floor+0x42>
 800cf6c:	2c00      	cmp	r4, #0
 800cf6e:	bfbe      	ittt	lt
 800cf70:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cf74:	fa43 f606 	asrlt.w	r6, r3, r6
 800cf78:	19a4      	addlt	r4, r4, r6
 800cf7a:	2500      	movs	r5, #0
 800cf7c:	ea24 0408 	bic.w	r4, r4, r8
 800cf80:	e7df      	b.n	800cf42 <floor+0x42>
 800cf82:	2e33      	cmp	r6, #51	; 0x33
 800cf84:	dd0a      	ble.n	800cf9c <floor+0x9c>
 800cf86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cf8a:	d103      	bne.n	800cf94 <floor+0x94>
 800cf8c:	f7f3 f8e6 	bl	800015c <__adddf3>
 800cf90:	4607      	mov	r7, r0
 800cf92:	460b      	mov	r3, r1
 800cf94:	4638      	mov	r0, r7
 800cf96:	4619      	mov	r1, r3
 800cf98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800cfa4:	fa22 f808 	lsr.w	r8, r2, r8
 800cfa8:	ea18 0f00 	tst.w	r8, r0
 800cfac:	d0f2      	beq.n	800cf94 <floor+0x94>
 800cfae:	a310      	add	r3, pc, #64	; (adr r3, 800cff0 <floor+0xf0>)
 800cfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb4:	f7f3 f8d2 	bl	800015c <__adddf3>
 800cfb8:	2200      	movs	r2, #0
 800cfba:	2300      	movs	r3, #0
 800cfbc:	f7f3 fd14 	bl	80009e8 <__aeabi_dcmpgt>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d0be      	beq.n	800cf42 <floor+0x42>
 800cfc4:	2c00      	cmp	r4, #0
 800cfc6:	da02      	bge.n	800cfce <floor+0xce>
 800cfc8:	2e14      	cmp	r6, #20
 800cfca:	d103      	bne.n	800cfd4 <floor+0xd4>
 800cfcc:	3401      	adds	r4, #1
 800cfce:	ea25 0508 	bic.w	r5, r5, r8
 800cfd2:	e7b6      	b.n	800cf42 <floor+0x42>
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cfda:	fa03 f606 	lsl.w	r6, r3, r6
 800cfde:	4435      	add	r5, r6
 800cfe0:	42bd      	cmp	r5, r7
 800cfe2:	bf38      	it	cc
 800cfe4:	18e4      	addcc	r4, r4, r3
 800cfe6:	e7f2      	b.n	800cfce <floor+0xce>
 800cfe8:	2500      	movs	r5, #0
 800cfea:	462c      	mov	r4, r5
 800cfec:	e7a9      	b.n	800cf42 <floor+0x42>
 800cfee:	bf00      	nop
 800cff0:	8800759c 	.word	0x8800759c
 800cff4:	7e37e43c 	.word	0x7e37e43c
 800cff8:	bff00000 	.word	0xbff00000
 800cffc:	000fffff 	.word	0x000fffff

0800d000 <scalbn>:
 800d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d002:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d006:	4604      	mov	r4, r0
 800d008:	460d      	mov	r5, r1
 800d00a:	4617      	mov	r7, r2
 800d00c:	460b      	mov	r3, r1
 800d00e:	b996      	cbnz	r6, 800d036 <scalbn+0x36>
 800d010:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d014:	4303      	orrs	r3, r0
 800d016:	d039      	beq.n	800d08c <scalbn+0x8c>
 800d018:	4b33      	ldr	r3, [pc, #204]	; (800d0e8 <scalbn+0xe8>)
 800d01a:	2200      	movs	r2, #0
 800d01c:	f7f3 fa54 	bl	80004c8 <__aeabi_dmul>
 800d020:	4b32      	ldr	r3, [pc, #200]	; (800d0ec <scalbn+0xec>)
 800d022:	4604      	mov	r4, r0
 800d024:	429f      	cmp	r7, r3
 800d026:	460d      	mov	r5, r1
 800d028:	da0f      	bge.n	800d04a <scalbn+0x4a>
 800d02a:	a32b      	add	r3, pc, #172	; (adr r3, 800d0d8 <scalbn+0xd8>)
 800d02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d030:	f7f3 fa4a 	bl	80004c8 <__aeabi_dmul>
 800d034:	e006      	b.n	800d044 <scalbn+0x44>
 800d036:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d03a:	4296      	cmp	r6, r2
 800d03c:	d10a      	bne.n	800d054 <scalbn+0x54>
 800d03e:	4602      	mov	r2, r0
 800d040:	f7f3 f88c 	bl	800015c <__adddf3>
 800d044:	4604      	mov	r4, r0
 800d046:	460d      	mov	r5, r1
 800d048:	e020      	b.n	800d08c <scalbn+0x8c>
 800d04a:	460b      	mov	r3, r1
 800d04c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d050:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800d054:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d058:	19b9      	adds	r1, r7, r6
 800d05a:	4291      	cmp	r1, r2
 800d05c:	dd0e      	ble.n	800d07c <scalbn+0x7c>
 800d05e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d062:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d066:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d06a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d06e:	4820      	ldr	r0, [pc, #128]	; (800d0f0 <scalbn+0xf0>)
 800d070:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d074:	a31a      	add	r3, pc, #104	; (adr r3, 800d0e0 <scalbn+0xe0>)
 800d076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07a:	e7d9      	b.n	800d030 <scalbn+0x30>
 800d07c:	2900      	cmp	r1, #0
 800d07e:	dd08      	ble.n	800d092 <scalbn+0x92>
 800d080:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d084:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d088:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d08c:	4620      	mov	r0, r4
 800d08e:	4629      	mov	r1, r5
 800d090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d092:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800d096:	da12      	bge.n	800d0be <scalbn+0xbe>
 800d098:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d09c:	429f      	cmp	r7, r3
 800d09e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800d0a2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800d0a6:	dcdc      	bgt.n	800d062 <scalbn+0x62>
 800d0a8:	a30b      	add	r3, pc, #44	; (adr r3, 800d0d8 <scalbn+0xd8>)
 800d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ae:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800d0b2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800d0b6:	480f      	ldr	r0, [pc, #60]	; (800d0f4 <scalbn+0xf4>)
 800d0b8:	f041 011f 	orr.w	r1, r1, #31
 800d0bc:	e7b8      	b.n	800d030 <scalbn+0x30>
 800d0be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0c2:	3136      	adds	r1, #54	; 0x36
 800d0c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d0c8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	4b09      	ldr	r3, [pc, #36]	; (800d0f8 <scalbn+0xf8>)
 800d0d4:	e7ac      	b.n	800d030 <scalbn+0x30>
 800d0d6:	bf00      	nop
 800d0d8:	c2f8f359 	.word	0xc2f8f359
 800d0dc:	01a56e1f 	.word	0x01a56e1f
 800d0e0:	8800759c 	.word	0x8800759c
 800d0e4:	7e37e43c 	.word	0x7e37e43c
 800d0e8:	43500000 	.word	0x43500000
 800d0ec:	ffff3cb0 	.word	0xffff3cb0
 800d0f0:	8800759c 	.word	0x8800759c
 800d0f4:	c2f8f359 	.word	0xc2f8f359
 800d0f8:	3c900000 	.word	0x3c900000

0800d0fc <_init>:
 800d0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fe:	bf00      	nop
 800d100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d102:	bc08      	pop	{r3}
 800d104:	469e      	mov	lr, r3
 800d106:	4770      	bx	lr

0800d108 <_fini>:
 800d108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d10a:	bf00      	nop
 800d10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10e:	bc08      	pop	{r3}
 800d110:	469e      	mov	lr, r3
 800d112:	4770      	bx	lr
